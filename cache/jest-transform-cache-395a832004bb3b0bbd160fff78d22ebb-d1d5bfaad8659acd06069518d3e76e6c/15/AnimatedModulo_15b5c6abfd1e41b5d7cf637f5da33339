250bd2eb15b2e893613a4122a6fff844
'use strict';

exports.__esModule = true;
exports.default = void 0;

var _AnimatedInterpolation = _interopRequireDefault(require("./AnimatedInterpolation"));

var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));

var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var AnimatedModulo = function (_AnimatedWithChildren) {
  _inheritsLoose(AnimatedModulo, _AnimatedWithChildren);

  function AnimatedModulo(a, modulus) {
    var _this;

    _this = _AnimatedWithChildren.call(this) || this;
    _this._a = a;
    _this._modulus = modulus;
    return _this;
  }

  var _proto = AnimatedModulo.prototype;

  _proto.__makeNative = function __makeNative() {
    this._a.__makeNative();

    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };

  _proto.__getValue = function __getValue() {
    return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
  };

  _proto.interpolate = function interpolate(config) {
    return new _AnimatedInterpolation.default(this, config);
  };

  _proto.__attach = function __attach() {
    this._a.__addChild(this);
  };

  _proto.__detach = function __detach() {
    this._a.__removeChild(this);

    _AnimatedWithChildren.prototype.__detach.call(this);
  };

  _proto.__getNativeConfig = function __getNativeConfig() {
    return {
      type: 'modulus',
      input: this._a.__getNativeTag(),
      modulus: this._modulus
    };
  };

  return AnimatedModulo;
}(_AnimatedWithChildren2.default);

var _default = AnimatedModulo;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkTW9kdWxvLmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9BbmltYXRlZEludGVycG9sYXRpb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9BbmltYXRlZE5vZGUiLCJfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4yIiwib2JqIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBbmltYXRlZE1vZHVsbyIsIl9BbmltYXRlZFdpdGhDaGlsZHJlbiIsImEiLCJtb2R1bHVzIiwiX3RoaXMiLCJjYWxsIiwiX2EiLCJfbW9kdWx1cyIsIl9wcm90byIsIl9fbWFrZU5hdGl2ZSIsIl9fZ2V0VmFsdWUiLCJpbnRlcnBvbGF0ZSIsImNvbmZpZyIsIl9fYXR0YWNoIiwiX19hZGRDaGlsZCIsIl9fZGV0YWNoIiwiX19yZW1vdmVDaGlsZCIsIl9fZ2V0TmF0aXZlQ29uZmlnIiwidHlwZSIsImlucHV0IiwiX19nZXROYXRpdmVUYWciLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBU0E7O0FBRUFBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxzQkFBc0IsR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sMkJBQVIsQ0FBbkQ7O0FBRUEsSUFBSUMsYUFBYSxHQUFHRixzQkFBc0IsQ0FBQ0MsT0FBTyxrQkFBUixDQUExQzs7QUFFQSxJQUFJRSxzQkFBc0IsR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sMEJBQVIsQ0FBbkQ7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NJLEdBQWhDLEVBQXFDO0FBQUUs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QUtiLEVBQUwsQ0FBUWMsY0FBUixFQUZGO0FBR0xqQixNQUFBQSxPQUFPLEVBQUUsS0FBS0k7QUFIVCxLQUFQO0FBS0QsR0FORDs7QUFRQSxTQUFPUCxjQUFQO0FBQ0QsQ0EvQ2lDLENBK0NoQ2Qsc0JBQXNCLENBQUNMLE9BL0NTLENBQWxDOztBQWlEQSxJQUFJd0MsUUFBUSxHQUFHckIsY0FBZjtBQUNBckIsT0FBTyxDQUFDRSxPQUFSLEdBQWtCd0MsUUFBbEI7QUFDQUMsTUFBTSxDQUFDM0MsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9BbmltYXRlZEludGVycG9sYXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0FuaW1hdGVkSW50ZXJwb2xhdGlvblwiKSk7XG5cbnZhciBfQW5pbWF0ZWROb2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9BbmltYXRlZE5vZGVcIikpO1xuXG52YXIgX0FuaW1hdGVkV2l0aENoaWxkcmVuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQW5pbWF0ZWRXaXRoQ2hpbGRyZW5cIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIEFuaW1hdGVkTW9kdWxvID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4pIHtcbiAgX2luaGVyaXRzTG9vc2UoQW5pbWF0ZWRNb2R1bG8sIF9BbmltYXRlZFdpdGhDaGlsZHJlbik7XG5cbiAgZnVuY3Rpb24gQW5pbWF0ZWRNb2R1bG8oYSwgbW9kdWx1cykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0FuaW1hdGVkV2l0aENoaWxkcmVuLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICBfdGhpcy5fYSA9IGE7XG4gICAgX3RoaXMuX21vZHVsdXMgPSBtb2R1bHVzO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBbmltYXRlZE1vZHVsby5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLl9fbWFrZU5hdGl2ZSA9IGZ1bmN0aW9uIF9fbWFrZU5hdGl2ZSgpIHtcbiAgICB0aGlzLl9hLl9fbWFrZU5hdGl2ZSgpO1xuXG4gICAgX0FuaW1hdGVkV2l0aENoaWxkcmVuLnByb3RvdHlwZS5fX21ha2VOYXRpdmUuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uX19nZXRWYWx1ZSA9IGZ1bmN0aW9uIF9fZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9hLl9fZ2V0VmFsdWUoKSAlIHRoaXMuX21vZHVsdXMgKyB0aGlzLl9tb2R1bHVzKSAlIHRoaXMuX21vZHVsdXM7XG4gIH07XG5cbiAgX3Byb3RvLmludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoY29uZmlnKSB7XG4gICAgcmV0dXJuIG5ldyBfQW5pbWF0ZWRJbnRlcnBvbGF0aW9uLmRlZmF1bHQodGhpcywgY29uZmlnKTtcbiAgfTtcblxuICBfcHJvdG8uX19hdHRhY2ggPSBmdW5jdGlvbiBfX2F0dGFjaCgpIHtcbiAgICB0aGlzLl9hLl9fYWRkQ2hpbGQodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLl9fZGV0YWNoID0gZnVuY3Rpb24gX19kZXRhY2goKSB7XG4gICAgdGhpcy5fYS5fX3JlbW92ZUNoaWxkKHRoaXMpO1xuXG4gICAgX0FuaW1hdGVkV2l0aENoaWxkcmVuLnByb3RvdHlwZS5fX2RldGFjaC5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5fX2dldE5hdGl2ZUNvbmZpZyA9IGZ1bmN0aW9uIF9fZ2V0TmF0aXZlQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnbW9kdWx1cycsXG4gICAgICBpbnB1dDogdGhpcy5fYS5fX2dldE5hdGl2ZVRhZygpLFxuICAgICAgbW9kdWx1czogdGhpcy5fbW9kdWx1c1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIEFuaW1hdGVkTW9kdWxvO1xufShfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4yLmRlZmF1bHQpO1xuXG52YXIgX2RlZmF1bHQgPSBBbmltYXRlZE1vZHVsbztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19