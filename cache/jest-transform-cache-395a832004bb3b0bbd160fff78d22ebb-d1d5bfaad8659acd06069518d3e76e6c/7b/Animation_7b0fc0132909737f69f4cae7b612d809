c8053818f0ec22e71b8c7f5b288da71d
'use strict';

exports.__esModule = true;
exports.default = void 0;

var _NativeAnimatedHelper = _interopRequireDefault(require("../NativeAnimatedHelper"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var startNativeAnimationNextId = 1;

var Animation = function () {
  function Animation() {}

  var _proto = Animation.prototype;

  _proto.start = function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {};

  _proto.stop = function stop() {
    if (this.__nativeId) {
      _NativeAnimatedHelper.default.API.stopAnimation(this.__nativeId);
    }
  };

  _proto.__getNativeAnimationConfig = function __getNativeAnimationConfig() {
    throw new Error('This animation type cannot be offloaded to native');
  };

  _proto.__debouncedOnEnd = function __debouncedOnEnd(result) {
    var onEnd = this.__onEnd;
    this.__onEnd = null;
    onEnd && onEnd(result);
  };

  _proto.__startNativeAnimation = function __startNativeAnimation(animatedValue) {
    var startNativeAnimationWaitId = startNativeAnimationNextId + ":startAnimation";
    startNativeAnimationNextId += 1;

    _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);

    try {
      animatedValue.__makeNative();

      this.__nativeId = _NativeAnimatedHelper.default.generateNewAnimationId();

      _NativeAnimatedHelper.default.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
    } catch (e) {
      throw e;
    } finally {
      _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
    }
  };

  return Animation;
}();

var _default = Animation;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfTmF0aXZlQW5pbWF0ZWRIZWxwZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsInN0YXJ0TmF0aXZlQW5pbWF0aW9uTmV4dElkIiwiQW5pbWF0aW9uIiwiX3Byb3RvIiwicHJvdG90eXBlIiwic3RhcnQiLCJmcm9tVmFsdWUiLCJvblVwZGF0ZSIsIm9uRW5kIiwicHJldmlvdXNBbmltYXRpb24iLCJhbmltYXRlZFZhbHVlIiwic3RvcCIsIl9fbmF0aXZlSWQiLCJBUEkiLCJzdG9wQW5pbWF0aW9uIiwiX19nZXROYXRpdmVBbmltYXRpb25Db25maWciLCJFcnJvciIsIl9fZGVib3VuY2VkT25FbmQiLCJyZXN1bHQiLCJfX29uRW5kIiwiX19zdGFydE5hdGl2ZUFuaW1hdGlvbiIsInN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkIiwic2V0V2FpdGluZ0ZvcklkZW50aWZpZXIiLCJfX21ha2VOYXRpdmUiLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiX19nZXROYXRpdmVUYWciLCJiaW5kIiwiZSIsInVuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBU0E7O0FBRUFBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxxQkFBcUIsR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sMkJBQVIsQ0FBbEQ7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NFLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNMLFVBQVgsR0FBd0JLLEdBQXhCLEdBQThCO0FBQUVKLElBQUFBLE9BQU8sRUFBRUk7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsSUFBSUMsMEJBQTBCLEdBQUcsQ0FBakM7O0FBSUEsSUFBSUMsU0FBUyxHQUFnQixZQUFZO0FBQ3ZDLFdBQVNBLFNBQVQsR0FBcUIsQ0FBRTs7QUFFdkIsTUFBSUMsTUFBTSxHQUFHRCxTQUFTLENBQUNFLFNBQXZCOztBQUVBRCxFQUFBQSxNQUFNLENBQUNFLEtBQVAsR0FBZSxTQUFTQSxLQUFULENBQWVDLFNBQWYsRUFBMEJDLFFBQTFCLEVBQW9DQyxLQUFwQyxFQUEyQ0MsaUJBQTNDLEVBQThEQyxhQUE5RCxFQUE2RSxDQUFFLENBQTlGOztBQUVBUCxFQUFBQSxNQUFNLENBQUNRLElBQVAsR0FBYyxTQUFTQSxJQUFULEdBQWdCO0FBQzVCLFFBQUksS0FBS0MsVUFBVCxFQUFxQjtBQUNuQmYsTUFBQUEscUJBQXFCLENBQUNELE9BQXRCLENBQThCaUIsR0FBOUIsQ0FBa0NDLGFBQWxDLENBQWdELEtBQUtGLFVBQXJEO0FBQ0Q7QUFDRixHQUpEOztBQU1BVCxFQUFBQSxNQUFNLENBQUNZLDBCQUFQLEdBQW9DLFNBQVNBLDBCQUFULEdBQXNDO0FBR3hFLFVBQU0sSUFBSUMsS0FBSixDQUFVLG1EQUFWLENBQU47QUFDRCxHQUpEOztBQU9BYixFQUFBQSxNQUFNLENBQUNjLGdCQUFQLEdBQTBCLFNBQVNBLGdCQUFULENBQTBCQyxNQUExQixFQUFrQztBQUMxRCxRQUFJVixLQUFLLEdBQUcsS0FBS1csT0FBakI7QUFDQSxTQUFLQSxPQUFMLEdBQWUsSUFBZjtBQUNBWCxJQUFBQSxLQUFLLElBQUlBLEtBQUssQ0FBQ1UsTUFBRCxDQUFkO0FBQ0QsR0FKRDs7QUFNQWYsRUFBQUEsTUFBTSxDQUFDaUIsc0JBQVAsR0FBZ0MsU0FBU0Esc0JBQVQsQ0FBZ0NWLGFBQWhDLEVBQStDO0FBQzdFLFFBQUlXLDBCQUEwQixHQUFHcEIsMEJBQTBCLEdBQUcsaUJBQTlEO0FBQ0FBLElBQUFBLDBCQUEwQixJQUFJLENBQTlCOztBQUVBSixJQUFBQSxxQkFBcUIsQ0FBQ0QsT0FBdEIsQ0FBOEJpQixHQUE5QixDQUFrQ1MsdUJBQWxDLENBQTBERCwwQkFBMUQ7O0FBRUEsUUFBSTtBQUNGWCxNQUFBQSxhQUFhLENBQUNhLFlBQWQ7O0FBRUEsV0FBS1gsVUFBTCxHQUFrQmYscUJBQXFCLENBQUNELE9BQXRCLENBQThCNEIsc0JBQTlCLEVBQWxCOztBQUVBM0IsTUFBQUEscUJBQXFCLENBQUNELE9BQXRCLENBQThCaUIsR0FBOUIsQ0FBa0NZLGtCQUFsQyxDQUFxRCxLQUFLYixVQUExRCxFQUFzRUYsYUFBYSxDQUFDZ0IsY0FBZCxFQUF0RSxFQUFzRyxLQUFLWCwwQkFBTCxFQUF0RyxFQUF5SSxLQUFLRSxnQkFBTCxDQUFzQlUsSUFBdEIsQ0FBMkIsSUFBM0IsQ0FBekk7QUFDRCxLQU5ELENBTUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsWUFBTUEsQ0FBTjtBQUNELEtBUkQsU0FRVTtBQUNSL0IsTUFBQUEscUJBQXFCLENBQUNELE9BQXRCLENBQThCaUIsR0FBOUIsQ0FBa0NnQix5QkFBbEMsQ0FBNERSLDBCQUE1RDtBQUNEO0FBQ0YsR0FqQkQ7O0FBbUJBLFNBQU9uQixTQUFQO0FBQ0QsQ0E5QzRCLEVBQTdCOztBQWdEQSxJQUFJNEIsUUFBUSxHQUFHNUIsU0FBZjtBQUNBUixPQUFPLENBQUNFLE9BQVIsR0FBa0JrQyxRQUFsQjtBQUNBQyxNQUFNLENBQUNyQyxPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX05hdGl2ZUFuaW1hdGVkSGVscGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc3RhcnROYXRpdmVBbmltYXRpb25OZXh0SWQgPSAxOyAvLyBJbXBvcnRhbnQgbm90ZTogc3RhcnQoKSBhbmQgc3RvcCgpIHdpbGwgb25seSBiZSBjYWxsZWQgYXQgbW9zdCBvbmNlLlxuLy8gT25jZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gc3RvcHBlZCBvciBmaW5pc2hlZCBpdHMgY291cnNlLCBpdCB3aWxsXG4vLyBub3QgYmUgcmV1c2VkLlxuXG52YXIgQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5pbWF0aW9uKCkge31cblxuICB2YXIgX3Byb3RvID0gQW5pbWF0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc3RhcnQgPSBmdW5jdGlvbiBzdGFydChmcm9tVmFsdWUsIG9uVXBkYXRlLCBvbkVuZCwgcHJldmlvdXNBbmltYXRpb24sIGFuaW1hdGVkVmFsdWUpIHt9O1xuXG4gIF9wcm90by5zdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBpZiAodGhpcy5fX25hdGl2ZUlkKSB7XG4gICAgICBfTmF0aXZlQW5pbWF0ZWRIZWxwZXIuZGVmYXVsdC5BUEkuc3RvcEFuaW1hdGlvbih0aGlzLl9fbmF0aXZlSWQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX19nZXROYXRpdmVBbmltYXRpb25Db25maWcgPSBmdW5jdGlvbiBfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZygpIHtcbiAgICAvLyBTdWJjbGFzc2VzIHRoYXQgaGF2ZSBjb3JyZXNwb25kaW5nIGFuaW1hdGlvbiBpbXBsZW1lbnRhdGlvbiBkb25lIGluIG5hdGl2ZVxuICAgIC8vIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZFxuICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBhbmltYXRpb24gdHlwZSBjYW5ub3QgYmUgb2ZmbG9hZGVkIHRvIG5hdGl2ZScpO1xuICB9IC8vIEhlbHBlciBmdW5jdGlvbiBmb3Igc3ViY2xhc3NlcyB0byBtYWtlIHN1cmUgb25FbmQgaXMgb25seSBjYWxsZWQgb25jZS5cbiAgO1xuXG4gIF9wcm90by5fX2RlYm91bmNlZE9uRW5kID0gZnVuY3Rpb24gX19kZWJvdW5jZWRPbkVuZChyZXN1bHQpIHtcbiAgICB2YXIgb25FbmQgPSB0aGlzLl9fb25FbmQ7XG4gICAgdGhpcy5fX29uRW5kID0gbnVsbDtcbiAgICBvbkVuZCAmJiBvbkVuZChyZXN1bHQpO1xuICB9O1xuXG4gIF9wcm90by5fX3N0YXJ0TmF0aXZlQW5pbWF0aW9uID0gZnVuY3Rpb24gX19zdGFydE5hdGl2ZUFuaW1hdGlvbihhbmltYXRlZFZhbHVlKSB7XG4gICAgdmFyIHN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkID0gc3RhcnROYXRpdmVBbmltYXRpb25OZXh0SWQgKyBcIjpzdGFydEFuaW1hdGlvblwiO1xuICAgIHN0YXJ0TmF0aXZlQW5pbWF0aW9uTmV4dElkICs9IDE7XG5cbiAgICBfTmF0aXZlQW5pbWF0ZWRIZWxwZXIuZGVmYXVsdC5BUEkuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIoc3RhcnROYXRpdmVBbmltYXRpb25XYWl0SWQpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGFuaW1hdGVkVmFsdWUuX19tYWtlTmF0aXZlKCk7XG5cbiAgICAgIHRoaXMuX19uYXRpdmVJZCA9IF9OYXRpdmVBbmltYXRlZEhlbHBlci5kZWZhdWx0LmdlbmVyYXRlTmV3QW5pbWF0aW9uSWQoKTtcblxuICAgICAgX05hdGl2ZUFuaW1hdGVkSGVscGVyLmRlZmF1bHQuQVBJLnN0YXJ0QW5pbWF0aW5nTm9kZSh0aGlzLl9fbmF0aXZlSWQsIGFuaW1hdGVkVmFsdWUuX19nZXROYXRpdmVUYWcoKSwgdGhpcy5fX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZygpLCB0aGlzLl9fZGVib3VuY2VkT25FbmQuYmluZCh0aGlzKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX05hdGl2ZUFuaW1hdGVkSGVscGVyLmRlZmF1bHQuQVBJLnVuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIoc3RhcnROYXRpdmVBbmltYXRpb25XYWl0SWQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQW5pbWF0aW9uO1xufSgpO1xuXG52YXIgX2RlZmF1bHQgPSBBbmltYXRpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==