dc4f71712bd88c9eaad3787ab50377a5
"use strict";

exports.__esModule = true;
exports.default = void 0;

var _ExecutionEnvironment = require("fbjs/lib/ExecutionEnvironment");

var _Dimensions = _interopRequireDefault(require("../Dimensions"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var DeviceInfo = {
  Dimensions: {
    get windowPhysicalPixels() {
      var _Dimensions$get = _Dimensions.default.get('window'),
          width = _Dimensions$get.width,
          height = _Dimensions$get.height,
          fontScale = _Dimensions$get.fontScale,
          scale = _Dimensions$get.scale;

      return {
        width: width * scale,
        height: height * scale,
        scale: scale,
        fontScale: fontScale
      };
    },

    get screenPhysicalPixels() {
      var _Dimensions$get2 = _Dimensions.default.get('screen'),
          width = _Dimensions$get2.width,
          height = _Dimensions$get2.height,
          fontScale = _Dimensions$get2.fontScale,
          scale = _Dimensions$get2.scale;

      return {
        width: width * scale,
        height: height * scale,
        scale: scale,
        fontScale: fontScale
      };
    }

  },

  get locale() {
    if (_ExecutionEnvironment.canUseDOM) {
      if (navigator.languages) {
        return navigator.languages[0];
      } else {
        return navigator.language;
      }
    }
  },

  get totalMemory() {
    return _ExecutionEnvironment.canUseDOM ? navigator.deviceMemory : undefined;
  },

  get userAgent() {
    return _ExecutionEnvironment.canUseDOM ? navigator.userAgent : '';
  }

};
var _default = DeviceInfo;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9FeGVjdXRpb25FbnZpcm9ubWVudCIsInJlcXVpcmUiLCJfRGltZW5zaW9ucyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJEZXZpY2VJbmZvIiwiRGltZW5zaW9ucyIsIndpbmRvd1BoeXNpY2FsUGl4ZWxzIiwiX0RpbWVuc2lvbnMkZ2V0IiwiZ2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJmb250U2NhbGUiLCJzY2FsZSIsInNjcmVlblBoeXNpY2FsUGl4ZWxzIiwiX0RpbWVuc2lvbnMkZ2V0MiIsImxvY2FsZSIsImNhblVzZURPTSIsIm5hdmlnYXRvciIsImxhbmd1YWdlcyIsImxhbmd1YWdlIiwidG90YWxNZW1vcnkiLCJkZXZpY2VNZW1vcnkiLCJ1bmRlZmluZWQiLCJ1c2VyQWdlbnQiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxxQkFBcUIsR0FBR0MsT0FBTyxDQUFDLCtCQUFELENBQW5DOztBQUVBLElBQUlDLFdBQVcsR0FBR0Msc0JBQXNCLENBQUNGLE9BQU8saUJBQVIsQ0FBeEM7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NDLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNOLFVBQVgsR0FBd0JNLEdBQXhCLEdBQThCO0FBQUVMLElBQUFBLE9BQU8sRUFBRUs7QUFBWCxHQUFyQztBQUF3RDs7QUFVL0YsSUFBSUMsVUFBVSxHQUFHO0FBQ2ZDLEVBQUFBLFVBQVUsRUFBRTtBQUNWLFFBQUlDLG9CQUFKLEdBQTJCO0FBQ3pCLFVBQUlDLGVBQWUsR0FBR04sV0FBVyxDQUFDSCxPQUFaLENBQW9CVSxHQUFwQixDQUF3QixRQUF4QixDQUF0QjtBQUFBLFVBQ0lDLEtBQUssR0FBR0YsZUFBZSxDQUFDRSxLQUQ1QjtBQUFBLFVBRUlDLE1BQU0sR0FBR0gsZUFBZSxDQUFDRyxNQUY3QjtBQUFBLFVBR0lDLFNBQVMsR0FBR0osZUFBZSxDQUFDSSxTQUhoQztBQUFBLFVBSUlDLEtBQUssR0FBR0wsZUFBZSxDQUFDSyxLQUo1Qjs7QUFNQSxhQUFPO0FBQ0xILFFBQUFBLEtBQUssRUFBRUEsS0FBSyxHQUFHRyxLQURWO0FBRUxGLFFBQUFBLE1BQU0sRUFBRUEsTUFBTSxHQUFHRSxLQUZaO0FBR0xBLFFBQUFBLEtBQUssRUFBRUEsS0FIRjtBQUlMRCxRQUFBQSxTQUFTLEVBQUVBO0FBSk4sT0FBUDtBQU1ELEtBZFM7O0FBZ0JWLFFBQUlFLG9CQUFKLEdBQTJCO0FBQ3pCLFVBQUlDLGdCQUFnQixHQUFHYixXQUFXLENBQUNILE9BQVosQ0FBb0JVLEdBQXBCLENBQXdCLFFBQXhCLENBQXZCO0FBQUEsVUFDSUMsS0FBSyxHQUFHSyxnQkFBZ0IsQ0FBQ0wsS0FEN0I7QUFBQSxVQUVJQyxNQUFNLEdBQUdJLGdCQUFnQixDQUFDSixNQUY5QjtBQUFBLFVBR0lDLFNBQVMsR0FBR0csZ0JBQWdCLENBQUNILFNBSGpDO0FBQUEsVUFJSUMsS0FBSyxHQUFHRSxnQkFBZ0IsQ0FBQ0YsS0FKN0I7O0FBTUEsYUFBTztBQUNMSCxRQUFBQSxLQUFLLEVBQUVBLEtBQUssR0FBR0csS0FEVjtBQUVMRixRQUFBQSxNQUFNLEVBQUVBLE1BQU0sR0FBR0UsS0FGWjtBQUdMQSxRQUFBQSxLQUFLLEVBQUVBLEtBSEY7QUFJTEQsUUFBQUEsU0FBUyxFQUFFQTtBQUpOLE9BQVA7QUFNRDs7QUE3QlMsR0FERzs7QUFrQ2YsTUFBSUksTUFBSixHQUFhO0FBQ1gsUUFBSWhCLHFCQUFxQixDQUFDaUIsU0FBMUIsRUFBcUM7QUFDbkMsVUFBSUMsU0FBUyxDQUFDQyxTQUFkLEVBQXlCO0FBQ3ZCLGVBQU9ELFNBQVMsQ0FBQ0MsU0FBVixDQUFvQixDQUFwQixDQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0QsU0FBUyxDQUFDRSxRQUFqQjtBQUNEO0FBQ0Y7QUFDRixHQTFDYzs7QUE0Q2YsTUFBSUMsV0FBSixHQUFrQjtBQUVoQixXQUFPckIscUJBQXFCLENBQUNpQixTQUF0QixHQUFrQ0MsU0FBUyxDQUFDSSxZQUE1QyxHQUEyREMsU0FBbEU7QUFDRCxHQS9DYzs7QUFpRGYsTUFBSUMsU0FBSixHQUFnQjtBQUNkLFdBQU94QixxQkFBcUIsQ0FBQ2lCLFNBQXRCLEdBQWtDQyxTQUFTLENBQUNNLFNBQTVDLEdBQXdELEVBQS9EO0FBQ0Q7O0FBbkRjLENBQWpCO0FBc0RBLElBQUlDLFFBQVEsR0FBR3BCLFVBQWY7QUFDQVIsT0FBTyxDQUFDRSxPQUFSLEdBQWtCMEIsUUFBbEI7QUFDQUMsTUFBTSxDQUFDN0IsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgX0RpbWVuc2lvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9EaW1lbnNpb25zXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE5pY29sYXMgR2FsbGFnaGVyLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG52YXIgRGV2aWNlSW5mbyA9IHtcbiAgRGltZW5zaW9uczoge1xuICAgIGdldCB3aW5kb3dQaHlzaWNhbFBpeGVscygpIHtcbiAgICAgIHZhciBfRGltZW5zaW9ucyRnZXQgPSBfRGltZW5zaW9ucy5kZWZhdWx0LmdldCgnd2luZG93JyksXG4gICAgICAgICAgd2lkdGggPSBfRGltZW5zaW9ucyRnZXQud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX0RpbWVuc2lvbnMkZ2V0LmhlaWdodCxcbiAgICAgICAgICBmb250U2NhbGUgPSBfRGltZW5zaW9ucyRnZXQuZm9udFNjYWxlLFxuICAgICAgICAgIHNjYWxlID0gX0RpbWVuc2lvbnMkZ2V0LnNjYWxlO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogd2lkdGggKiBzY2FsZSxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKiBzY2FsZSxcbiAgICAgICAgc2NhbGU6IHNjYWxlLFxuICAgICAgICBmb250U2NhbGU6IGZvbnRTY2FsZVxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgZ2V0IHNjcmVlblBoeXNpY2FsUGl4ZWxzKCkge1xuICAgICAgdmFyIF9EaW1lbnNpb25zJGdldDIgPSBfRGltZW5zaW9ucy5kZWZhdWx0LmdldCgnc2NyZWVuJyksXG4gICAgICAgICAgd2lkdGggPSBfRGltZW5zaW9ucyRnZXQyLndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IF9EaW1lbnNpb25zJGdldDIuaGVpZ2h0LFxuICAgICAgICAgIGZvbnRTY2FsZSA9IF9EaW1lbnNpb25zJGdldDIuZm9udFNjYWxlLFxuICAgICAgICAgIHNjYWxlID0gX0RpbWVuc2lvbnMkZ2V0Mi5zY2FsZTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoICogc2NhbGUsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0ICogc2NhbGUsXG4gICAgICAgIHNjYWxlOiBzY2FsZSxcbiAgICAgICAgZm9udFNjYWxlOiBmb250U2NhbGVcbiAgICAgIH07XG4gICAgfVxuXG4gIH0sXG5cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICBpZiAoX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgICAgaWYgKG5hdmlnYXRvci5sYW5ndWFnZXMpIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5sYW5ndWFnZXNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmxhbmd1YWdlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBnZXQgdG90YWxNZW1vcnkoKSB7XG4gICAgLy8gJEZsb3dJc3N1ZSBkZXZpY2VNZW1vcnkgbm90IGRlZmluZWQgaW4gbmF2aWdhdG9yXG4gICAgcmV0dXJuIF9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBuYXZpZ2F0b3IuZGV2aWNlTWVtb3J5IDogdW5kZWZpbmVkO1xuICB9LFxuXG4gIGdldCB1c2VyQWdlbnQoKSB7XG4gICAgcmV0dXJuIF9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBuYXZpZ2F0b3IudXNlckFnZW50IDogJyc7XG4gIH1cblxufTtcbnZhciBfZGVmYXVsdCA9IERldmljZUluZm87XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==