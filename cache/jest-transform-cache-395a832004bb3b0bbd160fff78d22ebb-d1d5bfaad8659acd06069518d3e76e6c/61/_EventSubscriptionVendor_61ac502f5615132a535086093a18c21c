965a2f739278536d056cfa52670ffbb1
'use strict';

exports.__esModule = true;
exports.default = void 0;

var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    this._subscriptionsForType = {};
  }

  var _proto = EventSubscriptionVendor.prototype;

  _proto.addSubscription = function addSubscription(eventType, subscription) {
    (0, _invariant.default)(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

    if (!this._subscriptionsForType[eventType]) {
      this._subscriptionsForType[eventType] = [];
    }

    var key = this._subscriptionsForType[eventType].length;

    this._subscriptionsForType[eventType].push(subscription);

    subscription.eventType = eventType;
    subscription.key = key;
    return subscription;
  };

  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {
    if (eventType == null) {
      this._subscriptionsForType = {};
    } else {
      delete this._subscriptionsForType[eventType];
    }
  };

  _proto.removeSubscription = function removeSubscription(subscription) {
    var eventType = subscription.eventType;
    var key = subscription.key;
    var subscriptionsForType = this._subscriptionsForType[eventType];

    if (subscriptionsForType) {
      delete subscriptionsForType[key];
    }
  };

  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {
    return this._subscriptionsForType[eventType];
  };

  return EventSubscriptionVendor;
}();

var _default = EventSubscriptionVendor;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9FdmVudFN1YnNjcmlwdGlvblZlbmRvci5qcyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfaW52YXJpYW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJFdmVudFN1YnNjcmlwdGlvblZlbmRvciIsIl9zdWJzY3JpcHRpb25zRm9yVHlwZSIsIl9wcm90byIsInByb3RvdHlwZSIsImFkZFN1YnNjcmlwdGlvbiIsImV2ZW50VHlwZSIsInN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXIiLCJrZXkiLCJsZW5ndGgiLCJwdXNoIiwicmVtb3ZlQWxsU3Vic2NyaXB0aW9ucyIsInJlbW92ZVN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbnNGb3JUeXBlIiwiZ2V0U3Vic2NyaXB0aW9uc0ZvclR5cGUiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBU0E7O0FBRUFBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxVQUFVLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsb0JBQUQsQ0FBUixDQUF2Qzs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0UsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0wsVUFBWCxHQUF3QkssR0FBeEIsR0FBOEI7QUFBRUosSUFBQUEsT0FBTyxFQUFFSTtBQUFYLEdBQXJDO0FBQXdEOztBQU0vRixJQUFJQyx1QkFBdUIsR0FBZ0IsWUFBWTtBQUNyRCxXQUFTQSx1QkFBVCxHQUFtQztBQUNqQyxTQUFLQyxxQkFBTCxHQUE2QixFQUE3QjtBQUNEOztBQVNELE1BQUlDLE1BQU0sR0FBR0YsdUJBQXVCLENBQUNHLFNBQXJDOztBQUVBRCxFQUFBQSxNQUFNLENBQUNFLGVBQVAsR0FBeUIsU0FBU0EsZUFBVCxDQUF5QkMsU0FBekIsRUFBb0NDLFlBQXBDLEVBQWtEO0FBQ3pFLEtBQUMsR0FBR1YsVUFBVSxDQUFDRCxPQUFmLEVBQXdCVyxZQUFZLENBQUNDLFVBQWIsS0FBNEIsSUFBcEQsRUFBMEQsd0RBQTFEOztBQUVBLFFBQUksQ0FBQyxLQUFLTixxQkFBTCxDQUEyQkksU0FBM0IsQ0FBTCxFQUE0QztBQUMxQyxXQUFLSixxQkFBTCxDQUEyQkksU0FBM0IsSUFBd0MsRUFBeEM7QUFDRDs7QUFFRCxRQUFJRyxHQUFHLEdBQUcsS0FBS1AscUJBQUwsQ0FBMkJJLFNBQTNCLEVBQXNDSSxNQUFoRDs7QUFFQSxTQUFLUixxQkFBTCxDQUEyQkksU0FBM0IsRUFBc0NLLElBQXRDLENBQTJDSixZQUEzQzs7QUFFQUEsSUFBQUEsWUFBWSxDQUFDRCxTQUFiLEdBQXlCQSxTQUF6QjtBQUNBQyxJQUFBQSxZQUFZLENBQUNFLEdBQWIsR0FBbUJBLEdBQW5CO0FBQ0EsV0FBT0YsWUFBUDtBQUNELEdBZEQ7O0FBdUJBSixFQUFBQSxNQUFNLENBQUNTLHNCQUFQLEdBQWdDLFNBQVNBLHNCQUFULENBQWdDTixTQUFoQyxFQUEyQztBQUN6RSxRQUFJQSxTQUFTLElBQUksSUFBakIsRUFBdUI7QUFDckIsV0FBS0oscUJBQUwsR0FBNkIsRUFBN0I7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPLEtBQUtBLHFCQUFMLENBQTJCSSxTQUEzQixDQUFQO0FBQ0Q7QUFDRixHQU5EOztBQWVBSCxFQUFBQSxNQUFNLENBQUNVLGtCQUFQLEdBQTRCLFNBQVNBLGtCQUFULENBQTRCTixZQUE1QixFQUEwQztBQUNwRSxRQUFJRCxTQUFTLEdBQUdDLFlBQVksQ0FBQ0QsU0FBN0I7QUFDQSxRQUFJRyxHQUFHLEdBQUdGLFlBQVksQ0FBQ0UsR0FBdkI7QUFDQSxRQUFJSyxvQkFBb0IsR0FBRyxLQUFLWixxQkFBTCxDQUEyQkksU0FBM0IsQ0FBM0I7O0FBRUEsUUFBSVEsb0JBQUosRUFBMEI7QUFDeEIsYUFBT0Esb0JBQW9CLENBQUNMLEdBQUQsQ0FBM0I7QUFDRDtBQUNGLEdBUkQ7O0FBdUJBTixFQUFBQSxNQUFNLENBQUNZLHVCQUFQLEdBQWlDLFNBQVNBLHVCQUFULENBQWlDVCxTQUFqQyxFQUE0QztBQUMzRSxXQUFPLEtBQUtKLHFCQUFMLENBQTJCSSxTQUEzQixDQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPTCx1QkFBUDtBQUNELENBaEYwQyxFQUEzQzs7QUFrRkEsSUFBSWUsUUFBUSxHQUFHZix1QkFBZjtBQUNBUCxPQUFPLENBQUNFLE9BQVIsR0FBa0JvQixRQUFsQjtBQUNBQyxNQUFNLENBQUN2QixPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2ludmFyaWFudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogRXZlbnRTdWJzY3JpcHRpb25WZW5kb3Igc3RvcmVzIGEgc2V0IG9mIEV2ZW50U3Vic2NyaXB0aW9ucyB0aGF0IGFyZVxuICogc3Vic2NyaWJlZCB0byBhIHBhcnRpY3VsYXIgZXZlbnQgdHlwZS5cbiAqL1xudmFyIEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IoKSB7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGUgPSB7fTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIHN1YnNjcmlwdGlvbiBrZXllZCBieSBhbiBldmVudCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEBwYXJhbSB7RXZlbnRTdWJzY3JpcHRpb259IHN1YnNjcmlwdGlvblxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBFdmVudFN1YnNjcmlwdGlvblZlbmRvci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGFkZFN1YnNjcmlwdGlvbihldmVudFR5cGUsIHN1YnNjcmlwdGlvbikge1xuICAgICgwLCBfaW52YXJpYW50LmRlZmF1bHQpKHN1YnNjcmlwdGlvbi5zdWJzY3JpYmVyID09PSB0aGlzLCAnVGhlIHN1YnNjcmliZXIgb2YgdGhlIHN1YnNjcmlwdGlvbiBpcyBpbmNvcnJlY3RseSBzZXQuJyk7XG5cbiAgICBpZiAoIXRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0pIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0gPSBbXTtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXS5sZW5ndGg7XG5cbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdLnB1c2goc3Vic2NyaXB0aW9uKTtcblxuICAgIHN1YnNjcmlwdGlvbi5ldmVudFR5cGUgPSBldmVudFR5cGU7XG4gICAgc3Vic2NyaXB0aW9uLmtleSA9IGtleTtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgYnVsayBzZXQgb2YgdGhlIHN1YnNjcmlwdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gZXZlbnRUeXBlIC0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgZXZlbnQgdHlwZSB3aG9zZVxuICAgKiAgIHJlZ2lzdGVyZWQgc3Vwc2NyaXB0aW9ucyB0byByZW1vdmUsIGlmIG51bGwgcmVtb3ZlIGFsbCBzdWJzY3JpcHRpb25zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVBbGxTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gcmVtb3ZlQWxsU3Vic2NyaXB0aW9ucyhldmVudFR5cGUpIHtcbiAgICBpZiAoZXZlbnRUeXBlID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlID0ge307XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBhIHNwZWNpZmljIHN1YnNjcmlwdGlvbi4gSW5zdGVhZCBvZiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIGNhbGxcbiAgICogYHN1YnNjcmlwdGlvbi5yZW1vdmUoKWAgZGlyZWN0bHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdWJzY3JpcHRpb25cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gcmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbikge1xuICAgIHZhciBldmVudFR5cGUgPSBzdWJzY3JpcHRpb24uZXZlbnRUeXBlO1xuICAgIHZhciBrZXkgPSBzdWJzY3JpcHRpb24ua2V5O1xuICAgIHZhciBzdWJzY3JpcHRpb25zRm9yVHlwZSA9IHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV07XG5cbiAgICBpZiAoc3Vic2NyaXB0aW9uc0ZvclR5cGUpIHtcbiAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zRm9yVHlwZVtrZXldO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3Vic2NyaXB0aW9ucyB0aGF0IGFyZSBjdXJyZW50bHkgcmVnaXN0ZXJlZCBmb3IgdGhlXG4gICAqIGdpdmVuIGV2ZW50IHR5cGUuXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgYXJyYXkgY2FuIGJlIHBvdGVudGlhbGx5IHNwYXJzZSBhcyBzdWJzY3JpcHRpb25zIGFyZSBkZWxldGVkXG4gICAqIGZyb20gaXQgd2hlbiB0aGV5IGFyZSByZW1vdmVkLlxuICAgKlxuICAgKiBUT0RPOiBUaGlzIHJldHVybnMgYSBudWxsYWJsZSBhcnJheS4gd2F0P1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEByZXR1cm5zIHs/YXJyYXl9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFN1YnNjcmlwdGlvbnNGb3JUeXBlID0gZnVuY3Rpb24gZ2V0U3Vic2NyaXB0aW9uc0ZvclR5cGUoZXZlbnRUeXBlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV07XG4gIH07XG5cbiAgcmV0dXJuIEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yO1xufSgpO1xuXG52YXIgX2RlZmF1bHQgPSBFdmVudFN1YnNjcmlwdGlvblZlbmRvcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19