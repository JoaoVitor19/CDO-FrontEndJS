81c58d97859c7a28e91cb5342e428f17
"use strict";

exports.__esModule = true;
exports.default = AppContainer;

var React = _interopRequireWildcard(require("react"));

var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));

var _View = _interopRequireDefault(require("../View"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var RootTagContext = React.createContext(null);

function AppContainer(props) {
  var children = props.children,
      WrapperComponent = props.WrapperComponent;
  var innerView = React.createElement(_View.default, {
    children: children,
    key: 1,
    pointerEvents: "box-none",
    style: styles.appContainer
  });

  if (WrapperComponent) {
    innerView = React.createElement(WrapperComponent, null, innerView);
  }

  return React.createElement(RootTagContext.Provider, {
    value: props.rootTag
  }, React.createElement(_View.default, {
    pointerEvents: "box-none",
    style: styles.appContainer
  }, innerView));
}

var styles = _StyleSheet.default.create({
  appContainer: {
    flex: 1
  }
});

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcENvbnRhaW5lci5qcyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJBcHBDb250YWluZXIiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9TdHlsZVNoZWV0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9WaWV3Iiwib2JqIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiUm9vdFRhZ0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwicHJvcHMiLCJjaGlsZHJlbiIsIldyYXBwZXJDb21wb25lbnQiLCJpbm5lclZpZXciLCJjcmVhdGVFbGVtZW50IiwicG9pbnRlckV2ZW50cyIsInN0eWxlIiwic3R5bGVzIiwiYXBwQ29udGFpbmVyIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInJvb3RUYWciLCJjcmVhdGUiLCJmbGV4IiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsWUFBbEI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLE9BQUQsQ0FBUixDQUFuQzs7QUFFQSxJQUFJQyxXQUFXLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLGlCQUFSLENBQXhDOztBQUVBLElBQUlHLEtBQUssR0FBR0Qsc0JBQXNCLENBQUNGLE9BQU8sV0FBUixDQUFsQzs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ0UsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxH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Q3BCQyxJQUFBQSxTQUFTLEdBQWdCNUIsS0FBSyxDQUFDNkIsYUFBTixDQUFvQkYsZ0JBQXBCLEVBQXNDLElBQXRDLEVBQTRDQyxTQUE1QyxDQUF6QjtBQUNEOztBQUVELFNBQW9CNUIsS0FBSyxDQUFDNkIsYUFBTixDQUFvQk4sY0FBYyxDQUFDVyxRQUFuQyxFQUE2QztBQUMvREMsSUFBQUEsS0FBSyxFQUFFVixLQUFLLENBQUNXO0FBRGtELEdBQTdDLEVBRUpwQyxLQUFLLENBQUM2QixhQUFOLENBQW9CeEIsS0FBSyxDQUFDUCxPQUExQixFQUFtQztBQUNqRGdDLElBQUFBLGFBQWEsRUFBRSxVQURrQztBQUVqREMsSUFBQUEsS0FBSyxFQUFFQyxNQUFNLENBQUNDO0FBRm1DLEdBQW5DLEVBR2JMLFNBSGEsQ0FGSSxDQUFwQjtBQU1EOztBQUVELElBQUlJLE1BQU0sR0FBRzdCLFdBQVcsQ0FBQ0wsT0FBWixDQUFvQnVDLE1BQXBCLENBQTJCO0FBQ3RDSixFQUFBQSxZQUFZLEVBQUU7QUFDWkssSUFBQUEsSUFBSSxFQUFFO0FBRE07QUFEd0IsQ0FBM0IsQ0FBYjs7QUFNQUMsTUFBTSxDQUFDM0MsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gQXBwQ29udGFpbmVyO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1N0eWxlU2hlZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9TdHlsZVNoZWV0XCIpKTtcblxudmFyIF9WaWV3ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vVmlld1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTmljb2xhcyBHYWxsYWdoZXIuXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xudmFyIFJvb3RUYWdDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmZ1bmN0aW9uIEFwcENvbnRhaW5lcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIFdyYXBwZXJDb21wb25lbnQgPSBwcm9wcy5XcmFwcGVyQ29tcG9uZW50O1xuICB2YXIgaW5uZXJWaWV3ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX1ZpZXcuZGVmYXVsdCwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBrZXk6IDEsXG4gICAgcG9pbnRlckV2ZW50czogXCJib3gtbm9uZVwiLFxuICAgIHN0eWxlOiBzdHlsZXMuYXBwQ29udGFpbmVyXG4gIH0pO1xuXG4gIGlmIChXcmFwcGVyQ29tcG9uZW50KSB7XG4gICAgaW5uZXJWaWV3ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlckNvbXBvbmVudCwgbnVsbCwgaW5uZXJWaWV3KTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb290VGFnQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBwcm9wcy5yb290VGFnXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9WaWV3LmRlZmF1bHQsIHtcbiAgICBwb2ludGVyRXZlbnRzOiBcImJveC1ub25lXCIsXG4gICAgc3R5bGU6IHN0eWxlcy5hcHBDb250YWluZXJcbiAgfSwgaW5uZXJWaWV3KSk7XG59XG5cbnZhciBzdHlsZXMgPSBfU3R5bGVTaGVldC5kZWZhdWx0LmNyZWF0ZSh7XG4gIGFwcENvbnRhaW5lcjoge1xuICAgIGZsZXg6IDFcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==