af72af7f0cc3b25f35753cabbe2f98b7
"use strict";

exports.__esModule = true;
exports.default = void 0;

var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var Share = function () {
  function Share() {}

  Share.share = function share(content, options) {
    if (options === void 0) {
      options = {};
    }

    (0, _invariant.default)(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
    (0, _invariant.default)(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
    (0, _invariant.default)(typeof options === 'object' && options !== null, 'Options must be a valid object');
    (0, _invariant.default)(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');

    if (window.navigator.share !== undefined) {
      return window.navigator.share({
        title: content.title,
        text: content.message,
        url: content.url
      });
    } else {
      return Promise.reject(new Error('Share is not supported in this browser'));
    }
  };

  _createClass(Share, null, [{
    key: "sharedAction",
    get: function get() {
      return 'sharedAction';
    }
  }, {
    key: "dismissedAction",
    get: function get() {
      return 'dismissedAction';
    }
  }]);

  return Share;
}();

var _default = Share;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9pbnZhcmlhbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJTaGFyZSIsInNoYXJlIiwiY29udGVudCIsIm9wdGlvbnMiLCJ1cmwiLCJtZXNzYWdlIiwidGl0bGUiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ1bmRlZmluZWQiLCJ0ZXh0IiwiUHJvbWlzZSIsInJlamVjdCIsIkVycm9yIiwiZ2V0IiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMsVUFBVSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLG9CQUFELENBQVIsQ0FBdkM7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NFLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNMLFVBQVgsR0FBd0JLLEdBQXhCLEdBQThCO0FBQUVKLElBQUFBLE9BQU8sRUFBRUk7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsU0FBU0MsaUJBQVQsQ0FBMkJDLE1BQTNCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUFFLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsS0FBSyxDQUFDRSxNQUExQixFQUFrQ0Qs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Q0E5Q3dCLEVBQXpCOztBQWdEQSxJQUFJZSxRQUFRLEdBQUdmLEtBQWY7QUFDQXhCLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQnFDLFFBQWxCO0FBQ0FDLE1BQU0sQ0FBQ3hDLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbnZhcmlhbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBTaGFyZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNoYXJlKCkge31cblxuICBTaGFyZS5zaGFyZSA9IGZ1bmN0aW9uIHNoYXJlKGNvbnRlbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnICYmIGNvbnRlbnQgIT09IG51bGwsICdDb250ZW50IHRvIHNoYXJlIG11c3QgYmUgYSB2YWxpZCBvYmplY3QnKTtcbiAgICAoMCwgX2ludmFyaWFudC5kZWZhdWx0KSh0eXBlb2YgY29udGVudC51cmwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjb250ZW50Lm1lc3NhZ2UgPT09ICdzdHJpbmcnLCAnQXQgbGVhc3Qgb25lIG9mIFVSTCBhbmQgbWVzc2FnZSBpcyByZXF1aXJlZCcpO1xuICAgICgwLCBfaW52YXJpYW50LmRlZmF1bHQpKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JyAmJiBvcHRpb25zICE9PSBudWxsLCAnT3B0aW9ucyBtdXN0IGJlIGEgdmFsaWQgb2JqZWN0Jyk7XG4gICAgKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkoIWNvbnRlbnQudGl0bGUgfHwgdHlwZW9mIGNvbnRlbnQudGl0bGUgPT09ICdzdHJpbmcnLCAnSW52YWxpZCB0aXRsZTogdGl0bGUgc2hvdWxkIGJlIGEgc3RyaW5nLicpO1xuXG4gICAgaWYgKHdpbmRvdy5uYXZpZ2F0b3Iuc2hhcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3Iuc2hhcmUoe1xuICAgICAgICB0aXRsZTogY29udGVudC50aXRsZSxcbiAgICAgICAgdGV4dDogY29udGVudC5tZXNzYWdlLFxuICAgICAgICB1cmw6IGNvbnRlbnQudXJsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignU2hhcmUgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXInKSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCB3YXMgc3VjY2Vzc2Z1bGx5IHNoYXJlZC5cbiAgICovXG4gIDtcblxuICBfY3JlYXRlQ2xhc3MoU2hhcmUsIG51bGwsIFt7XG4gICAga2V5OiBcInNoYXJlZEFjdGlvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdzaGFyZWRBY3Rpb24nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZGlhbG9nIGhhcyBiZWVuIGRpc21pc3NlZC5cbiAgICAgKiBAcGxhdGZvcm0gaW9zXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkaXNtaXNzZWRBY3Rpb25cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAnZGlzbWlzc2VkQWN0aW9uJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hhcmU7XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IFNoYXJlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=