6268936ab05bfeef27492bb6faf5e3e2
"use strict";

exports.__esModule = true;
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));

var _View = _interopRequireDefault(require("../View"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var ProgressBar = React.forwardRef(function (props, ref) {
  var _props$color = props.color,
      color = _props$color === void 0 ? '#1976D2' : _props$color,
      _props$indeterminate = props.indeterminate,
      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,
      _props$progress = props.progress,
      progress = _props$progress === void 0 ? 0 : _props$progress,
      _props$trackColor = props.trackColor,
      trackColor = _props$trackColor === void 0 ? 'transparent' : _props$trackColor,
      style = props.style,
      other = _objectWithoutPropertiesLoose(props, ["color", "indeterminate", "progress", "trackColor", "style"]);

  var percentageProgress = progress * 100;
  var progressRef = React.useRef(null);
  React.useEffect(function () {
    var width = indeterminate ? '25%' : percentageProgress + "%";

    if (progressRef.current != null) {
      progressRef.current.setNativeProps({
        style: {
          width: width
        }
      });
    }
  }, [indeterminate, percentageProgress, progressRef]);
  return React.createElement(_View.default, _extends({}, other, {
    accessibilityRole: "progressbar",
    accessibilityValue: {
      max: 100,
      min: 0,
      now: indeterminate ? null : percentageProgress
    },
    ref: ref,
    style: [styles.track, style, {
      backgroundColor: trackColor
    }]
  }), React.createElement(_View.default, {
    ref: progressRef,
    style: [styles.progress, indeterminate && styles.animation, {
      backgroundColor: color
    }]
  }));
});
ProgressBar.displayName = 'ProgressBar';

var styles = _StyleSheet.default.create({
  track: {
    forcedColorAdjust: 'none',
    height: 5,
    overflow: 'hidden',
    userSelect: 'none',
    zIndex: 0
  },
  progress: {
    forcedColorAdjust: 'none',
    height: '100%',
    zIndex: -1
  },
  animation: {
    animationDuration: '1s',
    animationKeyframes: [{
      '0%': {
        transform: [{
          translateX: '-100%'
        }]
      },
      '100%': {
        transform: [{
          translateX: '400%'
        }]
      }
    }],
    animationTimingFunction: 'linear',
    animationIterationCount: 'infinite'
  }
});

var _default = ProgressBar;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX1N0eWxlU2hlZXQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX1ZpZXciLCJvYmoiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwia2V5cyIsImluZGV4T2YiLCJQcm9ncmVzc0JhciIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsIl9wcm9wcyRjb2xvciIsImNvbG9yIiwiX3Byb3BzJGluZGV0ZXJtaW5hdGUiLCJpbmRldGVybWluYXRlIiwiX3Byb3BzJHByb2dyZXNzIiwicHJvZ3Jlc3MiLCJfcHJvcHMkdHJhY2tDb2xvciIsInRyYWNrQ29sb3IiLCJzdHlsZSIsIm90aGVyIiwicGVyY2VudGFnZVByb2dyZXNzIiwicHJvZ3Jlc3NSZWYiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJ3aWR0aCIsImN1cnJlbnQiLCJzZXROYXRpdmVQcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJhY2Nlc3NpYmlsaXR5Um9sZSIsImFjY2Vzc2liaWxpdHlWYWx1ZSIsIm1heCIsIm1pbiIsIm5vdyIsInN0eWxlcyIsInRyYWNrIiwiYmFja2dyb3VuZENvbG9yIiwiYW5pbWF0aW9uIiwiZGlzcGxheU5hbWUiLCJjcmVhdGUiLCJmb3JjZWRDb2xvckFkanVzdCIsImhlaWdodCIsIm92ZXJmbG93IiwidXNlclNlbGVjdCIsInpJbmRleCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uS2V5ZnJhbWVzIiwidHJhbnNmb3JtIiwidHJhbnNsYXRlWCIsImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsT0FBRCxDQUFSLENBQW5DOztBQUVBLElBQUlDLFdBQVcsR0FBR0Msc0JBQXNCLENBQUNGLE9BQU8saUJBQVIsQ0FBeEM7O0FBRUEsSUFBSUcsS0FBSyxHQUFHRCxzQkFBc0IsQ0FBQ0YsT0FBTyxXQUFSLENBQWxDOztBQUVBLFNBQVNFLHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDUixVQUFYLEdBQXdCUSxHQUF4QixHQUE4QjtBQUFFUCxJQUFBQSxPQUFPLEVBQUVPO0FBQVgsR0FBckM7QUFBd0Q7O0FBRS9GLFNBQVNDLHdCQUFULEdBQW9DO0FBQUUsTUFBSSxPQUFPQyxPQUFQLEtBQW1CLFVBQXZCLEVBQW1DLE9BQU8sSUFBUDtBQUFhLE1BQUlDLEtBQUssR0FBRyxJQUFJRCxPQUFKLEVBQVo7O0FBQTJCRCxFQUFBQSx3QkFBd0IsR0FBRyxTQUFTQSx3QkFBVCxHQUFvQztBQUFFLFdBQU9FLEtBQVA7QUFBZSxHQUFoRjs7QUFBa0YsU0FBT0EsS0FBUDtBQUFlOztBQUVsTixTQUFTUix1QkFBVCxDQUFpQ0ssR0FBakMsRUFBc0M7QUFBRSxNQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FB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QUlDLFFBQVEsR0FBRzVDLFdBQWY7QUFDQXZDLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQmlGLFFBQWxCO0FBQ0FDLE1BQU0sQ0FBQ3BGLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9TdHlsZVNoZWV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vU3R5bGVTaGVldFwiKSk7XG5cbnZhciBfVmlldyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1ZpZXdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUHJvZ3Jlc3NCYXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJyMxOTc2RDInIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGluZGV0ZXJtaW5hdGUgPSBwcm9wcy5pbmRldGVybWluYXRlLFxuICAgICAgaW5kZXRlcm1pbmF0ZSA9IF9wcm9wcyRpbmRldGVybWluYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbmRldGVybWluYXRlLFxuICAgICAgX3Byb3BzJHByb2dyZXNzID0gcHJvcHMucHJvZ3Jlc3MsXG4gICAgICBwcm9ncmVzcyA9IF9wcm9wcyRwcm9ncmVzcyA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRwcm9ncmVzcyxcbiAgICAgIF9wcm9wcyR0cmFja0NvbG9yID0gcHJvcHMudHJhY2tDb2xvcixcbiAgICAgIHRyYWNrQ29sb3IgPSBfcHJvcHMkdHJhY2tDb2xvciA9PT0gdm9pZCAwID8gJ3RyYW5zcGFyZW50JyA6IF9wcm9wcyR0cmFja0NvbG9yLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcImNvbG9yXCIsIFwiaW5kZXRlcm1pbmF0ZVwiLCBcInByb2dyZXNzXCIsIFwidHJhY2tDb2xvclwiLCBcInN0eWxlXCJdKTtcblxuICB2YXIgcGVyY2VudGFnZVByb2dyZXNzID0gcHJvZ3Jlc3MgKiAxMDA7XG4gIHZhciBwcm9ncmVzc1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd2lkdGggPSBpbmRldGVybWluYXRlID8gJzI1JScgOiBwZXJjZW50YWdlUHJvZ3Jlc3MgKyBcIiVcIjtcblxuICAgIGlmIChwcm9ncmVzc1JlZi5jdXJyZW50ICE9IG51bGwpIHtcbiAgICAgIHByb2dyZXNzUmVmLmN1cnJlbnQuc2V0TmF0aXZlUHJvcHMoe1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtpbmRldGVybWluYXRlLCBwZXJjZW50YWdlUHJvZ3Jlc3MsIHByb2dyZXNzUmVmXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfVmlldy5kZWZhdWx0LCBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICBhY2Nlc3NpYmlsaXR5Um9sZTogXCJwcm9ncmVzc2JhclwiLFxuICAgIGFjY2Vzc2liaWxpdHlWYWx1ZToge1xuICAgICAgbWF4OiAxMDAsXG4gICAgICBtaW46IDAsXG4gICAgICBub3c6IGluZGV0ZXJtaW5hdGUgPyBudWxsIDogcGVyY2VudGFnZVByb2dyZXNzXG4gICAgfSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogW3N0eWxlcy50cmFjaywgc3R5bGUsIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdHJhY2tDb2xvclxuICAgIH1dXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfVmlldy5kZWZhdWx0LCB7XG4gICAgcmVmOiBwcm9ncmVzc1JlZixcbiAgICBzdHlsZTogW3N0eWxlcy5wcm9ncmVzcywgaW5kZXRlcm1pbmF0ZSAmJiBzdHlsZXMuYW5pbWF0aW9uLCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yXG4gICAgfV1cbiAgfSkpO1xufSk7XG5Qcm9ncmVzc0Jhci5kaXNwbGF5TmFtZSA9ICdQcm9ncmVzc0Jhcic7XG5cbnZhciBzdHlsZXMgPSBfU3R5bGVTaGVldC5kZWZhdWx0LmNyZWF0ZSh7XG4gIHRyYWNrOiB7XG4gICAgZm9yY2VkQ29sb3JBZGp1c3Q6ICdub25lJyxcbiAgICBoZWlnaHQ6IDUsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICB6SW5kZXg6IDBcbiAgfSxcbiAgcHJvZ3Jlc3M6IHtcbiAgICBmb3JjZWRDb2xvckFkanVzdDogJ25vbmUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIHpJbmRleDogLTFcbiAgfSxcbiAgYW5pbWF0aW9uOiB7XG4gICAgYW5pbWF0aW9uRHVyYXRpb246ICcxcycsXG4gICAgYW5pbWF0aW9uS2V5ZnJhbWVzOiBbe1xuICAgICAgJzAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06IFt7XG4gICAgICAgICAgdHJhbnNsYXRlWDogJy0xMDAlJ1xuICAgICAgICB9XVxuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06IFt7XG4gICAgICAgICAgdHJhbnNsYXRlWDogJzQwMCUnXG4gICAgICAgIH1dXG4gICAgICB9XG4gICAgfV0sXG4gICAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246ICdsaW5lYXInLFxuICAgIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAnaW5maW5pdGUnXG4gIH1cbn0pO1xuXG52YXIgX2RlZmF1bHQgPSBQcm9ncmVzc0JhcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19