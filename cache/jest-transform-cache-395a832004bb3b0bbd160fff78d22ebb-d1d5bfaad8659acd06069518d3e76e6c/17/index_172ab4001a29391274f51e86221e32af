547d09ca0404eb269d9dcddf80532eb3
"use strict";

exports.__esModule = true;
exports.default = useStable;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var UNINITIALIZED = typeof Symbol === 'function' && typeof Symbol() === 'symbol' ? Symbol() : Object.freeze({});

function useStable(getInitialValue) {
  var ref = React.useRef(UNINITIALIZED);

  if (ref.current === UNINITIALIZED) {
    ref.current = getInitialValue();
  }

  return ref.current;
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInVzZVN0YWJsZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwib2JqIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiVU5JTklUSUFMSVpFRCIsIlN5bWJvbCIsImZyZWV6ZSIsImdldEluaXRpYWxWYWx1ZSIsInJlZiIsInVzZVJlZiIsImN1cnJlbnQiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxTQUFsQjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsT0FBRCxDQUFSLENBQW5DOztBQUVBLFNBQVNDLHdCQUFULEdBQW9DO0FBQUUsTUFBSSxPQUFPQyxPQUFQLEtBQW1CLFVBQXZCLEVBQW1DLE9BQU8sSUFBUDtBQUFhLE1BQUlDLEtBQUssR0FBRyxJQUFJRCxPQUFKLEVBQVo7O0FBQTJCRCxFQUFBQSx3QkFBd0IsR0FBRyxTQUFTQSx3QkFBVCxHQUFvQztBQUFFLFdBQU9FLEtBQVA7QUFBZSxHQUFoRjs7QUFBa0YsU0FBT0EsS0FBUDtBQUFlOztBQUVsTixTQUFTSix1QkFBVCxDQUFpQ0ssR0FBakMsRUFBc0M7QUFBRSxNQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ1QsVUFBZixFQUEyQjtBQUFFLFdBQU9TLEdBQVA7QUFBYTs7QUFBQyxNQUFJQSxHQUFHLEtBQUssSUFBUixJQUFnQixPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUEyQixPQUFPQSxHQUFQLEtBQWUsVUFBOUQsRUFBMEU7QUFBRSxXQUFPO0FBQUVSLE1BQUFBLE9BQU8sRUFBRVE7QUFBWCxLQUFQO0FBQTBCOztBQUFDLE1BQUlELEtBQUssR0FBR0Ysd0JBQXdCLEVBQXBDOztBQUF3QyxNQUFJRSxLQUFLLElBQUlBLEtBQUssQ0FBQ0UsR0FBTixDQUFVRCxHQUFWLENBQWIsRUFBNkI7QUFBRSxXQUFPRCxLQUFLLENBQUNHLEdBQU4sQ0FBVUYsR0FBVixDQUFQO0FBQXdCOztBQUFDLE1BQUlHLE1BQU0sR0FBRyxFQUFiO0FBQWlCLE1BQUlDLHFCQUFxQixHQUFHQyxNQUFNLENBQUNDLGNBQVAsSUFBeUJELE1BQU0sQ0FBQ0Usd0JBQTVEOztBQUFzRixPQUFLLElBQUlDLEdBQVQsSUFBZ0JSLEdBQWhCLEVBQXFCO0FBQUUsUUFBSUssTUFBTSxDQUFDSSxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNYLEdBQXJDLEVBQTBDUSxHQUExQyxDQUFKLEVBQW9EO0FBQUUsVUFBSUksSUFBSSxHQUFHUixxQkFBcUIsR0FBR0MsTUFBTSxDQUFDRSx3QkFBUCxDQUFnQ1AsR0FBaEMsRUFBcUNRLEdBQXJDLENBQUgsR0FBK0MsSUFBL0U7O0FBQXFGLFVBQUlJLElBQUksS0FBS0EsSUFBSSxDQUFDVixHQUFMLElBQVlVLElBQUksQ0FBQ0MsR0FBdEIsQ0FBUixFQUFvQztBQUFFUixRQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JILE1BQXRCLEVBQThCSyxHQUE5QixFQUFtQ0ksSUFBbkM7QUFBMkMsT0FBakYsTUFBdUY7QUFBRVQsUUFBQUEsTUFBTSxDQUFDSyxHQUFELENBQU4sR0FBY1IsR0FBRyxDQUFDUSxHQUFELENBQWpCO0FBQXlCO0FBQUU7QUFBRTs7QUFBQ0wsRUFBQUEsTUFBTSxDQUFDWCxPQUFQLEdBQWlCUSxHQUFqQjs7QUFBc0IsTUFBSUQsS0FBSixFQUFXO0FBQUVBLElBQUFBLEtBQUssQ0FBQ2MsR0FBTixDQUFVYixHQUFWLEVBQWVHLE1BQWY7QUFBeUI7O0FBQUMsU0FBT0EsTUFBUDtBQUFnQjs7QUFVdnVCLElBQUlXLGFBQWEsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU9BLE1BQU0sRUFBYixLQUFvQixRQUFwRCxHQUErREEsTUFBTSxFQUFyRSxHQUEwRVYsTUFBTSxDQUFDVyxNQUFQLENBQWMsRUFBZCxDQUE5Rjs7QUFFQSxTQUFTdkIsU0FBVCxDQUFtQndCLGVBQW5CLEVBQW9DO0FBQ2xDLE1BQUlDLEdBQUcsR0FBR3hCLEtBQUssQ0FBQ3lCLE1BQU4sQ0FBYUwsYUFBYixDQUFWOztBQUVBLE1BQUlJLEdBQUcsQ0FBQ0UsT0FBSixLQUFnQk4sYUFBcEIsRUFBbUM7QUFDakNJLElBQUFBLEdBQUcsQ0FBQ0UsT0FBSixHQUFjSCxlQUFlLEVBQTdCO0FBQ0Q7O0FBR0QsU0FBT0MsR0FBRyxDQUFDRSxPQUFYO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQy9CLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVzZVN0YWJsZTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cbnZhciBVTklOSVRJQUxJWkVEID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCkgPT09ICdzeW1ib2wnID8gU3ltYm9sKCkgOiBPYmplY3QuZnJlZXplKHt9KTtcblxuZnVuY3Rpb24gdXNlU3RhYmxlKGdldEluaXRpYWxWYWx1ZSkge1xuICB2YXIgcmVmID0gUmVhY3QudXNlUmVmKFVOSU5JVElBTElaRUQpO1xuXG4gIGlmIChyZWYuY3VycmVudCA9PT0gVU5JTklUSUFMSVpFRCkge1xuICAgIHJlZi5jdXJyZW50ID0gZ2V0SW5pdGlhbFZhbHVlKCk7XG4gIH0gLy8gJEZsb3dGaXhNZSAoIzY0NjUwNzg5KSBUcm91YmxlIHJlZmluaW5nIHR5cGVzIHdoZXJlIGBTeW1ib2xgIGlzIGNvbmNlcm5lZC5cblxuXG4gIHJldHVybiByZWYuY3VycmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19