bb33de143c96684b41148b4bb40e024f
'use strict';

exports.__esModule = true;
exports.default = void 0;

function stiffnessFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}

function dampingFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}

function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    stiffness: stiffnessFromOrigamiValue(tension),
    damping: dampingFromOrigamiValue(friction)
  };
}

function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }

  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }

  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }

  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }

  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }

  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }

  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }

  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }

  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
  return {
    stiffness: stiffnessFromOrigamiValue(bouncyTension),
    damping: dampingFromOrigamiValue(bouncyFriction)
  };
}

var _default = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNwcmluZ0NvbmZpZy5qcyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlIiwib1ZhbHVlIiwiZGFtcGluZ0Zyb21PcmlnYW1pVmFsdWUiLCJmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbiIsInRlbnNpb24iLCJmcmljdGlvbiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJmcm9tQm91bmNpbmVzc0FuZFNwZWVkIiwiYm91bmNpbmVzcyIsInNwZWVkIiwibm9ybWFsaXplIiwidmFsdWUiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJwcm9qZWN0Tm9ybWFsIiwibiIsInN0YXJ0IiwiZW5kIiwibGluZWFySW50ZXJwb2xhdGlvbiIsInQiLCJxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uIiwiYjNGcmljdGlvbjEiLCJ4IiwiTWF0aCIsInBvdyIsImIzRnJpY3Rpb24yIiwiYjNGcmljdGlvbjMiLCJiM05vYm91bmNlIiwiYiIsInMiLCJib3VuY3lUZW5zaW9uIiwiYm91bmN5RnJpY3Rpb24iLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBU0E7O0FBRUFBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxTQUFTQyx5QkFBVCxDQUFtQ0MsTUFBbkMsRUFBMkM7QUFDekMsU0FBTyxDQUFDQSxNQUFNLEdBQUcsRUFBVixJQUFnQixJQUFoQixHQUF1QixHQUE5QjtBQUNEOztBQUVELFNBQVNDLHVCQUFULENBQWlDRCxNQUFqQyxFQUF5QztBQUN2QyxTQUFPLENBQUNBLE1BQU0sR0FBRyxDQUFWLElBQWUsQ0FBZixHQUFtQixFQUExQjtBQUNEOztBQUVELFNBQVNFLDZCQUFULENBQXVDQyxPQUF2QyxFQUFnREMsUUFBaEQsRUFBMEQ7QUFDeEQsU0FBTztBQUNMQyxJQUFBQSxTQUFTLEVB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LEdBQUdYLHlCQUF5QixDQUFDUSxDQUFELEVBQUlELFVBQVUsQ0FBQ0csYUFBRCxDQUFkLEVBQStCLElBQS9CLENBQTlDO0FBQ0EsU0FBTztBQUNMekIsSUFBQUEsU0FBUyxFQUFFTix5QkFBeUIsQ0FBQytCLGFBQUQsQ0FEL0I7QUFFTHhCLElBQUFBLE9BQU8sRUFBRUwsdUJBQXVCLENBQUM4QixjQUFEO0FBRjNCLEdBQVA7QUFJRDs7QUFFRCxJQUFJQyxRQUFRLEdBQUc7QUFDYjlCLEVBQUFBLDZCQUE2QixFQUFFQSw2QkFEbEI7QUFFYkssRUFBQUEsc0JBQXNCLEVBQUVBO0FBRlgsQ0FBZjtBQUlBWCxPQUFPLENBQUNFLE9BQVIsR0FBa0JrQyxRQUFsQjtBQUNBQyxNQUFNLENBQUNyQyxPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKG9WYWx1ZSkge1xuICByZXR1cm4gKG9WYWx1ZSAtIDMwKSAqIDMuNjIgKyAxOTQ7XG59XG5cbmZ1bmN0aW9uIGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKG9WYWx1ZSkge1xuICByZXR1cm4gKG9WYWx1ZSAtIDgpICogMyArIDI1O1xufVxuXG5mdW5jdGlvbiBmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbih0ZW5zaW9uLCBmcmljdGlvbikge1xuICByZXR1cm4ge1xuICAgIHN0aWZmbmVzczogc3RpZmZuZXNzRnJvbU9yaWdhbWlWYWx1ZSh0ZW5zaW9uKSxcbiAgICBkYW1waW5nOiBkYW1waW5nRnJvbU9yaWdhbWlWYWx1ZShmcmljdGlvbilcbiAgfTtcbn1cblxuZnVuY3Rpb24gZnJvbUJvdW5jaW5lc3NBbmRTcGVlZChib3VuY2luZXNzLCBzcGVlZCkge1xuICBmdW5jdGlvbiBub3JtYWxpemUodmFsdWUsIHN0YXJ0VmFsdWUsIGVuZFZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAtIHN0YXJ0VmFsdWUpIC8gKGVuZFZhbHVlIC0gc3RhcnRWYWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9qZWN0Tm9ybWFsKG4sIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3RhcnQgKyBuICogKGVuZCAtIHN0YXJ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhckludGVycG9sYXRpb24odCwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiB0ICogZW5kICsgKDEgLSB0KSAqIHN0YXJ0O1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhZHJhdGljT3V0SW50ZXJwb2xhdGlvbih0LCBzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGxpbmVhckludGVycG9sYXRpb24oMiAqIHQgLSB0ICogdCwgc3RhcnQsIGVuZCk7XG4gIH1cblxuICBmdW5jdGlvbiBiM0ZyaWN0aW9uMSh4KSB7XG4gICAgcmV0dXJuIDAuMDAwNyAqIE1hdGgucG93KHgsIDMpIC0gMC4wMzEgKiBNYXRoLnBvdyh4LCAyKSArIDAuNjQgKiB4ICsgMS4yODtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24yKHgpIHtcbiAgICByZXR1cm4gMC4wMDAwNDQgKiBNYXRoLnBvdyh4LCAzKSAtIDAuMDA2ICogTWF0aC5wb3coeCwgMikgKyAwLjM2ICogeCArIDI7XG4gIH1cblxuICBmdW5jdGlvbiBiM0ZyaWN0aW9uMyh4KSB7XG4gICAgcmV0dXJuIDAuMDAwMDAwNDUgKiBNYXRoLnBvdyh4LCAzKSAtIDAuMDAwMzMyICogTWF0aC5wb3coeCwgMikgKyAwLjEwNzggKiB4ICsgNS44NDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzTm9ib3VuY2UodGVuc2lvbikge1xuICAgIGlmICh0ZW5zaW9uIDw9IDE4KSB7XG4gICAgICByZXR1cm4gYjNGcmljdGlvbjEodGVuc2lvbik7XG4gICAgfSBlbHNlIGlmICh0ZW5zaW9uID4gMTggJiYgdGVuc2lvbiA8PSA0NCkge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24yKHRlbnNpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYjNGcmljdGlvbjModGVuc2lvbik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGIgPSBub3JtYWxpemUoYm91bmNpbmVzcyAvIDEuNywgMCwgMjApO1xuICBiID0gcHJvamVjdE5vcm1hbChiLCAwLCAwLjgpO1xuICB2YXIgcyA9IG5vcm1hbGl6ZShzcGVlZCAvIDEuNywgMCwgMjApO1xuICB2YXIgYm91bmN5VGVuc2lvbiA9IHByb2plY3ROb3JtYWwocywgMC41LCAyMDApO1xuICB2YXIgYm91bmN5RnJpY3Rpb24gPSBxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uKGIsIGIzTm9ib3VuY2UoYm91bmN5VGVuc2lvbiksIDAuMDEpO1xuICByZXR1cm4ge1xuICAgIHN0aWZmbmVzczogc3RpZmZuZXNzRnJvbU9yaWdhbWlWYWx1ZShib3VuY3lUZW5zaW9uKSxcbiAgICBkYW1waW5nOiBkYW1waW5nRnJvbU9yaWdhbWlWYWx1ZShib3VuY3lGcmljdGlvbilcbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0ge1xuICBmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbjogZnJvbU9yaWdhbWlUZW5zaW9uQW5kRnJpY3Rpb24sXG4gIGZyb21Cb3VuY2luZXNzQW5kU3BlZWQ6IGZyb21Cb3VuY2luZXNzQW5kU3BlZWRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==