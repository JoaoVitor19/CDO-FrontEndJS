cee4e530abb80ef40d529bb55fdbab3f
"use strict";

exports.__esModule = true;
exports.default = useColorScheme;

var React = _interopRequireWildcard(require("react"));

var _Appearance = _interopRequireDefault(require("../Appearance"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function useColorScheme() {
  var _React$useState = React.useState(_Appearance.default.getColorScheme()),
      colorScheme = _React$useState[0],
      setColorScheme = _React$useState[1];

  React.useEffect(function () {
    function listener(appearance) {
      setColorScheme(appearance.colorScheme);
    }

    _Appearance.default.addChangeListener(listener);

    return function () {
      return _Appearance.default.removeChangeListener(listener);
    };
  });
  return colorScheme;
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInVzZUNvbG9yU2NoZW1lIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfQXBwZWFyYW5jZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfUmVhY3QkdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsImdldENvbG9yU2NoZW1lIiwiY29sb3JTY2hlbWUiLCJzZXRDb2xvclNjaGVtZSIsInVzZUVmZmVjdCIsImxpc3RlbmVyIiwiYXBwZWFyYW5jZSIsImFkZENoYW5nZUxpc3RlbmVyIiwicmVtb3ZlQ2hhbmdlTGlzdGVuZXIiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxjQUFsQjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsT0FBRCxDQUFSLENBQW5DOztBQUVBLElBQUlDLFdBQVcsR0FBR0Msc0JBQXNCLENBQUNGLE9BQU8saUJBQVIsQ0FBeEM7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NDLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNSLFVBQVgsR0FBd0JRLEdBQXhCLEdBQThCO0FBQUVQLElBQUFBLE9BQU8sRUFBRU87QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsU0FBU0Msd0JB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QyxPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB1c2VDb2xvclNjaGVtZTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9BcHBlYXJhbmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vQXBwZWFyYW5jZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTmljb2xhcyBHYWxsYWdoZXIuXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuZnVuY3Rpb24gdXNlQ29sb3JTY2hlbWUoKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShfQXBwZWFyYW5jZS5kZWZhdWx0LmdldENvbG9yU2NoZW1lKCkpLFxuICAgICAgY29sb3JTY2hlbWUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRDb2xvclNjaGVtZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKGFwcGVhcmFuY2UpIHtcbiAgICAgIHNldENvbG9yU2NoZW1lKGFwcGVhcmFuY2UuY29sb3JTY2hlbWUpO1xuICAgIH1cblxuICAgIF9BcHBlYXJhbmNlLmRlZmF1bHQuYWRkQ2hhbmdlTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfQXBwZWFyYW5jZS5kZWZhdWx0LnJlbW92ZUNoYW5nZUxpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIGNvbG9yU2NoZW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=