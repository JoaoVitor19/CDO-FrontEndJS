d31d5eef7e120f5d42e0f7f52552477e
'use strict';

exports.__esModule = true;
exports.default = createEventHandle;

var _ExecutionEnvironment = require("fbjs/lib/ExecutionEnvironment");

var emptyFunction = function emptyFunction() {};

function supportsPassiveEvents() {
  var supported = false;

  if (_ExecutionEnvironment.canUseDOM) {
    try {
      var options = {};
      Object.defineProperty(options, 'passive', {
        get: function get() {
          supported = true;
          return false;
        }
      });
      window.addEventListener('test', null, options);
      window.removeEventListener('test', null, options);
    } catch (e) {}
  }

  return supported;
}

var canUsePassiveEvents = supportsPassiveEvents();

function getOptions(options) {
  if (options == null) {
    return false;
  }

  return canUsePassiveEvents ? options : Boolean(options.capture);
}

function isPropagationStopped() {
  return this.cancelBubble;
}

function isDefaultPrevented() {
  return this.defaultPrevented;
}

function normalizeEvent(event) {
  event.nativeEvent = event;
  event.persist = emptyFunction;
  event.isDefaultPrevented = isDefaultPrevented;
  event.isPropagationStopped = isPropagationStopped;
  return event;
}

function createEventHandle(type, options) {
  var opts = getOptions(options);
  return function (target, listener) {
    if (target == null || typeof target.addEventListener !== 'function') {
      throw new Error('createEventHandle: called on an invalid target.');
    }

    var element = target;

    if (listener != null) {
      var compatListener = function compatListener(e) {
        return listener(normalizeEvent(e));
      };

      element.addEventListener(type, compatListener, opts);
      return function removeListener() {
        if (element != null) {
          element.removeEventListener(type, compatListener, opts);
        }
      };
    } else {
      return emptyFunction;
    }
  };
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNyZWF0ZUV2ZW50SGFuZGxlIiwiX0V4ZWN1dGlvbkVudmlyb25tZW50IiwicmVxdWlyZSIsImVtcHR5RnVuY3Rpb24iLCJzdXBwb3J0c1Bhc3NpdmVFdmVudHMiLCJzdXBwb3J0ZWQiLCJjYW5Vc2VET00iLCJvcHRpb25zIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImUiLCJjYW5Vc2VQYXNzaXZlRXZlbnRzIiwiZ2V0T3B0aW9ucyIsIkJvb2xlYW4iLCJjYXB0dXJlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjYW5jZWxCdWJibGUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwibm9ybWFsaXplRXZlbnQiLCJldmVudCIsIm5hdGl2ZUV2ZW50IiwicGVyc2lzdCIsInR5cGUiLCJvcHRzIiwidGFyZ2V0IiwibGlzdGVuZXIiLCJFcnJvciIsImVsZW1lbnQiLCJjb21wYXRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFRQTs7QUFFQUEsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsaUJBQWxCOztBQUVBLElBQUlDLHFCQUFxQixHQUFHQyxPQUFPLENBQUMsK0JBQUQsQ0FBbkM7O0FBRUEsSUFBSUMsYUFBYSxHQUFHLFNBQVNBLGFBQVQsR0FBeUIsQ0FBRSxDQUEvQzs7QUFFQSxTQUFTQyxxQkFBVCxHQUFpQztBQUMvQixNQUFJQyxTQUFTLEdBQUcsS0FBaEI7O0FBR0EsTUFBSUoscUJBQXFCLENBQUNLLFNBQTFCLEVBQXFDO0FBQ25DLFFBQUk7QUFDRixVQUFJQyxPQUFPLEdBQUcsRUFBZDtBQUNBQyxNQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JGLE9BQXRCLEVBQStCLFNBQS9CLEVBQTBDO0FBQ3hDRyxRQUFBQSxHQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFlO0FBQ2xCTCxVQUFBQSxTQUFTLEdBQUcsSUFBWjtBQUNBLGlCQUFPLEtBQVA7QUFDRDtBQUp1QyxPQUExQztBQU1BTSxNQUFBQSxNQUFNLENBQUNDLGdCQUFQLENBQXdCLE1BQXhCLEVBQWdDLElBQWhDLEVBQXNDTCxPQUF0QztBQUNBSSxNQUFBQSxNQUFNLENBQUNFLG1CQUFQLENBQTJCLE1BQTNCLEVBQW1DLElBQW5DLEVBQXlDTixPQUF6QztBQUNELEtBVkQsQ0FVRSxPQUFPTyxDQUFQLEVBQVUsQ0FBRTtBQUNmOztBQUVELFNBQU9ULFNBQVA7QUFDRDs7QUFFRCxJQUFJVSxtQkFBbUIsR0FBR1gscUJBQXFCLEVBQS9DOztBQUVBLFNBQVNZLFVBQVQsQ0FBb0JULE9BQXBCLEVBQTZCO0FBQzNCLE1BQUlBLE9BQU8sSUFBSSxJQUFmLEVBQXFCO0FBQ25CLFdBQU8sS0FBUDtBQUNEOztBQUVELFNBQU9RLG1CQUFtQixHQUFHUixPQUFILEdBQWFVLE9BQU8sQ0FBQ1YsT0FBTyxDQUFDVyxPQUFULENBQTlDO0FBQ0Q7O0FBUUQsU0FBU0Msb0JBQVQsR0FBZ0M7QUFDOUIsU0FBTyxLQUFLQyxZQUFaO0FBQ0Q7O0FBRUQsU0FBU0Msa0JBQVQsR0FBOEI7QUFDNUIsU0FBTyxLQUFLQyxnQkFBWjtBQUNEOztBQUVELFNBQVNDLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQStCO0FBQzdCQSxFQUFBQSxLQUFLLENBQUNDLFdBQU4sR0FBb0JELEtBQXBCO0FBQ0FBLEVBQUFBLEtBQUssQ0FBQ0UsT0FBTixHQUFnQnZCLGFBQWhCO0FBQ0FxQixFQUFBQSxLQUFLLENBQUNILGtCQUFOLEdBQTJCQSxrQkFBM0I7QUFDQUcsRUFBQUEsS0FBSyxDQUFDTCxvQkFBTixHQUE2QkEsb0JBQTdCO0FBQ0EsU0FBT0ssS0FBUDtBQUNEOztBQU1ELFNBQVN4QixpQkFBVCxDQUEyQjJCLElBQTNCLEVBQWlDcEIsT0FBakMsRUFBMEM7QUFDeEMsTUFBSXFCLElBQUksR0FBR1osVUFBVSxDQUFDVCxPQUFELENBQXJCO0FBQ0EsU0FBTyxVQUFVc0IsTUFBVixFQUFrQkMsUUFBbEIsRUFBNEI7QUFDakMsUUFBSUQsTUFBTSxJQUFJLElBQVYsSUFBa0IsT0FBT0EsTUFBTSxDQUFDakIsZ0JBQWQsS0FBbUMsVUFBekQsRUFBcUU7QUFDbkUsWUFBTSxJQUFJbUIsS0FBSixDQUFVLGlEQUFWLENBQU47QUFDRDs7QUFFRCxRQUFJQyxPQUFPLEdBQUdILE1BQWQ7O0FBRUEsUUFBSUMsUUFBUSxJQUFJLElBQWhCLEVBQXNCO0FBQ3BCLFVBQUlHLGNBQWMsR0FBRyxTQUFTQSxjQUFULENBQXdCbkIsQ0FBeEIsRUFBMkI7QUFDOUMsZUFBT2dCLFFBQVEsQ0FBQ1AsY0FBYyxDQUFDVCxDQUFELENBQWYsQ0FBZjtBQUNELE9BRkQ7O0FBSUFrQixNQUFBQSxPQUFPLENBQUNwQixnQkFBUixDQUF5QmUsSUFBekIsRUFBK0JNLGNBQS9CLEVBQStDTCxJQUEvQztBQUNBLGFBQU8sU0FBU00sY0FBVCxHQUEwQjtBQUMvQixZQUFJRixPQUFPLElBQUksSUFBZixFQUFxQjtBQUNuQkEsVUFBQUEsT0FBTyxDQUFDbkIsbUJBQVIsQ0FBNEJjLElBQTVCLEVBQWtDTSxjQUFsQyxFQUFrREwsSUFBbEQ7QUFDRDtBQUNGLE9BSkQ7QUFLRCxLQVhELE1BV087QUFDTCxhQUFPekIsYUFBUDtBQUNEO0FBQ0YsR0FyQkQ7QUFzQkQ7O0FBRURnQyxNQUFNLENBQUN0QyxPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlRXZlbnRIYW5kbGU7XG5cbnZhciBfRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5mdW5jdGlvbiBzdXBwb3J0c1Bhc3NpdmVFdmVudHMoKSB7XG4gIHZhciBzdXBwb3J0ZWQgPSBmYWxzZTsgLy8gQ2hlY2sgaWYgYnJvd3NlciBzdXBwb3J0cyBldmVudCB3aXRoIHBhc3NpdmUgbGlzdGVuZXJzXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyI1NhZmVseV9kZXRlY3Rpbmdfb3B0aW9uX3N1cHBvcnRcblxuICBpZiAoX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdGlvbnMsICdwYXNzaXZlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgcmV0dXJuIHN1cHBvcnRlZDtcbn1cblxudmFyIGNhblVzZVBhc3NpdmVFdmVudHMgPSBzdXBwb3J0c1Bhc3NpdmVFdmVudHMoKTtcblxuZnVuY3Rpb24gZ2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY2FuVXNlUGFzc2l2ZUV2ZW50cyA/IG9wdGlvbnMgOiBCb29sZWFuKG9wdGlvbnMuY2FwdHVyZSk7XG59XG4vKipcbiAqIFNoaW0gZ2VuZXJpYyBBUEkgY29tcGF0aWJpbGl0eSB3aXRoIFJlYWN0RE9NJ3Mgc3ludGhldGljIGV2ZW50cywgd2l0aG91dCBuZWVkaW5nIHRoZVxuICogbGFyZ2UgYW1vdW50IG9mIGNvZGUgUmVhY3RET00gdXNlcyB0byBkbyB0aGlzLiBJZGVhbGx5IHdlIHdvdWxkbid0IHVzZSBhIHN5bnRoZXRpY1xuICogZXZlbnQgd3JhcHBlciBhdCBhbGwuXG4gKi9cblxuXG5mdW5jdGlvbiBpc1Byb3BhZ2F0aW9uU3RvcHBlZCgpIHtcbiAgcmV0dXJuIHRoaXMuY2FuY2VsQnViYmxlO1xufVxuXG5mdW5jdGlvbiBpc0RlZmF1bHRQcmV2ZW50ZWQoKSB7XG4gIHJldHVybiB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50KGV2ZW50KSB7XG4gIGV2ZW50Lm5hdGl2ZUV2ZW50ID0gZXZlbnQ7XG4gIGV2ZW50LnBlcnNpc3QgPSBlbXB0eUZ1bmN0aW9uO1xuICBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBpc0RlZmF1bHRQcmV2ZW50ZWQ7XG4gIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkID0gaXNQcm9wYWdhdGlvblN0b3BwZWQ7XG4gIHJldHVybiBldmVudDtcbn1cbi8qKlxuICpcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50SGFuZGxlKHR5cGUsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBnZXRPcHRpb25zKG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgbGlzdGVuZXIpIHtcbiAgICBpZiAodGFyZ2V0ID09IG51bGwgfHwgdHlwZW9mIHRhcmdldC5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZUV2ZW50SGFuZGxlOiBjYWxsZWQgb24gYW4gaW52YWxpZCB0YXJnZXQuJyk7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnQgPSB0YXJnZXQ7XG5cbiAgICBpZiAobGlzdGVuZXIgIT0gbnVsbCkge1xuICAgICAgdmFyIGNvbXBhdExpc3RlbmVyID0gZnVuY3Rpb24gY29tcGF0TGlzdGVuZXIoZSkge1xuICAgICAgICByZXR1cm4gbGlzdGVuZXIobm9ybWFsaXplRXZlbnQoZSkpO1xuICAgICAgfTtcblxuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNvbXBhdExpc3RlbmVyLCBvcHRzKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcigpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjb21wYXRMaXN0ZW5lciwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19