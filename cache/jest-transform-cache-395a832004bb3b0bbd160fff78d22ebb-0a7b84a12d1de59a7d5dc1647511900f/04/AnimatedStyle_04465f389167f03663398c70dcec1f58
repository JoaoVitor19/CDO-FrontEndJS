87a0a65d46c0119f36b2068bc641fa91
'use strict';

exports.__esModule = true;
exports.default = void 0;

var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));

var _AnimatedTransform = _interopRequireDefault(require("./AnimatedTransform"));

var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));

var _NativeAnimatedHelper = _interopRequireDefault(require("../NativeAnimatedHelper"));

var _flattenStyle = _interopRequireDefault(require("../../../../exports/StyleSheet/flattenStyle"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var AnimatedStyle = function (_AnimatedWithChildren) {
  _inheritsLoose(AnimatedStyle, _AnimatedWithChildren);

  function AnimatedStyle(style) {
    var _this;

    _this = _AnimatedWithChildren.call(this) || this;
    style = (0, _flattenStyle.default)(style) || {};

    if (style.transform) {
      style = _objectSpread(_objectSpread({}, style), {}, {
        transform: new _AnimatedTransform.default(style.transform)
      });
    }

    _this._style = style;
    return _this;
  }

  var _proto = AnimatedStyle.prototype;

  _proto._walkStyleAndGetValues = function _walkStyleAndGetValues(style) {
    var updatedStyle = {};

    for (var key in style) {
      var value = style[key];

      if (value instanceof _AnimatedNode.default) {
        if (!value.__isNative) {
          updatedStyle[key] = value.__getValue();
        }
      } else if (value && !Array.isArray(value) && typeof value === 'object') {
        updatedStyle[key] = this._walkStyleAndGetValues(value);
      } else {
        updatedStyle[key] = value;
      }
    }

    return updatedStyle;
  };

  _proto.__getValue = function __getValue() {
    return this._walkStyleAndGetValues(this._style);
  };

  _proto._walkStyleAndGetAnimatedValues = function _walkStyleAndGetAnimatedValues(style) {
    var updatedStyle = {};

    for (var key in style) {
      var value = style[key];

      if (value instanceof _AnimatedNode.default) {
        updatedStyle[key] = value.__getAnimatedValue();
      } else if (value && !Array.isArray(value) && typeof value === 'object') {
        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
      }
    }

    return updatedStyle;
  };

  _proto.__getAnimatedValue = function __getAnimatedValue() {
    return this._walkStyleAndGetAnimatedValues(this._style);
  };

  _proto.__attach = function __attach() {
    for (var key in this._style) {
      var value = this._style[key];

      if (value instanceof _AnimatedNode.default) {
        value.__addChild(this);
      }
    }
  };

  _proto.__detach = function __detach() {
    for (var key in this._style) {
      var value = this._style[key];

      if (value instanceof _AnimatedNode.default) {
        value.__removeChild(this);
      }
    }

    _AnimatedWithChildren.prototype.__detach.call(this);
  };

  _proto.__makeNative = function __makeNative() {
    for (var key in this._style) {
      var value = this._style[key];

      if (value instanceof _AnimatedNode.default) {
        value.__makeNative();
      }
    }

    _AnimatedWithChildren.prototype.__makeNative.call(this);
  };

  _proto.__getNativeConfig = function __getNativeConfig() {
    var styleConfig = {};

    for (var styleKey in this._style) {
      if (this._style[styleKey] instanceof _AnimatedNode.default) {
        var style = this._style[styleKey];

        style.__makeNative();

        styleConfig[styleKey] = style.__getNativeTag();
      }
    }

    _NativeAnimatedHelper.default.validateStyles(styleConfig);

    return {
      type: 'style',
      style: styleConfig
    };
  };

  return AnimatedStyle;
}(_AnimatedWithChildren2.default);

var _default = AnimatedStyle;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkU3R5bGUuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX0FuaW1hdGVkTm9kZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0FuaW1hdGVkVHJhbnNmb3JtIiwiX0FuaW1hdGVkV2l0aENoaWxkcmVuMiIsIl9OYXRpdmVBbmltYXRlZEhlbHBlciIsIl9mbGF0dGVuU3R5bGUiLCJvYmoiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfc2V0UHJvdG90eXBlT2YiLCJvIiwicCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQW5pbWF0ZWRTdHlsZSIsIl9BbmltYXRlZFdpdGhDaGlsZHJlbiIsInN0eWxlIiwiX3RoaXMiLCJjYWxsIiwidHJhbnNmb3JtIiwiX3N0eWxlIiwiX3Byb3RvIiwiX3dhbGtTdHlsZUFuZEdldFZhbHVlcyIsInVwZGF0ZWRTdHlsZSIsIl9faXNOYXRpdmUiLCJfX2dldFZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwiX3dhbGtTdHlsZUFuZEdldEFuaW1hdGVkVmFsdWVzIiwiX19nZXRBbmltYXRlZFZhbHVlIiwiX19hdHRhY2giLCJfX2FkZENoaWxkIiwiX19kZXRhY2giLCJfX3JlbW92ZUNoaWxkIiwiX19tYWtlTmF0aXZlIiwiX19nZXROYXRpdmVDb25maWciLCJzdHlsZUNvbmZpZyIsInN0eWxlS2V5IiwiX19nZXROYXRpdmVUYWciLCJ2YWxpZGF0ZVN0eWxlcyIsInR5cGUiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBU0E7O0FBRUFBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxhQUFhLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLGtCQUFSLENBQTFDOztBQUVBLElBQUlDLGtCQUFrQixHQUFHRixzQkFBc0IsQ0FBQ0MsT0FBTyx1QkFBUixDQUEvQzs7QUFFQSxJQUFJRSxzQkFBc0IsR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sMEJBQVIsQ0FBbkQ7O0FBRUEsSUFBSUcscUJBQXFCLEdBQUdKLHNCQUFzQixDQUFDQyxPQUFPLDJCQUFSLENBQWxEOztBQUVBLElBQUlJLGFBQWEsR0FBR0wsc0JBQXNCLENBQUNDLE9BQU8sK0NBQVIsQ0FBMUM7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NNLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNULFVBQVgsR0FBd0JTLEdBQXhCLEdBQThCO0FBQUVSLElBQUFBLE9BQU8sRUFBRVE7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsU0FBU0MsT0FBVCxDQUFpQkMsTUFBakIsRUFBeUJDLGNBQXpCLEVBQXlDO0FBQUUsTUFBSUMsSUFBSSxHQUFHQyxNQUFNLENBQUNELElBQVAsQ0FBWUYsTUFBWixDQUFYOztBQUFnQyxNQUFJRyxNQUFNLENBQUNDLHFCQUFYLEVBQWtDO0FBQUUsUUFBSUMsT0FBTyxHQUFHRixNQUFNLENBQUNDLHFCQUFQLENBQTZCSixNQUE3QixD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Q0FBQ0wsT0FqSVEsQ0FBakM7O0FBbUlBLElBQUkyRSxRQUFRLEdBQUczQixhQUFmO0FBQ0FsRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IyRSxRQUFsQjtBQUNBQyxNQUFNLENBQUM5RSxPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX0FuaW1hdGVkTm9kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQW5pbWF0ZWROb2RlXCIpKTtcblxudmFyIF9BbmltYXRlZFRyYW5zZm9ybSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQW5pbWF0ZWRUcmFuc2Zvcm1cIikpO1xuXG52YXIgX0FuaW1hdGVkV2l0aENoaWxkcmVuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQW5pbWF0ZWRXaXRoQ2hpbGRyZW5cIikpO1xuXG52YXIgX05hdGl2ZUFuaW1hdGVkSGVscGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXJcIikpO1xuXG52YXIgX2ZsYXR0ZW5TdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uLy4uL2V4cG9ydHMvU3R5bGVTaGVldC9mbGF0dGVuU3R5bGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBBbmltYXRlZFN0eWxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4pIHtcbiAgX2luaGVyaXRzTG9vc2UoQW5pbWF0ZWRTdHlsZSwgX0FuaW1hdGVkV2l0aENoaWxkcmVuKTtcblxuICBmdW5jdGlvbiBBbmltYXRlZFN0eWxlKHN0eWxlKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4uY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIHN0eWxlID0gKDAsIF9mbGF0dGVuU3R5bGUuZGVmYXVsdCkoc3R5bGUpIHx8IHt9O1xuXG4gICAgaWYgKHN0eWxlLnRyYW5zZm9ybSkge1xuICAgICAgc3R5bGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwge30sIHtcbiAgICAgICAgdHJhbnNmb3JtOiBuZXcgX0FuaW1hdGVkVHJhbnNmb3JtLmRlZmF1bHQoc3R5bGUudHJhbnNmb3JtKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3RoaXMuX3N0eWxlID0gc3R5bGU7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9IC8vIFJlY3Vyc2l2ZWx5IGdldCB2YWx1ZXMgZm9yIG5lc3RlZCBzdHlsZXMgKGxpa2UgaU9TJ3Mgc2hhZG93T2Zmc2V0KVxuXG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGVkU3R5bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5fd2Fsa1N0eWxlQW5kR2V0VmFsdWVzID0gZnVuY3Rpb24gX3dhbGtTdHlsZUFuZEdldFZhbHVlcyhzdHlsZSkge1xuICAgIHZhciB1cGRhdGVkU3R5bGUgPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVba2V5XTtcblxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgX0FuaW1hdGVkTm9kZS5kZWZhdWx0KSB7XG4gICAgICAgIGlmICghdmFsdWUuX19pc05hdGl2ZSkge1xuICAgICAgICAgIC8vIFdlIGNhbm5vdCB1c2UgdmFsdWUgb2YgbmF0aXZlbHkgZHJpdmVuIG5vZGVzIHRoaXMgd2F5IGFzIHRoZSB2YWx1ZSB3ZSBoYXZlIGFjY2VzcyBmcm9tXG4gICAgICAgICAgLy8gSlMgbWF5IG5vdCBiZSB1cCB0byBkYXRlLlxuICAgICAgICAgIHVwZGF0ZWRTdHlsZVtrZXldID0gdmFsdWUuX19nZXRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgYW5pbWF0aW5nIG5lc3RlZCB2YWx1ZXMgKGZvciBleGFtcGxlOiBzaGFkb3dPZmZzZXQuaGVpZ2h0KVxuICAgICAgICB1cGRhdGVkU3R5bGVba2V5XSA9IHRoaXMuX3dhbGtTdHlsZUFuZEdldFZhbHVlcyh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVkU3R5bGVba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVkU3R5bGU7XG4gIH07XG5cbiAgX3Byb3RvLl9fZ2V0VmFsdWUgPSBmdW5jdGlvbiBfX2dldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl93YWxrU3R5bGVBbmRHZXRWYWx1ZXModGhpcy5fc3R5bGUpO1xuICB9IC8vIFJlY3Vyc2l2ZWx5IGdldCBhbmltYXRlZCB2YWx1ZXMgZm9yIG5lc3RlZCBzdHlsZXMgKGxpa2UgaU9TJ3Mgc2hhZG93T2Zmc2V0KVxuICA7XG5cbiAgX3Byb3RvLl93YWxrU3R5bGVBbmRHZXRBbmltYXRlZFZhbHVlcyA9IGZ1bmN0aW9uIF93YWxrU3R5bGVBbmRHZXRBbmltYXRlZFZhbHVlcyhzdHlsZSkge1xuICAgIHZhciB1cGRhdGVkU3R5bGUgPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVba2V5XTtcblxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgX0FuaW1hdGVkTm9kZS5kZWZhdWx0KSB7XG4gICAgICAgIHVwZGF0ZWRTdHlsZVtrZXldID0gdmFsdWUuX19nZXRBbmltYXRlZFZhbHVlKCk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgYW5pbWF0aW5nIG5lc3RlZCB2YWx1ZXMgKGZvciBleGFtcGxlOiBzaGFkb3dPZmZzZXQuaGVpZ2h0KVxuICAgICAgICB1cGRhdGVkU3R5bGVba2V5XSA9IHRoaXMuX3dhbGtTdHlsZUFuZEdldEFuaW1hdGVkVmFsdWVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlZFN0eWxlO1xuICB9O1xuXG4gIF9wcm90by5fX2dldEFuaW1hdGVkVmFsdWUgPSBmdW5jdGlvbiBfX2dldEFuaW1hdGVkVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dhbGtTdHlsZUFuZEdldEFuaW1hdGVkVmFsdWVzKHRoaXMuX3N0eWxlKTtcbiAgfTtcblxuICBfcHJvdG8uX19hdHRhY2ggPSBmdW5jdGlvbiBfX2F0dGFjaCgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX3N0eWxlW2tleV07XG5cbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIF9BbmltYXRlZE5vZGUuZGVmYXVsdCkge1xuICAgICAgICB2YWx1ZS5fX2FkZENoaWxkKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX19kZXRhY2ggPSBmdW5jdGlvbiBfX2RldGFjaCgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX3N0eWxlW2tleV07XG5cbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIF9BbmltYXRlZE5vZGUuZGVmYXVsdCkge1xuICAgICAgICB2YWx1ZS5fX3JlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9BbmltYXRlZFdpdGhDaGlsZHJlbi5wcm90b3R5cGUuX19kZXRhY2guY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uX19tYWtlTmF0aXZlID0gZnVuY3Rpb24gX19tYWtlTmF0aXZlKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl9zdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fc3R5bGVba2V5XTtcblxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgX0FuaW1hdGVkTm9kZS5kZWZhdWx0KSB7XG4gICAgICAgIHZhbHVlLl9fbWFrZU5hdGl2ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9BbmltYXRlZFdpdGhDaGlsZHJlbi5wcm90b3R5cGUuX19tYWtlTmF0aXZlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLl9fZ2V0TmF0aXZlQ29uZmlnID0gZnVuY3Rpb24gX19nZXROYXRpdmVDb25maWcoKSB7XG4gICAgdmFyIHN0eWxlQ29uZmlnID0ge307XG5cbiAgICBmb3IgKHZhciBzdHlsZUtleSBpbiB0aGlzLl9zdHlsZSkge1xuICAgICAgaWYgKHRoaXMuX3N0eWxlW3N0eWxlS2V5XSBpbnN0YW5jZW9mIF9BbmltYXRlZE5vZGUuZGVmYXVsdCkge1xuICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLl9zdHlsZVtzdHlsZUtleV07XG5cbiAgICAgICAgc3R5bGUuX19tYWtlTmF0aXZlKCk7XG5cbiAgICAgICAgc3R5bGVDb25maWdbc3R5bGVLZXldID0gc3R5bGUuX19nZXROYXRpdmVUYWcoKTtcbiAgICAgIH0gLy8gTm9uLWFuaW1hdGVkIHN0eWxlcyBhcmUgc2V0IHVzaW5nIGBzZXROYXRpdmVQcm9wc2AsIG5vIG5lZWRcbiAgICAgIC8vIHRvIHBhc3MgdGhvc2UgYXMgYSBwYXJ0IG9mIHRoZSBub2RlIGNvbmZpZ1xuXG4gICAgfVxuXG4gICAgX05hdGl2ZUFuaW1hdGVkSGVscGVyLmRlZmF1bHQudmFsaWRhdGVTdHlsZXMoc3R5bGVDb25maWcpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdzdHlsZScsXG4gICAgICBzdHlsZTogc3R5bGVDb25maWdcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRlZFN0eWxlO1xufShfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4yLmRlZmF1bHQpO1xuXG52YXIgX2RlZmF1bHQgPSBBbmltYXRlZFN0eWxlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=