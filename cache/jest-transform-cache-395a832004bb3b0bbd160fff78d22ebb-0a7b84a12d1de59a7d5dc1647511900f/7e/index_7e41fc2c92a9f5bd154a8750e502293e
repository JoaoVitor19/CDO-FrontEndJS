fadb6d2924ce487a3adb653794fddeb8
'use strict';

exports.__esModule = true;
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _useMergeRefs = _interopRequireDefault(require("../../modules/useMergeRefs"));

var _usePressEvents = _interopRequireDefault(require("../../modules/usePressEvents"));

var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));

var _View = _interopRequireDefault(require("../View"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function TouchableOpacity(props, forwardedRef) {
  var activeOpacity = props.activeOpacity,
      delayPressIn = props.delayPressIn,
      delayPressOut = props.delayPressOut,
      delayLongPress = props.delayLongPress,
      disabled = props.disabled,
      focusable = props.focusable,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      onPressIn = props.onPressIn,
      onPressOut = props.onPressOut,
      rejectResponderTermination = props.rejectResponderTermination,
      style = props.style,
      rest = _objectWithoutPropertiesLoose(props, ["activeOpacity", "delayPressIn", "delayPressOut", "delayLongPress", "disabled", "focusable", "onLongPress", "onPress", "onPressIn", "onPressOut", "rejectResponderTermination", "style"]);

  var hostRef = (0, React.useRef)(null);
  var setRef = (0, _useMergeRefs.default)(forwardedRef, hostRef);

  var _useState = (0, React.useState)('0s'),
      duration = _useState[0],
      setDuration = _useState[1];

  var _useState2 = (0, React.useState)(null),
      opacityOverride = _useState2[0],
      setOpacityOverride = _useState2[1];

  var setOpacityTo = (0, React.useCallback)(function (value, duration) {
    setOpacityOverride(value);
    setDuration(duration ? duration / 1000 + "s" : '0s');
  }, [setOpacityOverride, setDuration]);
  var setOpacityActive = (0, React.useCallback)(function (duration) {
    setOpacityTo(activeOpacity !== null && activeOpacity !== void 0 ? activeOpacity : 0.2, duration);
  }, [activeOpacity, setOpacityTo]);
  var setOpacityInactive = (0, React.useCallback)(function (duration) {
    setOpacityTo(null, duration);
  }, [setOpacityTo]);
  var pressConfig = (0, React.useMemo)(function () {
    return {
      cancelable: !rejectResponderTermination,
      disabled: disabled,
      delayLongPress: delayLongPress,
      delayPressStart: delayPressIn,
      delayPressEnd: delayPressOut,
      onLongPress: onLongPress,
      onPress: onPress,
      onPressStart: function onPressStart(event) {
        var isGrant = event.dispatchConfig != null ? event.dispatchConfig.registrationName === 'onResponderGrant' : event.type === 'keydown';
        setOpacityActive(isGrant ? 0 : 150);

        if (onPressIn != null) {
          onPressIn(event);
        }
      },
      onPressEnd: function onPressEnd(event) {
        setOpacityInactive(250);

        if (onPressOut != null) {
          onPressOut(event);
        }
      }
    };
  }, [delayLongPress, delayPressIn, delayPressOut, disabled, onLongPress, onPress, onPressIn, onPressOut, rejectResponderTermination, setOpacityActive, setOpacityInactive]);
  var pressEventHandlers = (0, _usePressEvents.default)(hostRef, pressConfig);
  return React.createElement(_View.default, _extends({}, rest, pressEventHandlers, {
    accessibilityDisabled: disabled,
    focusable: !disabled && focusable !== false,
    ref: setRef,
    style: [styles.root, !disabled && styles.actionable, style, opacityOverride != null && {
      opacity: opacityOverride
    }, {
      transitionDuration: duration
    }]
  }));
}

var styles = _StyleSheet.default.create({
  root: {
    transitionProperty: 'opacity',
    transitionDuration: '0.15s',
    userSelect: 'none'
  },
  actionable: {
    cursor: 'pointer',
    touchAction: 'manipulation'
  }
});

var MemoedTouchableOpacity = React.memo(React.forwardRef(TouchableOpacity));
MemoedTouchableOpacity.displayName = 'TouchableOpacity';
var _default = MemoedTouchableOpacity;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX3VzZU1lcmdlUmVmcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdXNlUHJlc3NFdmVudHMiLCJfU3R5bGVTaGVldCIsIl9WaWV3Iiwib2JqIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImtleXMiLCJpbmRleE9mIiwiVG91Y2hhYmxlT3BhY2l0eSIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiYWN0aXZlT3BhY2l0eSIsImRlbGF5UHJlc3NJbiIsImRlbGF5UHJlc3NPdXQiLCJkZWxheUxvbmdQcmVzcyIsImRpc2FibGVkIiwiZm9jdXNhYmxlIiwib25Mb25nUHJlc3MiLCJvblByZXNzIiwib25QcmVzc0luIiwib25QcmVzc091dCIsInJlamVjdFJlc3BvbmRlclRlcm1pbmF0aW9uIiwic3R5bGUiLCJyZXN0IiwiaG9zdFJlZiIsInVzZVJlZiIsInNldFJlZiIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiZHVyYXRpb24iLCJzZXREdXJhdGlvbiIsIl91c2VTdGF0ZTIiLCJvcGFjaXR5T3ZlcnJpZGUiLCJzZXRPcGFjaXR5T3ZlcnJpZGUiLCJzZXRPcGFjaXR5VG8iLCJ1c2VDYWxsYmFjayIsInZhbHVlIiwic2V0T3BhY2l0eUFjdGl2ZSIsInNldE9wYWNpdHlJbmFjdGl2ZSIsInByZXNzQ29uZmlnIiwidXNlTWVtbyIsImNhbmNlbGFibGUiLCJkZWxheVByZXNzU3RhcnQiLCJkZWxheVByZXNzRW5kIiwib25QcmVzc1N0YXJ0IiwiZXZlbnQiLCJpc0dyYW50IiwiZGlzcGF0Y2hDb25maWciLCJyZWdpc3RyYXRpb25OYW1lIiwidHlwZSIsIm9uUHJlc3NFbmQiLCJwcmVzc0V2ZW50SGFuZGxlcnMiLCJjcmVhdGVFbGVtZW50IiwiYWNjZXNzaWJpbGl0eURpc2FibGVkIiwicmVmIiwic3R5bGVzIiwicm9vdCIsImFjdGlvbmFibGUiLCJvcGFjaXR5IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiY3JlYXRlIiwidHJhbnNpdGlvblByb3BlcnR5IiwidXNlclNlbGVjdCIsImN1cnNvciIsInRvdWNoQWN0aW9uIiwiTWVtb2VkVG91Y2hhYmxlT3BhY2l0eSIsIm1lbW8iLCJmb3J3YXJkUmVmIiwiZGlzcGxheU5hbWUiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBU0E7O0FBRUFBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsT0FBRCxDQUFSLENBQW5DOztBQUVBLElBQUlDLGFBQWEsR0FBR0Msc0JBQXNCLENBQUNGLE9BQU8sOEJBQVIsQ0FBMUM7O0FBRUEsSUFBSUcsZUFBZSxHQUFHRCxzQkFBc0IsQ0FBQ0YsT0FBTyxnQ0FBUixDQUE1Qzs7QUFFQSxJQUFJSSxXQUFXLEdBQUdGLHNCQUFzQixDQUFDRixPQUFPLGlCQUFSLENBQXhDOztBQUVBLElBQUlLLEtBQUssR0FBR0gsc0JBQXNCLENBQUNGLE9BQU8sV0FBUixDQUFsQzs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ0ks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ZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF91c2VNZXJnZVJlZnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL3VzZU1lcmdlUmVmc1wiKSk7XG5cbnZhciBfdXNlUHJlc3NFdmVudHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL3VzZVByZXNzRXZlbnRzXCIpKTtcblxudmFyIF9TdHlsZVNoZWV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vU3R5bGVTaGVldFwiKSk7XG5cbnZhciBfVmlldyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1ZpZXdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG4vKipcbiAqIEEgd3JhcHBlciBmb3IgbWFraW5nIHZpZXdzIHJlc3BvbmQgcHJvcGVybHkgdG8gdG91Y2hlcy5cbiAqIE9uIHByZXNzIGRvd24sIHRoZSBvcGFjaXR5IG9mIHRoZSB3cmFwcGVkIHZpZXcgaXMgZGVjcmVhc2VkLCBkaW1taW5nIGl0LlxuICovXG5mdW5jdGlvbiBUb3VjaGFibGVPcGFjaXR5KHByb3BzLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGFjdGl2ZU9wYWNpdHkgPSBwcm9wcy5hY3RpdmVPcGFjaXR5LFxuICAgICAgZGVsYXlQcmVzc0luID0gcHJvcHMuZGVsYXlQcmVzc0luLFxuICAgICAgZGVsYXlQcmVzc091dCA9IHByb3BzLmRlbGF5UHJlc3NPdXQsXG4gICAgICBkZWxheUxvbmdQcmVzcyA9IHByb3BzLmRlbGF5TG9uZ1ByZXNzLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGZvY3VzYWJsZSA9IHByb3BzLmZvY3VzYWJsZSxcbiAgICAgIG9uTG9uZ1ByZXNzID0gcHJvcHMub25Mb25nUHJlc3MsXG4gICAgICBvblByZXNzID0gcHJvcHMub25QcmVzcyxcbiAgICAgIG9uUHJlc3NJbiA9IHByb3BzLm9uUHJlc3NJbixcbiAgICAgIG9uUHJlc3NPdXQgPSBwcm9wcy5vblByZXNzT3V0LFxuICAgICAgcmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb24gPSBwcm9wcy5yZWplY3RSZXNwb25kZXJUZXJtaW5hdGlvbixcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcImFjdGl2ZU9wYWNpdHlcIiwgXCJkZWxheVByZXNzSW5cIiwgXCJkZWxheVByZXNzT3V0XCIsIFwiZGVsYXlMb25nUHJlc3NcIiwgXCJkaXNhYmxlZFwiLCBcImZvY3VzYWJsZVwiLCBcIm9uTG9uZ1ByZXNzXCIsIFwib25QcmVzc1wiLCBcIm9uUHJlc3NJblwiLCBcIm9uUHJlc3NPdXRcIiwgXCJyZWplY3RSZXNwb25kZXJUZXJtaW5hdGlvblwiLCBcInN0eWxlXCJdKTtcblxuICB2YXIgaG9zdFJlZiA9ICgwLCBSZWFjdC51c2VSZWYpKG51bGwpO1xuICB2YXIgc2V0UmVmID0gKDAsIF91c2VNZXJnZVJlZnMuZGVmYXVsdCkoZm9yd2FyZGVkUmVmLCBob3N0UmVmKTtcblxuICB2YXIgX3VzZVN0YXRlID0gKDAsIFJlYWN0LnVzZVN0YXRlKSgnMHMnKSxcbiAgICAgIGR1cmF0aW9uID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0RHVyYXRpb24gPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTIgPSAoMCwgUmVhY3QudXNlU3RhdGUpKG51bGwpLFxuICAgICAgb3BhY2l0eU92ZXJyaWRlID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldE9wYWNpdHlPdmVycmlkZSA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIHNldE9wYWNpdHlUbyA9ICgwLCBSZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKHZhbHVlLCBkdXJhdGlvbikge1xuICAgIHNldE9wYWNpdHlPdmVycmlkZSh2YWx1ZSk7XG4gICAgc2V0RHVyYXRpb24oZHVyYXRpb24gPyBkdXJhdGlvbiAvIDEwMDAgKyBcInNcIiA6ICcwcycpO1xuICB9LCBbc2V0T3BhY2l0eU92ZXJyaWRlLCBzZXREdXJhdGlvbl0pO1xuICB2YXIgc2V0T3BhY2l0eUFjdGl2ZSA9ICgwLCBSZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgc2V0T3BhY2l0eVRvKGFjdGl2ZU9wYWNpdHkgIT09IG51bGwgJiYgYWN0aXZlT3BhY2l0eSAhPT0gdm9pZCAwID8gYWN0aXZlT3BhY2l0eSA6IDAuMiwgZHVyYXRpb24pO1xuICB9LCBbYWN0aXZlT3BhY2l0eSwgc2V0T3BhY2l0eVRvXSk7XG4gIHZhciBzZXRPcGFjaXR5SW5hY3RpdmUgPSAoMCwgUmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgIHNldE9wYWNpdHlUbyhudWxsLCBkdXJhdGlvbik7XG4gIH0sIFtzZXRPcGFjaXR5VG9dKTtcbiAgdmFyIHByZXNzQ29uZmlnID0gKDAsIFJlYWN0LnVzZU1lbW8pKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FuY2VsYWJsZTogIXJlamVjdFJlc3BvbmRlclRlcm1pbmF0aW9uLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgZGVsYXlMb25nUHJlc3M6IGRlbGF5TG9uZ1ByZXNzLFxuICAgICAgZGVsYXlQcmVzc1N0YXJ0OiBkZWxheVByZXNzSW4sXG4gICAgICBkZWxheVByZXNzRW5kOiBkZWxheVByZXNzT3V0LFxuICAgICAgb25Mb25nUHJlc3M6IG9uTG9uZ1ByZXNzLFxuICAgICAgb25QcmVzczogb25QcmVzcyxcbiAgICAgIG9uUHJlc3NTdGFydDogZnVuY3Rpb24gb25QcmVzc1N0YXJ0KGV2ZW50KSB7XG4gICAgICAgIHZhciBpc0dyYW50ID0gZXZlbnQuZGlzcGF0Y2hDb25maWcgIT0gbnVsbCA/IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUgPT09ICdvblJlc3BvbmRlckdyYW50JyA6IGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJztcbiAgICAgICAgc2V0T3BhY2l0eUFjdGl2ZShpc0dyYW50ID8gMCA6IDE1MCk7XG5cbiAgICAgICAgaWYgKG9uUHJlc3NJbiAhPSBudWxsKSB7XG4gICAgICAgICAgb25QcmVzc0luKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uUHJlc3NFbmQ6IGZ1bmN0aW9uIG9uUHJlc3NFbmQoZXZlbnQpIHtcbiAgICAgICAgc2V0T3BhY2l0eUluYWN0aXZlKDI1MCk7XG5cbiAgICAgICAgaWYgKG9uUHJlc3NPdXQgIT0gbnVsbCkge1xuICAgICAgICAgIG9uUHJlc3NPdXQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2RlbGF5TG9uZ1ByZXNzLCBkZWxheVByZXNzSW4sIGRlbGF5UHJlc3NPdXQsIGRpc2FibGVkLCBvbkxvbmdQcmVzcywgb25QcmVzcywgb25QcmVzc0luLCBvblByZXNzT3V0LCByZWplY3RSZXNwb25kZXJUZXJtaW5hdGlvbiwgc2V0T3BhY2l0eUFjdGl2ZSwgc2V0T3BhY2l0eUluYWN0aXZlXSk7XG4gIHZhciBwcmVzc0V2ZW50SGFuZGxlcnMgPSAoMCwgX3VzZVByZXNzRXZlbnRzLmRlZmF1bHQpKGhvc3RSZWYsIHByZXNzQ29uZmlnKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9WaWV3LmRlZmF1bHQsIF9leHRlbmRzKHt9LCByZXN0LCBwcmVzc0V2ZW50SGFuZGxlcnMsIHtcbiAgICBhY2Nlc3NpYmlsaXR5RGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGZvY3VzYWJsZTogIWRpc2FibGVkICYmIGZvY3VzYWJsZSAhPT0gZmFsc2UsXG4gICAgcmVmOiBzZXRSZWYsXG4gICAgc3R5bGU6IFtzdHlsZXMucm9vdCwgIWRpc2FibGVkICYmIHN0eWxlcy5hY3Rpb25hYmxlLCBzdHlsZSwgb3BhY2l0eU92ZXJyaWRlICE9IG51bGwgJiYge1xuICAgICAgb3BhY2l0eTogb3BhY2l0eU92ZXJyaWRlXG4gICAgfSwge1xuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBkdXJhdGlvblxuICAgIH1dXG4gIH0pKTtcbn1cblxudmFyIHN0eWxlcyA9IF9TdHlsZVNoZWV0LmRlZmF1bHQuY3JlYXRlKHtcbiAgcm9vdDoge1xuICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogJ29wYWNpdHknLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogJzAuMTVzJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZSdcbiAgfSxcbiAgYWN0aW9uYWJsZToge1xuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHRvdWNoQWN0aW9uOiAnbWFuaXB1bGF0aW9uJ1xuICB9XG59KTtcblxudmFyIE1lbW9lZFRvdWNoYWJsZU9wYWNpdHkgPSAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyggLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoVG91Y2hhYmxlT3BhY2l0eSkpO1xuTWVtb2VkVG91Y2hhYmxlT3BhY2l0eS5kaXNwbGF5TmFtZSA9ICdUb3VjaGFibGVPcGFjaXR5JztcbnZhciBfZGVmYXVsdCA9IE1lbW9lZFRvdWNoYWJsZU9wYWNpdHk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==