6e94532f17f26ad459cec7573ac6529d
"use strict";

exports.__esModule = true;
exports.default = void 0;

var _Dimensions = _interopRequireDefault(require("../../exports/Dimensions"));

var _findNodeHandle = _interopRequireDefault(require("../../exports/findNodeHandle"));

var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));

var _Platform = _interopRequireDefault(require("../../exports/Platform"));

var _TextInputState = _interopRequireDefault(require("../TextInputState"));

var _UIManager = _interopRequireDefault(require("../../exports/UIManager"));

var _warning = _interopRequireDefault(require("fbjs/lib/warning"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var emptyObject = {};
var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
var ScrollResponderMixin = {
  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
    return {
      isTouching: false,
      lastMomentumScrollBeginTime: 0,
      lastMomentumScrollEndTime: 0,
      observedScrollSinceBecomingResponder: false,
      becameResponderWhileAnimating: false
    };
  },
  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
    return this.state.isTouching;
  },
  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder() {
    return false;
  },
  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
    return this.scrollResponderIsAnimating();
  },
  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {
    (0, _warning.default)(false, "ScrollView doesn't take rejection well - scrolls anyway");
  },
  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
    return !this.state.observedScrollSinceBecomingResponder;
  },
  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
    var nativeEvent = e.nativeEvent;
    this.state.isTouching = nativeEvent.touches.length !== 0;
    this.props.onTouchEnd && this.props.onTouchEnd(e);
  },
  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
    this.props.onResponderRelease && this.props.onResponderRelease(e);

    var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedField();

    if (!this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);

      _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
    }
  },
  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
    this.state.observedScrollSinceBecomingResponder = true;
    this.props.onScroll && this.props.onScroll(e);
  },
  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
    this.state.observedScrollSinceBecomingResponder = false;
    this.props.onResponderGrant && this.props.onResponderGrant(e);
    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
  },
  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
  },
  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
  },
  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
    this.state.lastMomentumScrollBeginTime = Date.now();
    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
  },
  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
    this.state.lastMomentumScrollEndTime = Date.now();
    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
  },
  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
    this.state.isTouching = true;
    this.props.onTouchStart && this.props.onTouchStart(e);
  },
  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
    this.props.onTouchMove && this.props.onTouchMove(e);
  },
  scrollResponderIsAnimating: function scrollResponderIsAnimating() {
    var now = Date.now();
    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
    return isAnimating;
  },
  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
    return this.getScrollableNode ? this.getScrollableNode() : (0, _findNodeHandle.default)(this);
  },
  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
    if (typeof x === 'number') {
      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
    } else {
      var _ref = x || emptyObject;

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }

    var node = this.scrollResponderGetScrollableNode();
    var left = x || 0;
    var top = y || 0;

    if (typeof node.scroll === 'function') {
      node.scroll({
        top: top,
        left: left,
        behavior: !animated ? 'auto' : 'smooth'
      });
    } else {
      node.scrollLeft = left;
      node.scrollTop = top;
    }
  },
  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
    if (_Platform.default.OS !== 'ios') {
      (0, _invariant.default)('zoomToRect is not implemented');
    }
  },
  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {},
  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
    this.additionalScrollOffset = additionalOffset || 0;
    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;

    _UIManager.default.measureLayout(nodeHandle, (0, _findNodeHandle.default)(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
  },
  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
    var keyboardScreenY = _Dimensions.default.get('window').height;

    if (this.keyboardWillOpenTo) {
      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
    }

    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

    if (this.preventNegativeScrollOffset) {
      scrollOffsetY = Math.max(0, scrollOffsetY);
    }

    this.scrollResponderScrollTo({
      x: 0,
      y: scrollOffsetY,
      animated: true
    });
    this.additionalOffset = 0;
    this.preventNegativeScrollOffset = false;
  },
  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
    console.error('Error measuring text field: ', e);
  },
  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
    this.keyboardWillOpenTo = null;
    this.additionalScrollOffset = 0;
  },
  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
    this.keyboardWillOpenTo = e;
    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
  },
  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
  },
  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
    if (e) {
      this.keyboardWillOpenTo = e;
    }

    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
  },
  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
  }
};
var ScrollResponder = {
  Mixin: ScrollResponderMixin
};
var _default = ScrollResponder;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9EaW1lbnNpb25zIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZmluZE5vZGVIYW5kbGUiLCJfaW52YXJpYW50IiwiX1BsYXRmb3JtIiwiX1RleHRJbnB1dFN0YXRlIiwiX1VJTWFuYWdlciIsIl93YXJuaW5nIiwib2JqIiwiZW1wdHlPYmplY3QiLCJJU19BTklNQVRJTkdfVE9VQ0hfU1RBUlRfVEhSRVNIT0xEX01TIiwiU2Nyb2xsUmVzcG9uZGVyTWl4aW4iLCJzY3JvbGxSZXNwb25kZXJNaXhpbkdldEluaXRpYWxTdGF0ZSIsImlzVG91Y2hpbmciLCJsYXN0TW9tZW50dW1TY3JvbGxCZWdpblRpbWUiLCJsYXN0TW9tZW50dW1TY3JvbGxFbmRUaW1lIiwib2JzZXJ2ZWRTY3JvbGxTaW5jZUJlY29taW5nUmVzcG9uZGVyIiwiYmVjYW1lUmVzcG9uZGVyV2hpbGVBbmltYXRpbmciLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxTaG91bGRTZXRSZXNwb25kZXIiLCJzdGF0ZSIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwiZSIsInNjcm9sbFJlc3BvbmRlcklzQW5pbWF0aW5nIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyUmVqZWN0Iiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlVGVybWluYXRpb25SZXF1ZXN0Iiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hFbmQiLCJuYXRpdmVFdmVudCIsInRvdWNoZXMiLCJsZW5ndGgiLCJwcm9wcyIsIm9uVG91Y2hFbmQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWxlYXNlIiwib25SZXNwb25kZXJSZWxlYXNlIiwiY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsImtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMiLCJ0YXJnZXQiLCJvblNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlzbWlzc2VkIiwiYmx1clRleHRJbnB1dCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbCIsIm9uU2Nyb2xsIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyR3JhbnQiLCJvblJlc3BvbmRlckdyYW50Iiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlU2Nyb2xsQmVnaW5EcmFnIiwib25TY3JvbGxCZWdpbkRyYWciLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxFbmREcmFnIiwib25TY3JvbGxFbmREcmFnIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxCZWdpbiIsIkRhdGUiLCJub3ciLCJvbk1vbWVudHVtU2Nyb2xsQmVnaW4iLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVNb21lbnR1bVNjcm9sbEVuZCIsIm9uTW9tZW50dW1TY3JvbGxFbmQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0Iiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hNb3ZlIiwib25Ub3VjaE1vdmUiLCJ0aW1lU2luY2VMYXN0TW9tZW50dW1TY3JvbGxFbmQiLCJpc0FuaW1hdGluZyIsInNjcm9sbFJlc3BvbmRlckdldFNjcm9sbGFibGVOb2RlIiwiZ2V0U2Nyb2xsYWJsZU5vZGUiLCJzY3JvbGxSZXNwb25kZXJTY3JvbGxUbyIsIngiLCJ5IiwiYW5pbWF0ZWQiLCJjb25zb2xlIiwid2FybiIsIl9yZWYiLCJub2RlIiwibGVmdCIsInRvcCIsInNjcm9sbCIsImJlaGF2aW9yIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsInNjcm9sbFJlc3BvbmRlclpvb21UbyIsInJlY3QiLCJPUyIsInNjcm9sbFJlc3BvbmRlckZsYXNoU2Nyb2xsSW5kaWNhdG9ycyIsInNjcm9sbFJlc3BvbmRlclNjcm9sbE5hdGl2ZUhhbmRsZVRvS2V5Ym9hcmQiLCJub2RlSGFuZGxlIiwiYWRkaXRpb25hbE9mZnNldCIsInByZXZlbnROZWdhdGl2ZVNjcm9sbE9mZnNldCIsImFkZGl0aW9uYWxTY3JvbGxPZmZzZXQiLCJtZWFzdXJlTGF5b3V0IiwiZ2V0SW5uZXJWaWV3Tm9kZSIsInNjcm9sbFJlc3BvbmRlclRleHRJbnB1dEZvY3VzRXJyb3IiLCJzY3JvbGxSZXNwb25kZXJJbnB1dE1lYXN1cmVBbmRTY3JvbGxUb0tleWJvYXJkIiwid2lkdGgiLCJoZWlnaHQiLCJrZXlib2FyZFNjcmVlblkiLCJnZXQiLCJrZXlib2FyZFdpbGxPcGVuVG8iLCJlbmRDb29yZGluYXRlcyIsInNjcmVlblkiLCJzY3JvbGxPZmZzZXRZIiwiTWF0aCIsIm1heCIsImVycm9yIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsInNjcm9sbFJlc3BvbmRlcktleWJvYXJkV2lsbFNob3ciLCJvbktleWJvYXJkV2lsbFNob3ciLCJzY3JvbGxSZXNwb25kZXJLZXlib2FyZFdpbGxIaWRlIiwib25LZXlib2FyZFdpbGxIaWRlIiwic2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaWRTaG93Iiwib25LZXlib2FyZERpZFNob3ciLCJzY3JvbGxSZXNwb25kZXJLZXlib2FyZERpZEhpZGUiLCJvbktleWJvYXJkRGlkSGlkZSIsIlNjcm9sbFJlc3BvbmRlciIsIk1peGluIiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMsV0FBVyxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyw0QkFBUixDQUF4Qzs7QUFFQSxJQUFJQyxlQUFlLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLGdDQUFSLENBQTVDOztBQUVBLElBQUlFLFVBQVUsR0FBR0gsc0JBQXNCLENBQUND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RixFQUFBQSwrQkFBK0IsRUFBRSxTQUFTQSwrQkFBVCxDQUF5Q2pGLENBQXpDLEVBQTRDO0FBQzNFLFNBQUt1RSxrQkFBTCxHQUEwQixJQUExQjtBQUNBLFNBQUsvRCxLQUFMLENBQVcwRSxrQkFBWCxJQUFpQyxLQUFLMUUsS0FBTCxDQUFXMEUsa0JBQVgsQ0FBOEJsRixDQUE5QixDQUFqQztBQUNELEdBMVl3QjtBQTJZekJtRixFQUFBQSw4QkFBOEIsRUFBRSxTQUFTQSw4QkFBVCxDQUF3Q25GLENBQXhDLEVBQTJDO0FBR3pFLFFBQUlBLENBQUosRUFBTztBQUNMLFdBQUt1RSxrQkFBTCxHQUEwQnZFLENBQTFCO0FBQ0Q7O0FBRUQsU0FBS1EsS0FBTCxDQUFXNEUsaUJBQVgsSUFBZ0MsS0FBSzVFLEtBQUwsQ0FBVzRFLGlCQUFYLENBQTZCcEYsQ0FBN0IsQ0FBaEM7QUFDRCxHQW5ad0I7QUFvWnpCcUYsRUFBQUEsOEJBQThCLEVBQUUsU0FBU0EsOEJBQVQsQ0FBd0NyRixDQUF4QyxFQUEyQztBQUN6RSxTQUFLdUUsa0JBQUwsR0FBMEIsSUFBMUI7QUFDQSxTQUFLL0QsS0FBTCxDQUFXOEUsaUJBQVgsSUFBZ0MsS0FBSzlFLEtBQUwsQ0FBVzhFLGlCQUFYLENBQTZCdEYsQ0FBN0IsQ0FBaEM7QUFDRDtBQXZad0IsQ0FBM0I7QUF5WkEsSUFBSXVGLGVBQWUsR0FBRztBQUNwQkMsRUFBQUEsS0FBSyxFQUFFbkc7QUFEYSxDQUF0QjtBQUdBLElBQUlvRyxRQUFRLEdBQUdGLGVBQWY7QUFDQWpILE9BQU8sQ0FBQ0UsT0FBUixHQUFrQmlILFFBQWxCO0FBQ0FDLE1BQU0sQ0FBQ3BILE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9EaW1lbnNpb25zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vZXhwb3J0cy9EaW1lbnNpb25zXCIpKTtcblxudmFyIF9maW5kTm9kZUhhbmRsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL2V4cG9ydHMvZmluZE5vZGVIYW5kbGVcIikpO1xuXG52YXIgX2ludmFyaWFudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSk7XG5cbnZhciBfUGxhdGZvcm0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9leHBvcnRzL1BsYXRmb3JtXCIpKTtcblxudmFyIF9UZXh0SW5wdXRTdGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1RleHRJbnB1dFN0YXRlXCIpKTtcblxudmFyIF9VSU1hbmFnZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9leHBvcnRzL1VJTWFuYWdlclwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTmljb2xhcyBHYWxsYWdoZXIuXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4vKipcbiAqIE1peGluIHRoYXQgY2FuIGJlIGludGVncmF0ZWQgaW4gb3JkZXIgdG8gaGFuZGxlIHNjcm9sbGluZyB0aGF0IHBsYXlzIHdlbGxcbiAqIHdpdGggYFJlc3BvbmRlckV2ZW50UGx1Z2luYC4gSW50ZWdyYXRlIHdpdGggeW91ciBwbGF0Zm9ybSBzcGVjaWZpYyBzY3JvbGxcbiAqIHZpZXdzLCBvciBldmVuIHlvdXIgY3VzdG9tIGJ1aWx0IChldmVyeS1mcmFtZSBhbmltYXRpbmcpIHNjcm9sbCB2aWV3cyBzbyB0aGF0XG4gKiBhbGwgb2YgdGhlc2Ugc3lzdGVtcyBwbGF5IHdlbGwgd2l0aCB0aGUgYFJlc3BvbmRlckV2ZW50UGx1Z2luYC5cbiAqXG4gKiBpT1Mgc2Nyb2xsIGV2ZW50IHRpbWluZyBudWFuY2VzOlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqXG4gKiBTY3JvbGxpbmcgd2l0aG91dCBib3VuY2luZywgaWYgeW91IHRvdWNoIGRvd246XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogMS4gYG9uTW9tZW50dW1TY3JvbGxCZWdpbmAgKHdoZW4gYW5pbWF0aW9uIGJlZ2lucyBhZnRlciBsZXR0aW5nIHVwKVxuICogICAgLi4uIHBoeXNpY2FsIHRvdWNoIHN0YXJ0cyAuLi5cbiAqIDIuIGBvblRvdWNoU3RhcnRDYXB0dXJlYCAgICh3aGVuIHlvdSBwcmVzcyBkb3duIHRvIHN0b3AgdGhlIHNjcm9sbClcbiAqIDMuIGBvblRvdWNoU3RhcnRgICAgICAgICAgIChzYW1lLCBidXQgYnViYmxlIHBoYXNlKVxuICogNC4gYG9uUmVzcG9uZGVyUmVsZWFzZWAgICAgKHdoZW4gbGlmdGluZyB1cCAtIHlvdSBjb3VsZCBwYXVzZSBmb3JldmVyIGJlZm9yZSAqIGxpZnRpbmcpXG4gKiA1LiBgb25Nb21lbnR1bVNjcm9sbEVuZGBcbiAqXG4gKlxuICogU2Nyb2xsaW5nIHdpdGggYm91bmNpbmcsIGlmIHlvdSB0b3VjaCBkb3duOlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIDEuIGBvbk1vbWVudHVtU2Nyb2xsQmVnaW5gICh3aGVuIGFuaW1hdGlvbiBiZWdpbnMgYWZ0ZXIgbGV0dGluZyB1cClcbiAqICAgIC4uLiBib3VuY2UgYmVnaW5zIC4uLlxuICogICAgLi4uIHNvbWUgdGltZSBlbGFwc2VzIC4uLlxuICogICAgLi4uIHBoeXNpY2FsIHRvdWNoIGR1cmluZyBib3VuY2UgLi4uXG4gKiAyLiBgb25Nb21lbnR1bVNjcm9sbEVuZGAgICAoTWFrZXMgbm8gc2Vuc2Ugd2h5IHRoaXMgb2NjdXJzIGZpcnN0IGR1cmluZyBib3VuY2UpXG4gKiAzLiBgb25Ub3VjaFN0YXJ0Q2FwdHVyZWAgICAoaW1tZWRpYXRlbHkgYWZ0ZXIgYG9uTW9tZW50dW1TY3JvbGxFbmRgKVxuICogNC4gYG9uVG91Y2hTdGFydGAgICAgICAgICAgKHNhbWUsIGJ1dCBidWJibGUgcGhhc2UpXG4gKiA1LiBgb25Ub3VjaEVuZGAgICAgICAgICAgICAoWW91IGNvdWxkIGhvbGQgdGhlIHRvdWNoIHN0YXJ0IGZvciBhIGxvbmcgdGltZSlcbiAqIDYuIGBvbk1vbWVudHVtU2Nyb2xsQmVnaW5gIChXaGVuIHJlbGVhc2luZyB0aGUgdmlldyBzdGFydHMgYm91bmNpbmcgYmFjaylcbiAqXG4gKiBTbyB3aGVuIHdlIHJlY2VpdmUgYW4gYG9uVG91Y2hTdGFydGAsIGhvdyBjYW4gd2UgdGVsbCBpZiB3ZSBhcmUgdG91Y2hpbmdcbiAqICpkdXJpbmcqIGFuIGFuaW1hdGlvbiAod2hpY2ggdGhlbiBjYXVzZXMgdGhlIGFuaW1hdGlvbiB0byBzdG9wKT8gVGhlIG9ubHkgd2F5XG4gKiB0byB0ZWxsIGlzIGlmIHRoZSBgdG91Y2hTdGFydGAgb2NjdXJyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlXG4gKiBgb25Nb21lbnR1bVNjcm9sbEVuZGAuXG4gKlxuICogVGhpcyBpcyBhYnN0cmFjdGVkIG91dCBmb3IgeW91LCBzbyB5b3UgY2FuIGp1c3QgY2FsbCB0aGlzLnNjcm9sbFJlc3BvbmRlcklzQW5pbWF0aW5nKCkgaWZcbiAqIG5lY2Vzc2FyeVxuICpcbiAqIGBTY3JvbGxSZXNwb25kZXJgIGFsc28gaW5jbHVkZXMgbG9naWMgZm9yIGJsdXJyaW5nIGEgY3VycmVudGx5IGZvY3VzZWQgaW5wdXRcbiAqIGlmIG9uZSBpcyBmb2N1c2VkIHdoaWxlIHNjcm9sbGluZy4gVGhlIGBTY3JvbGxSZXNwb25kZXJgIGlzIGEgbmF0dXJhbCBwbGFjZVxuICogdG8gcHV0IHRoaXMgbG9naWMgc2luY2UgaXQgY2FuIHN1cHBvcnQgbm90IGRpc21pc3NpbmcgdGhlIGtleWJvYXJkIHdoaWxlXG4gKiBzY3JvbGxpbmcsIHVubGVzcyBhIHJlY29nbml6ZWQgXCJ0YXBcIi1saWtlIGdlc3R1cmUgaGFzIG9jY3VycmVkLlxuICpcbiAqIFRoZSBwdWJsaWMgbGlmZWN5Y2xlIEFQSSBpbmNsdWRlcyBldmVudHMgZm9yIGtleWJvYXJkIGludGVyYWN0aW9uLCByZXNwb25kZXJcbiAqIGludGVyYWN0aW9uLCBhbmQgc2Nyb2xsaW5nIChhbW9uZyBvdGhlcnMpLiBUaGUga2V5Ym9hcmQgY2FsbGJhY2tzXG4gKiBgb25LZXlib2FyZFdpbGwvRGlkLypgIGFyZSAqZ2xvYmFsKiBldmVudHMsIGJ1dCBhcmUgaW52b2tlZCBvbiBzY3JvbGxcbiAqIHJlc3BvbmRlcidzIHByb3BzIHNvIHRoYXQgeW91IGNhbiBndWFyYW50ZWUgdGhhdCB0aGUgc2Nyb2xsIHJlc3BvbmRlcidzXG4gKiBpbnRlcm5hbCBzdGF0ZSBoYXMgYmVlbiB1cGRhdGVkIGFjY29yZGluZ2x5IChhbmQgZGV0ZXJtaW5pc3RpY2FsbHkpIGJ5XG4gKiB0aGUgdGltZSB0aGUgcHJvcHMgY2FsbGJhY2tzIGFyZSBpbnZva2UuIE90aGVyd2lzZSwgeW91IHdvdWxkIGFsd2F5cyB3b25kZXJcbiAqIGlmIHRoZSBzY3JvbGwgcmVzcG9uZGVyIGlzIGN1cnJlbnRseSBpbiBhIHN0YXRlIHdoZXJlIGl0IHJlY29nbml6ZXMgbmV3XG4gKiBrZXlib2FyZCBwb3NpdGlvbnMgZXRjLiBJZiBjb29yZGluYXRpbmcgc2Nyb2xsaW5nIHdpdGgga2V5Ym9hcmQgbW92ZW1lbnQsXG4gKiAqYWx3YXlzKiB1c2UgdGhlc2UgaG9va3MgaW5zdGVhZCBvZiBsaXN0ZW5pbmcgdG8geW91ciBvd24gZ2xvYmFsIGtleWJvYXJkXG4gKiBldmVudHMuXG4gKlxuICogUHVibGljIGtleWJvYXJkIGxpZmVjeWNsZSBBUEk6IChwcm9wcyBjYWxsYmFja3MpXG4gKlxuICogU3RhbmRhcmQgS2V5Ym9hcmQgQXBwZWFyYW5jZSBTZXF1ZW5jZTpcbiAqXG4gKiAgIHRoaXMucHJvcHMub25LZXlib2FyZFdpbGxTaG93XG4gKiAgIHRoaXMucHJvcHMub25LZXlib2FyZERpZFNob3dcbiAqXG4gKiBgb25TY3JvbGxSZXNwb25kZXJLZXlib2FyZERpc21pc3NlZGAgd2lsbCBiZSBpbnZva2VkIGlmIGFuIGFwcHJvcHJpYXRlXG4gKiB0YXAgaW5zaWRlIHRoZSBzY3JvbGwgcmVzcG9uZGVyJ3Mgc2Nyb2xsYWJsZSByZWdpb24gd2FzIHJlc3BvbnNpYmxlXG4gKiBmb3IgdGhlIGRpc21pc3NhbCBvZiB0aGUga2V5Ym9hcmQuIFRoZXJlIGFyZSBvdGhlciByZWFzb25zIHdoeSB0aGVcbiAqIGtleWJvYXJkIGNvdWxkIGJlIGRpc21pc3NlZC5cbiAqXG4gKiAgIHRoaXMucHJvcHMub25TY3JvbGxSZXNwb25kZXJLZXlib2FyZERpc21pc3NlZFxuICpcbiAqIFN0YW5kYXJkIEtleWJvYXJkIEhpZGUgU2VxdWVuY2U6XG4gKlxuICogICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRXaWxsSGlkZVxuICogICB0aGlzLnByb3BzLm9uS2V5Ym9hcmREaWRIaWRlXG4gKi9cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xudmFyIElTX0FOSU1BVElOR19UT1VDSF9TVEFSVF9USFJFU0hPTERfTVMgPSAxNjtcbnZhciBTY3JvbGxSZXNwb25kZXJNaXhpbiA9IHtcbiAgLy8gbWl4aW5zOiBbU3Vic2NyaWJhYmxlLk1peGluXSxcbiAgc2Nyb2xsUmVzcG9uZGVyTWl4aW5HZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIHNjcm9sbFJlc3BvbmRlck1peGluR2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc1RvdWNoaW5nOiBmYWxzZSxcbiAgICAgIGxhc3RNb21lbnR1bVNjcm9sbEJlZ2luVGltZTogMCxcbiAgICAgIGxhc3RNb21lbnR1bVNjcm9sbEVuZFRpbWU6IDAsXG4gICAgICAvLyBSZXNldCB0byBmYWxzZSBldmVyeSB0aW1lIGJlY29tZXMgcmVzcG9uZGVyLiBUaGlzIGlzIHVzZWQgdG86XG4gICAgICAvLyAtIERldGVybWluZSBpZiB0aGUgc2Nyb2xsIHZpZXcgaGFzIGJlZW4gc2Nyb2xsZWQgYW5kIHRoZXJlZm9yZSBzaG91bGRcbiAgICAgIC8vIHJlZnVzZSB0byBnaXZlIHVwIGl0cyByZXNwb25kZXIgbG9jay5cbiAgICAgIC8vIC0gRGV0ZXJtaW5lIGlmIHJlbGVhc2luZyBzaG91bGQgZGlzbWlzcyB0aGUga2V5Ym9hcmQgd2hlbiB3ZSBhcmUgaW5cbiAgICAgIC8vIHRhcC10by1kaXNtaXNzIG1vZGUgKCF0aGlzLnByb3BzLmtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMpLlxuICAgICAgb2JzZXJ2ZWRTY3JvbGxTaW5jZUJlY29taW5nUmVzcG9uZGVyOiBmYWxzZSxcbiAgICAgIGJlY2FtZVJlc3BvbmRlcldoaWxlQW5pbWF0aW5nOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uU2Nyb2xsYCBldmVudC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbFNob3VsZFNldFJlc3BvbmRlcjogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVySGFuZGxlU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmlzVG91Y2hpbmc7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1lcmVseSB0b3VjaCBzdGFydGluZyBpcyBub3Qgc3VmZmljaWVudCBmb3IgYSBzY3JvbGwgdmlldyB0byBiZWNvbWUgdGhlXG4gICAqIHJlc3BvbmRlci4gQmVpbmcgdGhlIFwicmVzcG9uZGVyXCIgbWVhbnMgdGhhdCB0aGUgdmVyeSBuZXh0IHRvdWNoIG1vdmUvZW5kXG4gICAqIGV2ZW50IHdpbGwgcmVzdWx0IGluIGFuIGFjdGlvbi9tb3ZlbWVudC5cbiAgICpcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcmAgZXZlbnQuXG4gICAqXG4gICAqIGBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyYCBpcyB1c2VkIHdoZW4gdGhlIG5leHQgbW92ZS9lbmQgd2lsbCB0cmlnZ2VyXG4gICAqIHNvbWUgVUkgbW92ZW1lbnQvYWN0aW9uLCBidXQgd2hlbiB5b3Ugd2FudCB0byB5aWVsZCBwcmlvcml0eSB0byB2aWV3c1xuICAgKiBuZXN0ZWQgaW5zaWRlIG9mIHRoZSB2aWV3LlxuICAgKlxuICAgKiBUaGVyZSBtYXkgYmUgc29tZSBjYXNlcyB3aGVyZSBzY3JvbGwgdmlld3MgYWN0dWFsbHkgc2hvdWxkIHJldHVybiBgdHJ1ZWBcbiAgICogZnJvbSBgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcmA6IEFueSB0aW1lIHdlIGFyZSBkZXRlY3RpbmcgYSBzdGFuZGFyZCB0YXBcbiAgICogdGhhdCBnaXZlcyBwcmlvcml0eSB0byBuZXN0ZWQgdmlld3MuXG4gICAqXG4gICAqIC0gSWYgYSBzaW5nbGUgdGFwIG9uIHRoZSBzY3JvbGwgdmlldyB0cmlnZ2VycyBhbiBhY3Rpb24gc3VjaCBhc1xuICAgKiAgIHJlY2VudGVyaW5nIGEgbWFwIHN0eWxlIHZpZXcgeWV0IHdhbnRzIHRvIGdpdmUgcHJpb3JpdHkgdG8gaW50ZXJhY3Rpb25cbiAgICogICB2aWV3cyBpbnNpZGUgKHN1Y2ggYXMgZHJvcHBlZCBwaW5zIG9yIGxhYmVscyksIHRoZW4gd2Ugd291bGQgcmV0dXJuIHRydWVcbiAgICogICBmcm9tIHRoaXMgbWV0aG9kIHdoZW4gdGhlcmUgaXMgYSBzaW5nbGUgdG91Y2guXG4gICAqXG4gICAqIC0gU2ltaWxhciB0byB0aGUgcHJldmlvdXMgY2FzZSwgaWYgYSB0d28gZmluZ2VyIFwidGFwXCIgc2hvdWxkIHRyaWdnZXIgYVxuICAgKiAgIHpvb20sIHdlIHdvdWxkIGNoZWNrIHRoZSBgdG91Y2hlc2AgY291bnQsIGFuZCBpZiBgPj0gMmAsIHdlIHdvdWxkIHJldHVyblxuICAgKiAgIHRydWUuXG4gICAqXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlcjogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVySGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXIoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGVyZSBhcmUgdGltZXMgd2hlbiB0aGUgc2Nyb2xsIHZpZXcgd2FudHMgdG8gYmVjb21lIHRoZSByZXNwb25kZXJcbiAgICogKG1lYW5pbmcgcmVzcG9uZCB0byB0aGUgbmV4dCBpbW1lZGlhdGUgYHRvdWNoU3RhcnQvdG91Y2hFbmRgKSwgaW4gYSB3YXlcbiAgICogdGhhdCAqZG9lc24ndCogZ2l2ZSBwcmlvcml0eSB0byBuZXN0ZWQgdmlld3MgKGhlbmNlIHRoZSBjYXB0dXJlIHBoYXNlKTpcbiAgICpcbiAgICogLSBDdXJyZW50bHkgYW5pbWF0aW5nLlxuICAgKiAtIFRhcHBpbmcgYW55d2hlcmUgdGhhdCBpcyBub3QgdGhlIGZvY3VzZWQgaW5wdXQsIHdoaWxlIHRoZSBrZXlib2FyZCBpc1xuICAgKiAgIHVwICh3aGljaCBzaG91bGQgZGlzbWlzcyB0aGUga2V5Ym9hcmQpLlxuICAgKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZWAgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IGZ1bmN0aW9uIHNjcm9sbFJlc3BvbmRlckhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZShlKSB7XG4gICAgLy8gRmlyc3Qgc2VlIGlmIHdlIHdhbnQgdG8gZWF0IHRhcHMgd2hpbGUgdGhlIGtleWJvYXJkIGlzIHVwXG4gICAgLy8gdmFyIGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQgPSBUZXh0SW5wdXRTdGF0ZS5jdXJyZW50bHlGb2N1c2VkRmllbGQoKTtcbiAgICAvLyBpZiAoIXRoaXMucHJvcHMua2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyAmJlxuICAgIC8vICAgY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCAhPSBudWxsICYmXG4gICAgLy8gICBlLnRhcmdldCAhPT0gY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCkge1xuICAgIC8vICAgcmV0dXJuIHRydWU7XG4gICAgLy8gfVxuICAgIHJldHVybiB0aGlzLnNjcm9sbFJlc3BvbmRlcklzQW5pbWF0aW5nKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uUmVzcG9uZGVyUmVqZWN0YCBldmVudC5cbiAgICpcbiAgICogU29tZSBvdGhlciBlbGVtZW50IGlzIG5vdCB5aWVsZGluZyBpdHMgcm9sZSBhcyByZXNwb25kZXIuIE5vcm1hbGx5LCB3ZSdkXG4gICAqIGp1c3QgZGlzYWJsZSB0aGUgYFVJU2Nyb2xsVmlld2AsIGJ1dCBhIHRvdWNoIGhhcyBhbHJlYWR5IGJlZ2FuIG9uIGl0LCB0aGVcbiAgICogYFVJU2Nyb2xsVmlld2Agd2lsbCBub3QgYWNjZXB0IGJlaW5nIGRpc2FibGVkIGFmdGVyIHRoYXQuIFRoZSBlYXNpZXN0XG4gICAqIHNvbHV0aW9uIGZvciBub3cgaXMgdG8gYWNjZXB0IHRoZSBsaW1pdGF0aW9uIG9mIGRpc2FsbG93aW5nIHRoaXNcbiAgICogYWx0b2dldGhlci4gVG8gaW1wcm92ZSB0aGlzLCBmaW5kIGEgd2F5IHRvIGRpc2FibGUgdGhlIGBVSVNjcm9sbFZpZXdgIGFmdGVyXG4gICAqIGEgdG91Y2ggaGFzIGFscmVhZHkgc3RhcnRlZC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlclJlamVjdDogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyUmVqZWN0KCkge1xuICAgICgwLCBfd2FybmluZy5kZWZhdWx0KShmYWxzZSwgXCJTY3JvbGxWaWV3IGRvZXNuJ3QgdGFrZSByZWplY3Rpb24gd2VsbCAtIHNjcm9sbHMgYW55d2F5XCIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXZSB3aWxsIGFsbG93IHRoZSBzY3JvbGwgdmlldyB0byBnaXZlIHVwIGl0cyBsb2NrIGlmZiBpdCBhY3F1aXJlZCB0aGUgbG9ja1xuICAgKiBkdXJpbmcgYW4gYW5pbWF0aW9uLiBUaGlzIGlzIGEgdmVyeSB1c2VmdWwgZGVmYXVsdCB0aGF0IGhhcHBlbnMgdG8gc2F0aXNmeVxuICAgKiBtYW55IGNvbW1vbiB1c2VyIGV4cGVyaWVuY2VzLlxuICAgKlxuICAgKiAtIFN0b3AgYSBzY3JvbGwgb24gdGhlIGxlZnQgZWRnZSwgdGhlbiB0dXJuIHRoYXQgaW50byBhbiBvdXRlciB2aWV3J3NcbiAgICogICBiYWNrc3dpcGUuXG4gICAqIC0gU3RvcCBhIHNjcm9sbCBtaWQtYm91bmNlIGF0IHRoZSB0b3AsIGNvbnRpbnVlIHB1bGxpbmcgdG8gaGF2ZSB0aGUgb3V0ZXJcbiAgICogICB2aWV3IGRpc21pc3MuXG4gICAqIC0gSG93ZXZlciwgd2l0aG91dCBjYXRjaGluZyB0aGUgc2Nyb2xsIHZpZXcgbWlkLWJvdW5jZSAod2hpbGUgaXQgaXNcbiAgICogICBtb3Rpb25sZXNzKSwgaWYgeW91IGRyYWcgZmFyIGVub3VnaCBmb3IgdGhlIHNjcm9sbCB2aWV3IHRvIGJlY29tZVxuICAgKiAgIHJlc3BvbmRlciAoYW5kIHRoZXJlZm9yZSBkcmFnIHRoZSBzY3JvbGwgdmlldyBhIGJpdCksIGFueSBiYWNrc3dpcGVcbiAgICogICBuYXZpZ2F0aW9uIG9mIGEgc3dpcGUgZ2VzdHVyZSBoaWdoZXIgaW4gdGhlIHZpZXcgaGllcmFyY2h5LCBzaG91bGQgYmVcbiAgICogICByZWplY3RlZC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVRlcm1pbmF0aW9uUmVxdWVzdDogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVySGFuZGxlVGVybWluYXRpb25SZXF1ZXN0KCkge1xuICAgIHJldHVybiAhdGhpcy5zdGF0ZS5vYnNlcnZlZFNjcm9sbFNpbmNlQmVjb21pbmdSZXNwb25kZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uVG91Y2hFbmRgIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBlIEV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hFbmQ6IGZ1bmN0aW9uIHNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoRW5kKGUpIHtcbiAgICB2YXIgbmF0aXZlRXZlbnQgPSBlLm5hdGl2ZUV2ZW50O1xuICAgIHRoaXMuc3RhdGUuaXNUb3VjaGluZyA9IG5hdGl2ZUV2ZW50LnRvdWNoZXMubGVuZ3RoICE9PSAwO1xuICAgIHRoaXMucHJvcHMub25Ub3VjaEVuZCAmJiB0aGlzLnByb3BzLm9uVG91Y2hFbmQoZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uUmVzcG9uZGVyUmVsZWFzZWAgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWxlYXNlOiBmdW5jdGlvbiBzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWxlYXNlKGUpIHtcbiAgICB0aGlzLnByb3BzLm9uUmVzcG9uZGVyUmVsZWFzZSAmJiB0aGlzLnByb3BzLm9uUmVzcG9uZGVyUmVsZWFzZShlKTsgLy8gQnkgZGVmYXVsdCBzY3JvbGwgdmlld3Mgd2lsbCB1bmZvY3VzIGEgdGV4dEZpZWxkXG4gICAgLy8gaWYgYW5vdGhlciB0b3VjaCBvY2N1cnMgb3V0c2lkZSBvZiBpdFxuXG4gICAgdmFyIGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQgPSBfVGV4dElucHV0U3RhdGUuZGVmYXVsdC5jdXJyZW50bHlGb2N1c2VkRmllbGQoKTtcblxuICAgIGlmICghdGhpcy5wcm9wcy5rZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzICYmIGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQgIT0gbnVsbCAmJiBlLnRhcmdldCAhPT0gY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCAmJiAhdGhpcy5zdGF0ZS5vYnNlcnZlZFNjcm9sbFNpbmNlQmVjb21pbmdSZXNwb25kZXIgJiYgIXRoaXMuc3RhdGUuYmVjYW1lUmVzcG9uZGVyV2hpbGVBbmltYXRpbmcpIHtcbiAgICAgIHRoaXMucHJvcHMub25TY3JvbGxSZXNwb25kZXJLZXlib2FyZERpc21pc3NlZCAmJiB0aGlzLnByb3BzLm9uU2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaXNtaXNzZWQoZSk7XG5cbiAgICAgIF9UZXh0SW5wdXRTdGF0ZS5kZWZhdWx0LmJsdXJUZXh0SW5wdXQoY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCk7XG4gICAgfVxuICB9LFxuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGw6IGZ1bmN0aW9uIHNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbChlKSB7XG4gICAgdGhpcy5zdGF0ZS5vYnNlcnZlZFNjcm9sbFNpbmNlQmVjb21pbmdSZXNwb25kZXIgPSB0cnVlO1xuICAgIHRoaXMucHJvcHMub25TY3JvbGwgJiYgdGhpcy5wcm9wcy5vblNjcm9sbChlKTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25SZXNwb25kZXJHcmFudGAgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJHcmFudDogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyR3JhbnQoZSkge1xuICAgIHRoaXMuc3RhdGUub2JzZXJ2ZWRTY3JvbGxTaW5jZUJlY29taW5nUmVzcG9uZGVyID0gZmFsc2U7XG4gICAgdGhpcy5wcm9wcy5vblJlc3BvbmRlckdyYW50ICYmIHRoaXMucHJvcHMub25SZXNwb25kZXJHcmFudChlKTtcbiAgICB0aGlzLnN0YXRlLmJlY2FtZVJlc3BvbmRlcldoaWxlQW5pbWF0aW5nID0gdGhpcy5zY3JvbGxSZXNwb25kZXJJc0FuaW1hdGluZygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVbmZvcnR1bmF0ZWx5LCBgb25TY3JvbGxCZWdpbkRyYWdgIGFsc28gZmlyZXMgd2hlbiAqc3RvcHBpbmcqIHRoZSBzY3JvbGxcbiAgICogYW5pbWF0aW9uLCBhbmQgdGhlcmUncyBub3QgYW4gZWFzeSB3YXkgdG8gZGlzdGluZ3Vpc2ggYSBkcmFnIHZzLiBzdG9wcGluZ1xuICAgKiBtb21lbnR1bS5cbiAgICpcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25TY3JvbGxCZWdpbkRyYWdgIGV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlU2Nyb2xsQmVnaW5EcmFnOiBmdW5jdGlvbiBzY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxCZWdpbkRyYWcoZSkge1xuICAgIHRoaXMucHJvcHMub25TY3JvbGxCZWdpbkRyYWcgJiYgdGhpcy5wcm9wcy5vblNjcm9sbEJlZ2luRHJhZyhlKTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25TY3JvbGxFbmREcmFnYCBldmVudC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEVuZERyYWc6IGZ1bmN0aW9uIHNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEVuZERyYWcoZSkge1xuICAgIHRoaXMucHJvcHMub25TY3JvbGxFbmREcmFnICYmIHRoaXMucHJvcHMub25TY3JvbGxFbmREcmFnKGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvbk1vbWVudHVtU2Nyb2xsQmVnaW5gIGV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxCZWdpbjogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxCZWdpbihlKSB7XG4gICAgdGhpcy5zdGF0ZS5sYXN0TW9tZW50dW1TY3JvbGxCZWdpblRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMucHJvcHMub25Nb21lbnR1bVNjcm9sbEJlZ2luICYmIHRoaXMucHJvcHMub25Nb21lbnR1bVNjcm9sbEJlZ2luKGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvbk1vbWVudHVtU2Nyb2xsRW5kYCBldmVudC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZU1vbWVudHVtU2Nyb2xsRW5kOiBmdW5jdGlvbiBzY3JvbGxSZXNwb25kZXJIYW5kbGVNb21lbnR1bVNjcm9sbEVuZChlKSB7XG4gICAgdGhpcy5zdGF0ZS5sYXN0TW9tZW50dW1TY3JvbGxFbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxFbmQgJiYgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsRW5kKGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblRvdWNoU3RhcnRgIGV2ZW50LlxuICAgKlxuICAgKiBTaW5jZSB3ZSBrbm93IHRoYXQgdGhlIGBTaW1wbGVFdmVudFBsdWdpbmAgb2NjdXJzIGxhdGVyIGluIHRoZSBwbHVnaW5cbiAgICogb3JkZXIsIGFmdGVyIGBSZXNwb25kZXJFdmVudFBsdWdpbmAsIHdlIGNhbiBkZXRlY3QgdGhhdCB3ZSB3ZXJlICpub3QqXG4gICAqIHBlcm1pdHRlZCB0byBiZSB0aGUgcmVzcG9uZGVyIChwcmVzdW1hYmx5IGJlY2F1c2UgYSBjb250YWluZWQgdmlldyBiZWNhbWVcbiAgICogcmVzcG9uZGVyKS4gVGhlIGBvblJlc3BvbmRlclJlamVjdGAgd29uJ3QgZmlyZSBpbiB0aGF0IGNhc2UgLSBpdCBvbmx5XG4gICAqIGZpcmVzIHdoZW4gYSAqY3VycmVudCogcmVzcG9uZGVyIHJlamVjdHMgb3VyIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGUgVG91Y2ggU3RhcnQgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbiBzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaFN0YXJ0KGUpIHtcbiAgICB0aGlzLnN0YXRlLmlzVG91Y2hpbmcgPSB0cnVlO1xuICAgIHRoaXMucHJvcHMub25Ub3VjaFN0YXJ0ICYmIHRoaXMucHJvcHMub25Ub3VjaFN0YXJ0KGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblRvdWNoTW92ZWAgZXZlbnQuXG4gICAqXG4gICAqIFNpbmNlIHdlIGtub3cgdGhhdCB0aGUgYFNpbXBsZUV2ZW50UGx1Z2luYCBvY2N1cnMgbGF0ZXIgaW4gdGhlIHBsdWdpblxuICAgKiBvcmRlciwgYWZ0ZXIgYFJlc3BvbmRlckV2ZW50UGx1Z2luYCwgd2UgY2FuIGRldGVjdCB0aGF0IHdlIHdlcmUgKm5vdCpcbiAgICogcGVybWl0dGVkIHRvIGJlIHRoZSByZXNwb25kZXIgKHByZXN1bWFibHkgYmVjYXVzZSBhIGNvbnRhaW5lZCB2aWV3IGJlY2FtZVxuICAgKiByZXNwb25kZXIpLiBUaGUgYG9uUmVzcG9uZGVyUmVqZWN0YCB3b24ndCBmaXJlIGluIHRoYXQgY2FzZSAtIGl0IG9ubHlcbiAgICogZmlyZXMgd2hlbiBhICpjdXJyZW50KiByZXNwb25kZXIgcmVqZWN0cyBvdXIgcmVxdWVzdC5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZSBUb3VjaCBTdGFydCBldmVudC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoTW92ZTogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hNb3ZlKGUpIHtcbiAgICB0aGlzLnByb3BzLm9uVG91Y2hNb3ZlICYmIHRoaXMucHJvcHMub25Ub3VjaE1vdmUoZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIGZ1bmN0aW9uIGZvciB0aGlzIGNsYXNzIHRoYXQgbGV0cyB1cyBxdWlja2x5IGRldGVybWluZSBpZiB0aGVcbiAgICogdmlldyBpcyBjdXJyZW50bHkgYW5pbWF0aW5nLiBUaGlzIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgdG8ga25vdyB3aGVuXG4gICAqIGEgdG91Y2ggaGFzIGp1c3Qgc3RhcnRlZCBvciBlbmRlZC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlcklzQW5pbWF0aW5nOiBmdW5jdGlvbiBzY3JvbGxSZXNwb25kZXJJc0FuaW1hdGluZygpIHtcbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgdGltZVNpbmNlTGFzdE1vbWVudHVtU2Nyb2xsRW5kID0gbm93IC0gdGhpcy5zdGF0ZS5sYXN0TW9tZW50dW1TY3JvbGxFbmRUaW1lO1xuICAgIHZhciBpc0FuaW1hdGluZyA9IHRpbWVTaW5jZUxhc3RNb21lbnR1bVNjcm9sbEVuZCA8IElTX0FOSU1BVElOR19UT1VDSF9TVEFSVF9USFJFU0hPTERfTVMgfHwgdGhpcy5zdGF0ZS5sYXN0TW9tZW50dW1TY3JvbGxFbmRUaW1lIDwgdGhpcy5zdGF0ZS5sYXN0TW9tZW50dW1TY3JvbGxCZWdpblRpbWU7XG4gICAgcmV0dXJuIGlzQW5pbWF0aW5nO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBub2RlIHRoYXQgcmVwcmVzZW50cyBuYXRpdmUgdmlldyB0aGF0IGNhbiBiZSBzY3JvbGxlZC5cbiAgICogQ29tcG9uZW50cyBjYW4gcGFzcyB3aGF0IG5vZGUgdG8gdXNlIGJ5IGRlZmluaW5nIGEgYGdldFNjcm9sbGFibGVOb2RlYFxuICAgKiBmdW5jdGlvbiBvdGhlcndpc2UgYHRoaXNgIGlzIHVzZWQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJHZXRTY3JvbGxhYmxlTm9kZTogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVyR2V0U2Nyb2xsYWJsZU5vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsYWJsZU5vZGUgPyB0aGlzLmdldFNjcm9sbGFibGVOb2RlKCkgOiAoMCwgX2ZpbmROb2RlSGFuZGxlLmRlZmF1bHQpKHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBIGhlbHBlciBmdW5jdGlvbiB0byBzY3JvbGwgdG8gYSBzcGVjaWZpYyBwb2ludCBpbiB0aGUgc2Nyb2xsdmlldy5cbiAgICogVGhpcyBpcyBjdXJyZW50bHkgdXNlZCB0byBoZWxwIGZvY3VzIG9uIGNoaWxkIHRleHR2aWV3cywgYnV0IGNhbiBhbHNvXG4gICAqIGJlIHVzZWQgdG8gcXVpY2tseSBzY3JvbGwgdG8gYW55IGVsZW1lbnQgd2Ugd2FudCB0byBmb2N1cy4gU3ludGF4OlxuICAgKlxuICAgKiBzY3JvbGxSZXNwb25kZXJTY3JvbGxUbyhvcHRpb25zOiB7eDogbnVtYmVyID0gMDsgeTogbnVtYmVyID0gMDsgYW5pbWF0ZWQ6IGJvb2xlYW4gPSB0cnVlfSlcbiAgICpcbiAgICogTm90ZTogVGhlIHdlaXJkIGFyZ3VtZW50IHNpZ25hdHVyZSBpcyBkdWUgdG8gdGhlIGZhY3QgdGhhdCwgZm9yIGhpc3RvcmljYWwgcmVhc29ucyxcbiAgICogdGhlIGZ1bmN0aW9uIGFsc28gYWNjZXB0cyBzZXBhcmF0ZSBhcmd1bWVudHMgYXMgYXMgYWx0ZXJuYXRpdmUgdG8gdGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgKiBUaGlzIGlzIGRlcHJlY2F0ZWQgZHVlIHRvIGFtYmlndWl0eSAoeSBiZWZvcmUgeCksIGFuZCBTSE9VTEQgTk9UIEJFIFVTRUQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJTY3JvbGxUbzogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG8oeCwgeSwgYW5pbWF0ZWQpIHtcbiAgICBpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2BzY3JvbGxSZXNwb25kZXJTY3JvbGxUbyh4LCB5LCBhbmltYXRlZClgIGlzIGRlcHJlY2F0ZWQuIFVzZSBgc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG8oe3g6IDUsIHk6IDUsIGFuaW1hdGVkOiB0cnVlfSlgIGluc3RlYWQuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcmVmID0geCB8fCBlbXB0eU9iamVjdDtcblxuICAgICAgeCA9IF9yZWYueDtcbiAgICAgIHkgPSBfcmVmLnk7XG4gICAgICBhbmltYXRlZCA9IF9yZWYuYW5pbWF0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIG5vZGUgPSB0aGlzLnNjcm9sbFJlc3BvbmRlckdldFNjcm9sbGFibGVOb2RlKCk7XG4gICAgdmFyIGxlZnQgPSB4IHx8IDA7XG4gICAgdmFyIHRvcCA9IHkgfHwgMDtcblxuICAgIGlmICh0eXBlb2Ygbm9kZS5zY3JvbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG5vZGUuc2Nyb2xsKHtcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgIGJlaGF2aW9yOiAhYW5pbWF0ZWQgPyAnYXV0bycgOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc2Nyb2xsTGVmdCA9IGxlZnQ7XG4gICAgICBub2RlLnNjcm9sbFRvcCA9IHRvcDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIHpvb20gdG8gYSBzcGVjaWZpYyByZWN0IGluIHRoZSBzY3JvbGx2aWV3LiBUaGUgYXJndW1lbnQgaGFzIHRoZSBzaGFwZVxuICAgKiB7eDogbnVtYmVyOyB5OiBudW1iZXI7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyOyBhbmltYXRlZDogYm9vbGVhbiA9IHRydWV9XG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlclpvb21UbzogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVyWm9vbVRvKHJlY3QsIGFuaW1hdGVkKSAvLyBkZXByZWNhdGVkLCBwdXQgdGhpcyBpbnNpZGUgdGhlIHJlY3QgYXJndW1lbnQgaW5zdGVhZFxuICB7XG4gICAgaWYgKF9QbGF0Zm9ybS5kZWZhdWx0Lk9TICE9PSAnaW9zJykge1xuICAgICAgKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkoJ3pvb21Ub1JlY3QgaXMgbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyB0aGUgc2Nyb2xsIGluZGljYXRvcnMgbW9tZW50YXJpbHkuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJGbGFzaFNjcm9sbEluZGljYXRvcnM6IGZ1bmN0aW9uIHNjcm9sbFJlc3BvbmRlckZsYXNoU2Nyb2xsSW5kaWNhdG9ycygpIHt9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBhcyB0aGUgY2FsbGJhY2sgdG8gb25Gb2N1cyBpbiBhIFRleHRJbnB1dHMnXG4gICAqIHBhcmVudCB2aWV3LiBOb3RlIHRoYXQgYW55IG1vZHVsZSB1c2luZyB0aGlzIG1peGluIG5lZWRzIHRvIHJldHVyblxuICAgKiB0aGUgcGFyZW50IHZpZXcncyByZWYgaW4gZ2V0U2Nyb2xsVmlld1JlZigpIGluIG9yZGVyIHRvIHVzZSB0aGlzIG1ldGhvZC5cbiAgICogQHBhcmFtIHthbnl9IG5vZGVIYW5kbGUgVGhlIFRleHRJbnB1dCBub2RlIGhhbmRsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gYWRkaXRpb25hbE9mZnNldCBUaGUgc2Nyb2xsIHZpZXcncyB0b3AgXCJjb250ZW50SW5zZXRcIi5cbiAgICogICAgICAgIERlZmF1bHQgaXMgMC5cbiAgICogQHBhcmFtIHtib29sfSBwcmV2ZW50TmVnYXRpdmVTY3JvbGxpbmcgV2hldGhlciB0byBhbGxvdyBwdWxsaW5nIHRoZSBjb250ZW50XG4gICAqICAgICAgICBkb3duIHRvIG1ha2UgaXQgbWVldCB0aGUga2V5Ym9hcmQncyB0b3AuIERlZmF1bHQgaXMgZmFsc2UuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJTY3JvbGxOYXRpdmVIYW5kbGVUb0tleWJvYXJkOiBmdW5jdGlvbiBzY3JvbGxSZXNwb25kZXJTY3JvbGxOYXRpdmVIYW5kbGVUb0tleWJvYXJkKG5vZGVIYW5kbGUsIGFkZGl0aW9uYWxPZmZzZXQsIHByZXZlbnROZWdhdGl2ZVNjcm9sbE9mZnNldCkge1xuICAgIHRoaXMuYWRkaXRpb25hbFNjcm9sbE9mZnNldCA9IGFkZGl0aW9uYWxPZmZzZXQgfHwgMDtcbiAgICB0aGlzLnByZXZlbnROZWdhdGl2ZVNjcm9sbE9mZnNldCA9ICEhcHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0O1xuXG4gICAgX1VJTWFuYWdlci5kZWZhdWx0Lm1lYXN1cmVMYXlvdXQobm9kZUhhbmRsZSwgKDAsIF9maW5kTm9kZUhhbmRsZS5kZWZhdWx0KSh0aGlzLmdldElubmVyVmlld05vZGUoKSksIHRoaXMuc2Nyb2xsUmVzcG9uZGVyVGV4dElucHV0Rm9jdXNFcnJvciwgdGhpcy5zY3JvbGxSZXNwb25kZXJJbnB1dE1lYXN1cmVBbmRTY3JvbGxUb0tleWJvYXJkKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGNhbGN1bGF0aW9ucyBwZXJmb3JtZWQgaGVyZSBhc3N1bWUgdGhlIHNjcm9sbCB2aWV3IHRha2VzIHVwIHRoZSBlbnRpcmVcbiAgICogc2NyZWVuIC0gZXZlbiBpZiBoYXMgc29tZSBjb250ZW50IGluc2V0LiBXZSB0aGVuIG1lYXN1cmUgdGhlIG9mZnNldHMgb2YgdGhlXG4gICAqIGtleWJvYXJkLCBhbmQgY29tcGVuc2F0ZSBib3RoIGZvciB0aGUgc2Nyb2xsIHZpZXcncyBcImNvbnRlbnRJbnNldFwiLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdCBQb3NpdGlvbiBvZiBpbnB1dCB3LnIudC4gdGFibGUgdmlldy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCBQb3NpdGlvbiBvZiBpbnB1dCB3LnIudC4gdGFibGUgdmlldy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFdpZHRoIG9mIHRoZSB0ZXh0IGlucHV0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IEhlaWdodCBvZiB0aGUgdGV4dCBpbnB1dC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlcklucHV0TWVhc3VyZUFuZFNjcm9sbFRvS2V5Ym9hcmQ6IGZ1bmN0aW9uIHNjcm9sbFJlc3BvbmRlcklucHV0TWVhc3VyZUFuZFNjcm9sbFRvS2V5Ym9hcmQobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIGtleWJvYXJkU2NyZWVuWSA9IF9EaW1lbnNpb25zLmRlZmF1bHQuZ2V0KCd3aW5kb3cnKS5oZWlnaHQ7XG5cbiAgICBpZiAodGhpcy5rZXlib2FyZFdpbGxPcGVuVG8pIHtcbiAgICAgIGtleWJvYXJkU2NyZWVuWSA9IHRoaXMua2V5Ym9hcmRXaWxsT3BlblRvLmVuZENvb3JkaW5hdGVzLnNjcmVlblk7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbE9mZnNldFkgPSB0b3AgLSBrZXlib2FyZFNjcmVlblkgKyBoZWlnaHQgKyB0aGlzLmFkZGl0aW9uYWxTY3JvbGxPZmZzZXQ7IC8vIEJ5IGRlZmF1bHQsIHRoaXMgY2FuIHNjcm9sbCB3aXRoIG5lZ2F0aXZlIG9mZnNldCwgcHVsbGluZyB0aGUgY29udGVudFxuICAgIC8vIGRvd24gc28gdGhhdCB0aGUgdGFyZ2V0IGNvbXBvbmVudCdzIGJvdHRvbSBtZWV0cyB0aGUga2V5Ym9hcmQncyB0b3AuXG4gICAgLy8gSWYgcmVxdWVzdGVkIG90aGVyd2lzZSwgY2FwIHRoZSBvZmZzZXQgYXQgMCBtaW5pbXVtIHRvIGF2b2lkIGNvbnRlbnRcbiAgICAvLyBzaGlmdGluZyBkb3duLlxuXG4gICAgaWYgKHRoaXMucHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0KSB7XG4gICAgICBzY3JvbGxPZmZzZXRZID0gTWF0aC5tYXgoMCwgc2Nyb2xsT2Zmc2V0WSk7XG4gICAgfVxuXG4gICAgdGhpcy5zY3JvbGxSZXNwb25kZXJTY3JvbGxUbyh7XG4gICAgICB4OiAwLFxuICAgICAgeTogc2Nyb2xsT2Zmc2V0WSxcbiAgICAgIGFuaW1hdGVkOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5hZGRpdGlvbmFsT2Zmc2V0ID0gMDtcbiAgICB0aGlzLnByZXZlbnROZWdhdGl2ZVNjcm9sbE9mZnNldCA9IGZhbHNlO1xuICB9LFxuICBzY3JvbGxSZXNwb25kZXJUZXh0SW5wdXRGb2N1c0Vycm9yOiBmdW5jdGlvbiBzY3JvbGxSZXNwb25kZXJUZXh0SW5wdXRGb2N1c0Vycm9yKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBtZWFzdXJpbmcgdGV4dCBmaWVsZDogJywgZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBjb21wb25lbnRXaWxsTW91bnRgIGlzIHRoZSBjbG9zZXN0IHRoaW5nIHRvIGEgIHN0YW5kYXJkIFwiY29uc3RydWN0b3JcIiBmb3JcbiAgICogUmVhY3QgY29tcG9uZW50cy5cbiAgICpcbiAgICogVGhlIGBrZXlib2FyZFdpbGxTaG93YCBpcyBjYWxsZWQgYmVmb3JlIGlucHV0IGZvY3VzLlxuICAgKi9cbiAgVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmtleWJvYXJkV2lsbE9wZW5UbyA9IG51bGw7XG4gICAgdGhpcy5hZGRpdGlvbmFsU2Nyb2xsT2Zmc2V0ID0gMDsgLy8gdGhpcy5hZGRMaXN0ZW5lck9uKFJDVERldmljZUV2ZW50RW1pdHRlciwgJ2tleWJvYXJkV2lsbFNob3cnLCB0aGlzLnNjcm9sbFJlc3BvbmRlcktleWJvYXJkV2lsbFNob3cpO1xuICAgIC8vIHRoaXMuYWRkTGlzdGVuZXJPbihSQ1REZXZpY2VFdmVudEVtaXR0ZXIsICdrZXlib2FyZFdpbGxIaWRlJywgdGhpcy5zY3JvbGxSZXNwb25kZXJLZXlib2FyZFdpbGxIaWRlKTtcbiAgICAvLyB0aGlzLmFkZExpc3RlbmVyT24oUkNURGV2aWNlRXZlbnRFbWl0dGVyLCAna2V5Ym9hcmREaWRTaG93JywgdGhpcy5zY3JvbGxSZXNwb25kZXJLZXlib2FyZERpZFNob3cpO1xuICAgIC8vIHRoaXMuYWRkTGlzdGVuZXJPbihSQ1REZXZpY2VFdmVudEVtaXR0ZXIsICdrZXlib2FyZERpZEhpZGUnLCB0aGlzLnNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkSGlkZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdhcm5pbmcsIHRoaXMgbWF5IGJlIGNhbGxlZCBzZXZlcmFsIHRpbWVzIGZvciBhIHNpbmdsZSBrZXlib2FyZCBvcGVuaW5nLlxuICAgKiBJdCdzIGJlc3QgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGluIHRoaXMgbWV0aG9kIGFuZCB0aGVuIHRha2UgYW55IGFjdGlvblxuICAgKiBhdCBhIGxhdGVyIHBvaW50IChlaXRoZXIgaW4gYGtleWJvYXJkRGlkU2hvd2Agb3Igb3RoZXIpLlxuICAgKlxuICAgKiBIZXJlJ3MgdGhlIG9yZGVyIHRoYXQgZXZlbnRzIG9jY3VyIGluOlxuICAgKiAtIGZvY3VzXG4gICAqIC0gd2lsbFNob3cge3N0YXJ0Q29vcmRpbmF0ZXMsIGVuZENvb3JkaW5hdGVzfSBzZXZlcmFsIHRpbWVzXG4gICAqIC0gZGlkU2hvdyBzZXZlcmFsIHRpbWVzXG4gICAqIC0gYmx1clxuICAgKiAtIHdpbGxIaWRlIHtzdGFydENvb3JkaW5hdGVzLCBlbmRDb29yZGluYXRlc30gc2V2ZXJhbCB0aW1lc1xuICAgKiAtIGRpZEhpZGUgc2V2ZXJhbCB0aW1lc1xuICAgKlxuICAgKiBUaGUgYFNjcm9sbFJlc3BvbmRlcmAgcHJvdmlkZXNNb2R1bGUgY2FsbGJhY2tzIGZvciBlYWNoIG9mIHRoZXNlIGV2ZW50cy5cbiAgICogRXZlbiB0aG91Z2ggYW55IHVzZXIgY291bGQgaGF2ZSBlYXNpbHkgbGlzdGVuZWQgdG8ga2V5Ym9hcmQgZXZlbnRzXG4gICAqIHRoZW1zZWx2ZXMsIHVzaW5nIHRoZXNlIGBwcm9wc2AgY2FsbGJhY2tzIGVuc3VyZXMgdGhhdCBvcmRlcmluZyBvZiBldmVudHNcbiAgICogaXMgY29uc2lzdGVudCAtIGFuZCBub3QgZGVwZW5kZW50IG9uIHRoZSBvcmRlciB0aGF0IHRoZSBrZXlib2FyZCBldmVudHMgYXJlXG4gICAqIHN1YnNjcmliZWQgdG8uIFRoaXMgbWF0dGVycyB3aGVuIHRlbGxpbmcgdGhlIHNjcm9sbCB2aWV3IHRvIHNjcm9sbCB0byB3aGVyZVxuICAgKiB0aGUga2V5Ym9hcmQgaXMgaGVhZGVkIC0gdGhlIHNjcm9sbCByZXNwb25kZXIgYmV0dGVyIGhhdmUgYmVlbiBub3RpZmllZCBvZlxuICAgKiB0aGUga2V5Ym9hcmQgZGVzdGluYXRpb24gYmVmb3JlIGJlaW5nIGluc3RydWN0ZWQgdG8gc2Nyb2xsIHRvIHdoZXJlIHRoZVxuICAgKiBrZXlib2FyZCB3aWxsIGJlLiBTdGljayB0byB0aGUgYFNjcm9sbFJlc3BvbmRlcmAgY2FsbGJhY2tzLCBhbmQgZXZlcnl0aGluZ1xuICAgKiB3aWxsIHdvcmsuXG4gICAqXG4gICAqIFdBUk5JTkc6IFRoZXNlIGNhbGxiYWNrcyB3aWxsIGZpcmUgZXZlbiBpZiBhIGtleWJvYXJkIGlzIGRpc3BsYXllZCBpbiBhXG4gICAqIGRpZmZlcmVudCBuYXZpZ2F0aW9uIHBhbmUuIEZpbHRlciBvdXQgdGhlIGV2ZW50cyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAgICogcmVsZXZhbnQgdG8geW91LiAoRm9yIGV4YW1wbGUsIG9ubHkgaWYgeW91IHJlY2VpdmUgdGhlc2UgY2FsbGJhY2tzIGFmdGVyXG4gICAqIHlvdSBoYWQgZXhwbGljaXRseSBmb2N1c2VkIGEgbm9kZSBldGMpLlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmRXaWxsU2hvdzogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmRXaWxsU2hvdyhlKSB7XG4gICAgdGhpcy5rZXlib2FyZFdpbGxPcGVuVG8gPSBlO1xuICAgIHRoaXMucHJvcHMub25LZXlib2FyZFdpbGxTaG93ICYmIHRoaXMucHJvcHMub25LZXlib2FyZFdpbGxTaG93KGUpO1xuICB9LFxuICBzY3JvbGxSZXNwb25kZXJLZXlib2FyZFdpbGxIaWRlOiBmdW5jdGlvbiBzY3JvbGxSZXNwb25kZXJLZXlib2FyZFdpbGxIaWRlKGUpIHtcbiAgICB0aGlzLmtleWJvYXJkV2lsbE9wZW5UbyA9IG51bGw7XG4gICAgdGhpcy5wcm9wcy5vbktleWJvYXJkV2lsbEhpZGUgJiYgdGhpcy5wcm9wcy5vbktleWJvYXJkV2lsbEhpZGUoZSk7XG4gIH0sXG4gIHNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkU2hvdzogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaWRTaG93KGUpIHtcbiAgICAvLyBUT0RPKDc2OTM5NjEpOiBUaGUgZXZlbnQgZm9yIERpZFNob3cgaXMgbm90IGF2YWlsYWJsZSBvbiBpT1MgeWV0LlxuICAgIC8vIFVzZSB0aGUgb25lIGZyb20gV2lsbFNob3cgYW5kIGRvIG5vdCBhc3NpZ24uXG4gICAgaWYgKGUpIHtcbiAgICAgIHRoaXMua2V5Ym9hcmRXaWxsT3BlblRvID0gZTtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uS2V5Ym9hcmREaWRTaG93ICYmIHRoaXMucHJvcHMub25LZXlib2FyZERpZFNob3coZSk7XG4gIH0sXG4gIHNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkSGlkZTogZnVuY3Rpb24gc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaWRIaWRlKGUpIHtcbiAgICB0aGlzLmtleWJvYXJkV2lsbE9wZW5UbyA9IG51bGw7XG4gICAgdGhpcy5wcm9wcy5vbktleWJvYXJkRGlkSGlkZSAmJiB0aGlzLnByb3BzLm9uS2V5Ym9hcmREaWRIaWRlKGUpO1xuICB9XG59O1xudmFyIFNjcm9sbFJlc3BvbmRlciA9IHtcbiAgTWl4aW46IFNjcm9sbFJlc3BvbmRlck1peGluXG59O1xudmFyIF9kZWZhdWx0ID0gU2Nyb2xsUmVzcG9uZGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=