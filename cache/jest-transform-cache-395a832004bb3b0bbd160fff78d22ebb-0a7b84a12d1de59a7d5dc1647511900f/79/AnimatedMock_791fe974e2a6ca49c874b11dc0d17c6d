8b6d588d41633495e2ab5f7b3e7865d9
'use strict';

exports.__esModule = true;
exports.default = void 0;

var _AnimatedEvent = require("./AnimatedEvent");

var _AnimatedImplementation = _interopRequireDefault(require("./AnimatedImplementation"));

var _AnimatedInterpolation = _interopRequireDefault(require("./nodes/AnimatedInterpolation"));

var _AnimatedNode = _interopRequireDefault(require("./nodes/AnimatedNode"));

var _AnimatedProps = _interopRequireDefault(require("./nodes/AnimatedProps"));

var _AnimatedValue = _interopRequireDefault(require("./nodes/AnimatedValue"));

var _AnimatedValueXY = _interopRequireDefault(require("./nodes/AnimatedValueXY"));

var _createAnimatedComponent = _interopRequireDefault(require("./createAnimatedComponent"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var emptyAnimation = {
  start: function start() {},
  stop: function stop() {},
  reset: function reset() {},
  _startNativeLoop: function _startNativeLoop() {},
  _isUsingNativeDriver: function _isUsingNativeDriver() {
    return false;
  }
};

var spring = function spring(value, config) {
  var anyValue = value;
  return _objectSpread(_objectSpread({}, emptyAnimation), {}, {
    start: function start(callback) {
      anyValue.setValue(config.toValue);
      callback && callback({
        finished: true
      });
    }
  });
};

var timing = function timing(value, config) {
  var anyValue = value;
  return _objectSpread(_objectSpread({}, emptyAnimation), {}, {
    start: function start(callback) {
      anyValue.setValue(config.toValue);
      callback && callback({
        finished: true
      });
    }
  });
};

var decay = function decay(value, config) {
  return emptyAnimation;
};

var sequence = function sequence(animations) {
  return emptyAnimation;
};

var parallel = function parallel(animations, config) {
  return emptyAnimation;
};

var delay = function delay(time) {
  return emptyAnimation;
};

var stagger = function stagger(time, animations) {
  return emptyAnimation;
};

var loop = function loop(animation, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$iterations = _ref.iterations,
      iterations = _ref$iterations === void 0 ? -1 : _ref$iterations;

  return emptyAnimation;
};

var event = function event(argMapping, config) {
  return null;
};

var _default = {
  Value: _AnimatedValue.default,
  ValueXY: _AnimatedValueXY.default,
  Interpolation: _AnimatedInterpolation.default,
  Node: _AnimatedNode.default,
  decay: decay,
  timing: timing,
  spring: spring,
  add: _AnimatedImplementation.default.add,
  subtract: _AnimatedImplementation.default.subtract,
  divide: _AnimatedImplementation.default.divide,
  multiply: _AnimatedImplementation.default.multiply,
  modulo: _AnimatedImplementation.default.modulo,
  diffClamp: _AnimatedImplementation.default.diffClamp,
  delay: delay,
  sequence: sequence,
  parallel: parallel,
  stagger: stagger,
  loop: loop,
  event: event,
  createAnimatedComponent: _createAnimatedComponent.default,
  attachNativeEvent: _AnimatedEvent.attachNativeEvent,
  forkEvent: _AnimatedImplementation.default.forkEvent,
  unforkEvent: _AnimatedImplementation.default.unforkEvent,
  Event: _AnimatedEvent.AnimatedEvent,
  __PropsOnlyForTests: _AnimatedProps.default
};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkTW9jay5qcyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfQW5pbWF0ZWRFdmVudCIsInJlcXVpcmUiLCJfQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIiwiX0FuaW1hdGVkTm9kZSIsIl9BbmltYXRlZFByb3BzIiwiX0FuaW1hdGVkVmFsdWUiLCJfQW5pbWF0ZWRWYWx1ZVhZIiwiX2NyZWF0ZUFuaW1hdGVkQ29tcG9uZW50Iiwib2JqIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlbXB0eUFuaW1hdGlvbiIsInN0YXJ0Iiwic3RvcCIsInJlc2V0IiwiX3N0YXJ0TmF0aXZlTG9vcCIsIl9pc1VzaW5nTmF0aXZlRHJpdmVyIiwic3ByaW5nIiwiY29uZmlnIiwiYW55VmFsdWUiLCJjYWxsYmFjayIsInNldFZhbHVlIiwidG9WYWx1ZSIsImZpbmlzaGVkIiwidGltaW5nIiwiZGVjYXkiLCJzZXF1ZW5jZSIsImFuaW1hdGlvbnMiLCJwYXJhbGxlbCIsImRlbGF5IiwidGltZSIsInN0YWdnZXIiLCJsb29wIiwiYW5pbWF0aW9uIiwiX3RlbXAiLCJfcmVmIiwiX3JlZiRpdGVyYXRpb25zIiwiaXRlcmF0aW9ucyIsImV2ZW50IiwiYXJnTWFwcGluZyIsIl9kZWZhdWx0IiwiVmFsdWUiLCJWYWx1ZVhZIiwiSW50ZXJwb2xhdGlvbiIsIk5vZGUiLCJhZGQiLCJzdWJ0cmFjdCIsImRpdmlkZSIsIm11bHRpcGx5IiwibW9kdWxvIiwiZGlmZkNsYW1wIiwiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJhdHRhY2hOYXRpdmVFdmVudCIsImZvcmtFdmVudCIsInVuZm9ya0V2ZW50IiwiRXZlbnQiLCJBbmltYXRlZEV2ZW50IiwiX19Qcm9wc09ubHlGb3JUZXN0cyIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBU0E7O0FBRUFBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxjQUFjLEdBQUdDLE9BQU8sbUJBQTVCOztBQUVBLElBQUlDLHVCQUF1QixHQUFHQyxzQkFBc0IsQ0FBQ0YsT0FBTyw0QkFBUixDQUFwRDs7QUFFQSxJQUFJRyxzQkFBc0IsR0FBR0Qsc0JBQXNCLENBQUNGLE9BQU8saUNBQVIsQ0FBbkQ7O0FBRUEsSUFBSUksYUFBYSxHQUFHRixzQkFBc0IsQ0FBQ0YsT0FBTyx3QkFBUixDQUExQzs7QUFFQSxJQUFJSyxjQUFjLEdBQUdILHNCQUFzQixDQUFDRixPQUFPLHlCQUFSLENBQTNDOztBQUVBLElBQUlNLGNBQWMsR0FBR0osc0JBQXNCLENBQUNGLE9BQU8seUJBQVIsQ0FBM0M7O0FBRUEsSUFBSU8sZ0JBQWdCLEdBQUdMLHNCQUFzQixDQUFDRixPQUFPLDJCQUFSLENBQTdDOztBQUVBLElBQUlRLHdCQUF3QixHQUFHTixzQkFBc0IsQ0FBQ0YsT0FBTyw2QkFBUixDQUFyRDs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ08sR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ1osVUFBWCxHQUF3QlksR0FBeEIsR0FBOEI7QUFBRVgsSUFB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QUFBQSxXQUFXLEVBQUVoRix1QkFBdUIsQ0FBQ0gsT0FBeEIsQ0FBZ0NtRixXQXZCaEM7QUF3QmJDLEVBQUFBLEtBQUssRUFBRW5GLGNBQWMsQ0FBQ29GLGFBeEJUO0FBeUJiQyxFQUFBQSxtQkFBbUIsRUFBRS9FLGNBQWMsQ0FBQ1A7QUF6QnZCLENBQWY7QUEyQkFGLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQnFFLFFBQWxCO0FBQ0FrQixNQUFNLENBQUN6RixPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX0FuaW1hdGVkRXZlbnQgPSByZXF1aXJlKFwiLi9BbmltYXRlZEV2ZW50XCIpO1xuXG52YXIgX0FuaW1hdGVkSW1wbGVtZW50YXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0FuaW1hdGVkSW1wbGVtZW50YXRpb25cIikpO1xuXG52YXIgX0FuaW1hdGVkSW50ZXJwb2xhdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9kZXMvQW5pbWF0ZWRJbnRlcnBvbGF0aW9uXCIpKTtcblxudmFyIF9BbmltYXRlZE5vZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL25vZGVzL0FuaW1hdGVkTm9kZVwiKSk7XG5cbnZhciBfQW5pbWF0ZWRQcm9wcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9kZXMvQW5pbWF0ZWRQcm9wc1wiKSk7XG5cbnZhciBfQW5pbWF0ZWRWYWx1ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9kZXMvQW5pbWF0ZWRWYWx1ZVwiKSk7XG5cbnZhciBfQW5pbWF0ZWRWYWx1ZVhZID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ub2Rlcy9BbmltYXRlZFZhbHVlWFlcIikpO1xuXG52YXIgX2NyZWF0ZUFuaW1hdGVkQ29tcG9uZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVBbmltYXRlZENvbXBvbmVudFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgZW1wdHlBbmltYXRpb24gPSB7XG4gIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHt9LFxuICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge30sXG4gIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHt9LFxuICBfc3RhcnROYXRpdmVMb29wOiBmdW5jdGlvbiBfc3RhcnROYXRpdmVMb29wKCkge30sXG4gIF9pc1VzaW5nTmF0aXZlRHJpdmVyOiBmdW5jdGlvbiBfaXNVc2luZ05hdGl2ZURyaXZlcigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBzcHJpbmcgPSBmdW5jdGlvbiBzcHJpbmcodmFsdWUsIGNvbmZpZykge1xuICB2YXIgYW55VmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZW1wdHlBbmltYXRpb24pLCB7fSwge1xuICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChjYWxsYmFjaykge1xuICAgICAgYW55VmFsdWUuc2V0VmFsdWUoY29uZmlnLnRvVmFsdWUpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soe1xuICAgICAgICBmaW5pc2hlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciB0aW1pbmcgPSBmdW5jdGlvbiB0aW1pbmcodmFsdWUsIGNvbmZpZykge1xuICB2YXIgYW55VmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZW1wdHlBbmltYXRpb24pLCB7fSwge1xuICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChjYWxsYmFjaykge1xuICAgICAgYW55VmFsdWUuc2V0VmFsdWUoY29uZmlnLnRvVmFsdWUpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soe1xuICAgICAgICBmaW5pc2hlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBkZWNheSA9IGZ1bmN0aW9uIGRlY2F5KHZhbHVlLCBjb25maWcpIHtcbiAgcmV0dXJuIGVtcHR5QW5pbWF0aW9uO1xufTtcblxudmFyIHNlcXVlbmNlID0gZnVuY3Rpb24gc2VxdWVuY2UoYW5pbWF0aW9ucykge1xuICByZXR1cm4gZW1wdHlBbmltYXRpb247XG59O1xuXG52YXIgcGFyYWxsZWwgPSBmdW5jdGlvbiBwYXJhbGxlbChhbmltYXRpb25zLCBjb25maWcpIHtcbiAgcmV0dXJuIGVtcHR5QW5pbWF0aW9uO1xufTtcblxudmFyIGRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodGltZSkge1xuICByZXR1cm4gZW1wdHlBbmltYXRpb247XG59O1xuXG52YXIgc3RhZ2dlciA9IGZ1bmN0aW9uIHN0YWdnZXIodGltZSwgYW5pbWF0aW9ucykge1xuICByZXR1cm4gZW1wdHlBbmltYXRpb247XG59O1xuXG52YXIgbG9vcCA9IGZ1bmN0aW9uIGxvb3AoYW5pbWF0aW9uLCBfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRpdGVyYXRpb25zID0gX3JlZi5pdGVyYXRpb25zLFxuICAgICAgaXRlcmF0aW9ucyA9IF9yZWYkaXRlcmF0aW9ucyA9PT0gdm9pZCAwID8gLTEgOiBfcmVmJGl0ZXJhdGlvbnM7XG5cbiAgcmV0dXJuIGVtcHR5QW5pbWF0aW9uO1xufTtcblxudmFyIGV2ZW50ID0gZnVuY3Rpb24gZXZlbnQoYXJnTWFwcGluZywgY29uZmlnKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIF9kZWZhdWx0ID0ge1xuICBWYWx1ZTogX0FuaW1hdGVkVmFsdWUuZGVmYXVsdCxcbiAgVmFsdWVYWTogX0FuaW1hdGVkVmFsdWVYWS5kZWZhdWx0LFxuICBJbnRlcnBvbGF0aW9uOiBfQW5pbWF0ZWRJbnRlcnBvbGF0aW9uLmRlZmF1bHQsXG4gIE5vZGU6IF9BbmltYXRlZE5vZGUuZGVmYXVsdCxcbiAgZGVjYXk6IGRlY2F5LFxuICB0aW1pbmc6IHRpbWluZyxcbiAgc3ByaW5nOiBzcHJpbmcsXG4gIGFkZDogX0FuaW1hdGVkSW1wbGVtZW50YXRpb24uZGVmYXVsdC5hZGQsXG4gIHN1YnRyYWN0OiBfQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5kZWZhdWx0LnN1YnRyYWN0LFxuICBkaXZpZGU6IF9BbmltYXRlZEltcGxlbWVudGF0aW9uLmRlZmF1bHQuZGl2aWRlLFxuICBtdWx0aXBseTogX0FuaW1hdGVkSW1wbGVtZW50YXRpb24uZGVmYXVsdC5tdWx0aXBseSxcbiAgbW9kdWxvOiBfQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5kZWZhdWx0Lm1vZHVsbyxcbiAgZGlmZkNsYW1wOiBfQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5kZWZhdWx0LmRpZmZDbGFtcCxcbiAgZGVsYXk6IGRlbGF5LFxuICBzZXF1ZW5jZTogc2VxdWVuY2UsXG4gIHBhcmFsbGVsOiBwYXJhbGxlbCxcbiAgc3RhZ2dlcjogc3RhZ2dlcixcbiAgbG9vcDogbG9vcCxcbiAgZXZlbnQ6IGV2ZW50LFxuICBjcmVhdGVBbmltYXRlZENvbXBvbmVudDogX2NyZWF0ZUFuaW1hdGVkQ29tcG9uZW50LmRlZmF1bHQsXG4gIGF0dGFjaE5hdGl2ZUV2ZW50OiBfQW5pbWF0ZWRFdmVudC5hdHRhY2hOYXRpdmVFdmVudCxcbiAgZm9ya0V2ZW50OiBfQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5kZWZhdWx0LmZvcmtFdmVudCxcbiAgdW5mb3JrRXZlbnQ6IF9BbmltYXRlZEltcGxlbWVudGF0aW9uLmRlZmF1bHQudW5mb3JrRXZlbnQsXG4gIEV2ZW50OiBfQW5pbWF0ZWRFdmVudC5BbmltYXRlZEV2ZW50LFxuICBfX1Byb3BzT25seUZvclRlc3RzOiBfQW5pbWF0ZWRQcm9wcy5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=