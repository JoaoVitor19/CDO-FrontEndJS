4486a092e2e5393ea2985e93233b145b
"use strict";

exports.__esModule = true;
exports.default = void 0;

var _ExecutionEnvironment = require("fbjs/lib/ExecutionEnvironment");

var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var initialURL = _ExecutionEnvironment.canUseDOM ? window.location.href : '';

var Linking = function () {
  function Linking() {
    var _this = this;

    this._eventCallbacks = {};

    this.addEventListener = function (event, callback) {
      if (!_this._eventCallbacks[event]) {
        _this._eventCallbacks[event] = [callback];
        return;
      }

      _this._eventCallbacks[event].push(callback);
    };

    this.removeEventListener = function (event, callback) {
      var callbacks = _this._eventCallbacks[event];
      var filteredCallbacks = callbacks.filter(function (c) {
        return c.toString() !== callback.toString();
      });
      _this._eventCallbacks[event] = filteredCallbacks;
    };
  }

  var _proto = Linking.prototype;

  _proto._dispatchEvent = function _dispatchEvent(event) {
    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }

    var listeners = this._eventCallbacks[event];

    if (listeners != null && Array.isArray(listeners)) {
      listeners.map(function (listener) {
        listener.apply(void 0, data);
      });
    }
  };

  _proto.canOpenURL = function canOpenURL() {
    return Promise.resolve(true);
  };

  _proto.getInitialURL = function getInitialURL() {
    return Promise.resolve(initialURL);
  };

  _proto.openURL = function openURL(url) {
    try {
      open(url);

      this._dispatchEvent('onOpen', url);

      return Promise.resolve();
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto._validateURL = function _validateURL(url) {
    (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
    (0, _invariant.default)(url, 'Invalid URL: cannot be empty');
  };

  return Linking;
}();

var open = function open(url) {
  if (_ExecutionEnvironment.canUseDOM) {
    var urlToOpen = new URL(url, window.location).toString();
    window.open(urlToOpen, '_blank', 'noopener');
  }
};

var _default = new Linking();

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9FeGVjdXRpb25FbnZpcm9ubWVudCIsInJlcXVpcmUiLCJfaW52YXJpYW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsImluaXRpYWxVUkwiLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJMaW5raW5nIiwiX3RoaXMiLCJfZXZlbnRDYWxsYmFja3MiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJjYWxsYmFjayIsInB1c2giLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FsbGJhY2tzIiwiZmlsdGVyZWRDYWxsYmFja3MiLCJmaWx0ZXIiLCJjIiwidG9TdHJpbmciLCJfcHJvdG8iLCJwcm90b3R5cGUiLCJfZGlzcGF0Y2hFdmVudCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJkYXRhIiwiQXJyYXkiLCJfa2V5IiwibGlzdGVuZXJzIiwiaXNBcnJheSIsIm1hcCIsImxpc3RlbmVyIiwiYXBwbHkiLCJjYW5PcGVuVVJMIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRJbml0aWFsVVJMIiwib3BlblVSTCIsInVybCIsIm9wZW4iLCJlIiwicmVqZWN0IiwiX3ZhbGlkYXRlVVJMIiwidXJsVG9PcGVuIiwiVVJMIiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMscUJBQXFCLEdBQUdDLE9BQU8sQ0FBQywrQkFBRCxDQUFuQzs7QUFFQSxJQUFJQyxVQUFVLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLENBQUMsb0JBQUQsQ0FBUixDQUF2Qzs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ0MsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlB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ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9FeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIF9pbnZhcmlhbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTmljb2xhcyBHYWxsYWdoZXIuXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xudmFyIGluaXRpYWxVUkwgPSBfRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gd2luZG93LmxvY2F0aW9uLmhyZWYgOiAnJztcblxudmFyIExpbmtpbmcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMaW5raW5nKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9ldmVudENhbGxiYWNrcyA9IHt9O1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgaWYgKCFfdGhpcy5fZXZlbnRDYWxsYmFja3NbZXZlbnRdKSB7XG4gICAgICAgIF90aGlzLl9ldmVudENhbGxiYWNrc1tldmVudF0gPSBbY2FsbGJhY2tdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9ldmVudENhbGxiYWNrc1tldmVudF0ucHVzaChjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSBfdGhpcy5fZXZlbnRDYWxsYmFja3NbZXZlbnRdO1xuICAgICAgdmFyIGZpbHRlcmVkQ2FsbGJhY2tzID0gY2FsbGJhY2tzLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gYy50b1N0cmluZygpICE9PSBjYWxsYmFjay50b1N0cmluZygpO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5fZXZlbnRDYWxsYmFja3NbZXZlbnRdID0gZmlsdGVyZWRDYWxsYmFja3M7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaW5raW5nLnByb3RvdHlwZTtcblxuICBfcHJvdG8uX2Rpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiBfZGlzcGF0Y2hFdmVudChldmVudCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBkYXRhID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGRhdGFbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudENhbGxiYWNrc1tldmVudF07XG5cbiAgICBpZiAobGlzdGVuZXJzICE9IG51bGwgJiYgQXJyYXkuaXNBcnJheShsaXN0ZW5lcnMpKSB7XG4gICAgICBsaXN0ZW5lcnMubWFwKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgZXZlbnQgbGlzdGVuZXIgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQuIFRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZVxuICAgKiBzYWlkIGV2ZW50IGlzIGRpc3BhdGNoZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNhbk9wZW5VUkwgPSBmdW5jdGlvbiBjYW5PcGVuVVJMKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldEluaXRpYWxVUkwgPSBmdW5jdGlvbiBnZXRJbml0aWFsVVJMKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaW5pdGlhbFVSTCk7XG4gIH1cbiAgLyoqXG4gICAqIFRyeSB0byBvcGVuIHRoZSBnaXZlbiB1cmwgaW4gYSBzZWN1cmUgZmFzaGlvbi4gVGhlIG1ldGhvZCByZXR1cm5zIGEgUHJvbWlzZSBvYmplY3QuXG4gICAqIElmIHRoZSB1cmwgb3BlbnMsIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkLiBJZiBub3QsIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkLlxuICAgKiBEaXNwYXRjaGVzIHRoZSBgb25PcGVuYCBldmVudCBpZiBgdXJsYCBpcyBvcGVuZWQgc3VjY2Vzc2Z1bGx5XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9wZW5VUkwgPSBmdW5jdGlvbiBvcGVuVVJMKHVybCkge1xuICAgIHRyeSB7XG4gICAgICBvcGVuKHVybCk7XG5cbiAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoJ29uT3BlbicsIHVybCk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fdmFsaWRhdGVVUkwgPSBmdW5jdGlvbiBfdmFsaWRhdGVVUkwodXJsKSB7XG4gICAgKDAsIF9pbnZhcmlhbnQuZGVmYXVsdCkodHlwZW9mIHVybCA9PT0gJ3N0cmluZycsICdJbnZhbGlkIFVSTDogc2hvdWxkIGJlIGEgc3RyaW5nLiBXYXM6ICcgKyB1cmwpO1xuICAgICgwLCBfaW52YXJpYW50LmRlZmF1bHQpKHVybCwgJ0ludmFsaWQgVVJMOiBjYW5ub3QgYmUgZW1wdHknKTtcbiAgfTtcblxuICByZXR1cm4gTGlua2luZztcbn0oKTtcblxudmFyIG9wZW4gPSBmdW5jdGlvbiBvcGVuKHVybCkge1xuICBpZiAoX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgIHZhciB1cmxUb09wZW4gPSBuZXcgVVJMKHVybCwgd2luZG93LmxvY2F0aW9uKS50b1N0cmluZygpO1xuICAgIHdpbmRvdy5vcGVuKHVybFRvT3BlbiwgJ19ibGFuaycsICdub29wZW5lcicpO1xuICB9XG59O1xuXG52YXIgX2RlZmF1bHQgPSBuZXcgTGlua2luZygpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==