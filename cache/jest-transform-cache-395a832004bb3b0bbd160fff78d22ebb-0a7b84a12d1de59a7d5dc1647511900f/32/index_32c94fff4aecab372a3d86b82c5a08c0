68b40ba104a007e31988b4d1f2409189
'use strict';

exports.__esModule = true;
exports.default = void 0;

var _Platform = _interopRequireDefault(require("../../../exports/Platform"));

var _RCTDeviceEventEmitter = _interopRequireDefault(require("./RCTDeviceEventEmitter"));

var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var NativeEventEmitter = function () {
  function NativeEventEmitter(nativeModule) {
    if (_Platform.default.OS === 'ios') {
      (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');
      this._nativeModule = nativeModule;
    }
  }

  var _proto = NativeEventEmitter.prototype;

  _proto.addListener = function addListener(eventType, listener, context) {
    var _this$_nativeModule,
        _this = this;

    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);

    var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);

    return {
      remove: function remove() {
        if (subscription != null) {
          var _this$_nativeModule2;

          (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);
          subscription.remove();
          subscription = null;
        }
      }
    };
  };

  _proto.removeListener = function removeListener(eventType, listener) {
    var _this$_nativeModule3;

    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1);

    _RCTDeviceEventEmitter.default.removeListener(eventType, listener);
  };

  _proto.emit = function emit(eventType) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _RCTDeviceEventEmitter.default.emit.apply(_RCTDeviceEventEmitter.default, [eventType].concat(args));
  };

  _proto.removeAllListeners = function removeAllListeners(eventType) {
    var _this$_nativeModule4;

    (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');
    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));

    _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
  };

  _proto.listenerCount = function listenerCount(eventType) {
    return _RCTDeviceEventEmitter.default.listenerCount(eventType);
  };

  return NativeEventEmitter;
}();

exports.default = NativeEventEmitter;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,