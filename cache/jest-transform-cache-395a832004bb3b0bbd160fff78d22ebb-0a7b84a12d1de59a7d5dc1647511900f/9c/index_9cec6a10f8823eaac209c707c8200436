85e7fd2d6be2c84df361d8e6bb05798a
"use strict";

exports.__esModule = true;
exports.default = void 0;

var _View = _interopRequireDefault(require("../../exports/View"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var UnimplementedView = function (_React$Component) {
  _inheritsLoose(UnimplementedView, _React$Component);

  function UnimplementedView() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = UnimplementedView.prototype;

  _proto.setNativeProps = function setNativeProps() {};

  _proto.render = function render() {
    return _react.default.createElement(_View.default, {
      style: [unimplementedViewStyles, this.props.style]
    }, this.props.children);
  };

  return UnimplementedView;
}(_react.default.Component);

var unimplementedViewStyles = process.env.NODE_ENV !== 'production' ? {
  alignSelf: 'flex-start',
  borderColor: 'red',
  borderWidth: 1
} : {};
var _default = UnimplementedView;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9WaWV3IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJvYmoiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX3NldFByb3RvdHlwZU9mIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIlVuaW1wbGVtZW50ZWRWaWV3IiwiX1JlYWN0JENvbXBvbmVudCIsImFwcGx5IiwiYXJndW1lbnRzIiwiX3Byb3RvIiwic2V0TmF0aXZlUHJvcHMiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJ1bmltcGxlbWVudGVkVmlld1N0eWxlcyIsInByb3BzIiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJhbGlnblNlbGYiLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxzQkFBUixDQUFsQzs7QUFFQSxJQUFJQyxNQUFNLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsT0FBRCxDQUFSLENBQW5DOztBQUVBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDTixVQUFYLEdBQXdCTSxHQUF4QixHQUE4QjtBQUFFTCxJQUFBQSxPQUFPLEVBQUVLO0FBQVgsR0FBckM7QUFBd0Q7O0FBRS9GLFNBQVNDLGNBQVQsQ0FBd0JDLFFBQXhCLEVBQWtDQyxVQUFsQyxFQUE4QztBQUFFRCxFQUFBQSxRQUFRLENBQUNFLFNBQVQsR0FBcUJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxVQUFVLENBQUNDLFNBQXpCLENBQXJCO0FBQTBERixFQUFBQSxRQUFRLENBQUNFLFNBQVQsQ0FBbUJHLFdBQW5CLEdBQWlDTCxRQUFqQzs7QUFBMkNNLEVBQUFBLGVBQWUsQ0FBQ04sUUFBRCxFQUFXQyxVQUFYLENBQWY7QUFBd0M7O0FBRTdMLFNBQVNLLGVBQVQsQ0FBeUJDLENBQXpCLEVBQTRCQyxDQUE1QixFQUErQjtBQUFFRixFQUFBQSxlQUFlLEdBQUdILE1BQU0sQ0FBQ00sY0FBUCxJQUF5QixTQUFTSCxlQUFULENBQXlCQyxDQUF6QixFQUE0QkMsQ0FBNUIsRUFBK0I7QUFBRUQsSUFBQUEsQ0FBQyxDQUFDRyxTQUFGLEdBQWNGLENBQWQ7QUFBaUIsV0FBT0QsQ0FBUDtBQUFXLEdBQXhHOztBQUEwRyxTQUFPRCxlQUFlLENBQUNDLENBQUQsRUFBSUMsQ0FBSixDQUF0QjtBQUErQjs7QUFLMUssSUFBSUcsaUJBQWlCLEdBQWdCLFVBQVVDLGdCQUFWLEVBQTRCO0FBQy9EYixFQUFBQSxjQUFjLENBQUNZLGlCQUFELEVBQW9CQyxnQkFBcEIsQ0FBZDs7QUFFQSxXQUFTRCxpQkFBVCxHQUE2QjtBQUMzQixXQUFPQyxnQkFBZ0IsQ0FBQ0MsS0FBakIsQ0FBdUIsSUFBdkIsRUFBNkJDLFNBQTdCLEtBQTJDLElBQWxEO0FBQ0Q7O0FBRUQsTUFBSUMsTUFBTSxHQUFHSixpQkFBaUIsQ0FBQ1QsU0FBL0I7O0FBRUFhLEVBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxHQUF3QixTQUFTQSxjQUFULEdBQTBCLENBQ2pELENBREQ7O0FBR0FELEVBQUFBLE1BQU0sQ0FBQ0UsTUFBUCxHQUFnQixTQUFTQSxNQUFULEdBQWtCO0FBQ2hDLFdBQW9CcEIsTUFBTSxDQUFDSixPQUFQLENBQWV5QixhQUFmLENBQTZCeEIsS0FBSyxDQUFDRCxPQUFuQyxFQUE0QztBQUM5RDBCLE1BQUFBLEtBQUssRUFBRSxDQUFDQyx1QkFBRCxFQUEwQixLQUFLQyxLQUFMLENBQVdGLEtBQXJDO0FBRHVELEtBQTVDLEVBRWpCLEtBQUtFLEtBQUwsQ0FBV0MsUUFGTSxDQUFwQjtBQUdELEdBSkQ7O0FBTUEsU0FBT1gsaUJBQVA7QUFDRCxDQW5Cb0MsQ0FtQm5DZCxNQUFNLENBQUNKLE9BQVAsQ0FBZThCLFNBbkJvQixDQUFyQzs7QUFxQkEsSUFBSUgsdUJBQXVCLEdBQUdJLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQXpCLEdBQXdDO0FBQ3BFQyxFQUFBQSxTQUFTLEVBQUUsWUFEeUQ7QUFFcEVDLEVBQUFBLFdBQVcsRUFBRSxLQUZ1RDtBQUdwRUMsRUFBQUEsV0FBVyxFQUFFO0FBSHVELENBQXhDLEdBSTFCLEVBSko7QUFLQSxJQUFJQyxRQUFRLEdBQUduQixpQkFBZjtBQUNBcEIsT0FBTyxDQUFDRSxPQUFSLEdBQWtCcUMsUUFBbEI7QUFDQUMsTUFBTSxDQUFDeEMsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX1ZpZXcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9leHBvcnRzL1ZpZXdcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuLyoqXG4gKiBDb21tb24gaW1wbGVtZW50YXRpb24gZm9yIGEgc2ltcGxlIHN0dWJiZWQgdmlldy5cbiAqL1xudmFyIFVuaW1wbGVtZW50ZWRWaWV3ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFVuaW1wbGVtZW50ZWRWaWV3LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBVbmltcGxlbWVudGVkVmlldygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVW5pbXBsZW1lbnRlZFZpZXcucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXROYXRpdmVQcm9wcyA9IGZ1bmN0aW9uIHNldE5hdGl2ZVByb3BzKCkgey8vIERvIG5vdGhpbmcuXG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1ZpZXcuZGVmYXVsdCwge1xuICAgICAgc3R5bGU6IFt1bmltcGxlbWVudGVkVmlld1N0eWxlcywgdGhpcy5wcm9wcy5zdHlsZV1cbiAgICB9LCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gVW5pbXBsZW1lbnRlZFZpZXc7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbnZhciB1bmltcGxlbWVudGVkVmlld1N0eWxlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGFsaWduU2VsZjogJ2ZsZXgtc3RhcnQnLFxuICBib3JkZXJDb2xvcjogJ3JlZCcsXG4gIGJvcmRlcldpZHRoOiAxXG59IDoge307XG52YXIgX2RlZmF1bHQgPSBVbmltcGxlbWVudGVkVmlldztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19