b5baf369d10d70e37afa72e4d407cab3
"use strict";

exports.__esModule = true;
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _createElement = _interopRequireDefault(require("../createElement"));

var _useMergeRefs = _interopRequireDefault(require("../../modules/useMergeRefs"));

var _usePlatformMethods = _interopRequireDefault(require("../../modules/usePlatformMethods"));

var _PickerItem = _interopRequireDefault(require("./PickerItem"));

var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var Picker = React.forwardRef(function (props, forwardedRef) {
  var children = props.children,
      enabled = props.enabled,
      onValueChange = props.onValueChange,
      selectedValue = props.selectedValue,
      style = props.style,
      testID = props.testID,
      itemStyle = props.itemStyle,
      mode = props.mode,
      prompt = props.prompt,
      other = _objectWithoutPropertiesLoose(props, ["children", "enabled", "onValueChange", "selectedValue", "style", "testID", "itemStyle", "mode", "prompt"]);

  var hostRef = React.useRef(null);

  function handleChange(e) {
    var _e$target = e.target,
        selectedIndex = _e$target.selectedIndex,
        value = _e$target.value;

    if (onValueChange) {
      onValueChange(value, selectedIndex);
    }
  }

  var supportedProps = _objectSpread({
    children: children,
    disabled: enabled === false ? true : undefined,
    onChange: handleChange,
    style: [styles.initial, style],
    testID: testID,
    value: selectedValue
  }, other);

  var platformMethodsRef = (0, _usePlatformMethods.default)(supportedProps);
  var setRef = (0, _useMergeRefs.default)(hostRef, platformMethodsRef, forwardedRef);
  supportedProps.ref = setRef;
  return (0, _createElement.default)('select', supportedProps);
});
Picker.Item = _PickerItem.default;

var styles = _StyleSheet.default.create({
  initial: {
    fontFamily: 'System',
    fontSize: 'inherit',
    margin: 0
  }
});

var _default = Picker;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2NyZWF0ZUVsZW1lbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3VzZU1lcmdlUmVmcyIsIl91c2VQbGF0Zm9ybU1ldGhvZHMiLCJfUGlja2VySXRlbSIsIl9TdHlsZVNoZWV0Iiwib2JqIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0Iiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJpbmRleE9mIiwiUGlja2VyIiwiZm9yd2FyZFJlZiIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiY2hpbGRyZW4iLCJlbmFibGVkIiwib25WYWx1ZUNoYW5nZSIsInNlbGVjdGVkVmFsdWUiLCJzdHlsZSIsInRlc3RJRCIsIml0ZW1TdHlsZSIsIm1vZGUiLCJwcm9tcHQiLCJvdGhlciIsImhvc3RSZWYiLCJ1c2VSZWYiLCJoYW5kbGVDaGFuZ2UiLCJlIiwiX2UkdGFyZ2V0Iiwic2VsZWN0ZWRJbmRleCIsInN1cHBvcnRlZFByb3BzIiwiZGlzYWJsZWQiLCJ1bmRlZmluZWQiLCJvbkNoYW5nZSIsInN0eWxlcyIsImluaXRpYWwiLCJwbGF0Zm9ybU1ldGhvZHNSZWYiLCJzZXRSZWYiLCJyZWYiLCJJdGVtIiwiY3JlYXRlIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwibWFyZ2luIiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLE9BQUQsQ0FBUixDQUFuQzs7QUFFQSxJQUFJQyxjQUFjLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLG9CQUFSLENBQTNDOztBQUVBLElBQUlHLGFBQWEsR0FBR0Qsc0JBQXNCLENBQUNGLE9BQU8sOEJBQVIsQ0FBMUM7O0FBRUEsSUFBSUksbUJBQW1CLEdBQUdGLHNCQUFzQixDQUFDRixPQUFPLG9DQUFSLENBQWhEOztBQUVBLElBQUlLLFdBQVcsR0FBR0gsc0JBQXNCLENBQUNGLE9BQU8sZ0JBQVIsQ0FBeEM7O0FBRUEsSUFBSU0sV0FBVyxHQUFHSixzQkFBc0IsQ0FBQ0YsT0FBTyxpQkFBUixDQUF4Qzs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ0ssR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ1gsVUFBWCxHQUF3QlcsR0FBeEIsR0FBOEI7QUFBRVYsSUFBQUEsT0FBTyxFQUFFVTtBQUFYLEdBQXJDO0FBQXdEOztBQUUvRixTQUFTQyx3QkFBVCxHQUFvQztBQUFFLE1BQUksT0FBT0MsT0FBUCxLQUFtQixVQUF2QixFQUFtQyxP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Q0FKMEI7QUFLakNDLElBQUFBLE1BQU0sRUFBRUEsTUFMeUI7QUFNakNoQixJQUFBQSxLQUFLLEVBQUVjO0FBTjBCLEdBQUQsRUFPL0JNLEtBUCtCLENBQWxDOztBQVNBLE1BQUlhLGtCQUFrQixHQUFHLENBQUMsR0FBRzFFLG1CQUFtQixDQUFDUCxPQUF4QixFQUFpQzJFLGNBQWpDLENBQXpCO0FBQ0EsTUFBSU8sTUFBTSxHQUFHLENBQUMsR0FBRzVFLGFBQWEsQ0FBQ04sT0FBbEIsRUFBMkJxRSxPQUEzQixFQUFvQ1ksa0JBQXBDLEVBQXdEdkIsWUFBeEQsQ0FBYjtBQUNBaUIsRUFBQUEsY0FBYyxDQUFDUSxHQUFmLEdBQXFCRCxNQUFyQjtBQUNBLFNBQU8sQ0FBQyxHQUFHOUUsY0FBYyxDQUFDSixPQUFuQixFQUE0QixRQUE1QixFQUFzQzJFLGNBQXRDLENBQVA7QUFDRCxDQXRDeUIsQ0FBMUI7QUF3Q0FwQixNQUFNLENBQUM2QixJQUFQLEdBQWM1RSxXQUFXLENBQUNSLE9BQTFCOztBQUVBLElBQUkrRSxNQUFNLEdBQUd0RSxXQUFXLENBQUNULE9BQVosQ0FBb0JxRixNQUFwQixDQUEyQjtBQUN0Q0wsRUFBQUEsT0FBTyxFQUFFO0FBQ1BNLElBQUFBLFVBQVUsRUFBRSxRQURMO0FBRVBDLElBQUFBLFFBQVEsRUFBRSxTQUZIO0FBR1BDLElBQUFBLE1BQU0sRUFBRTtBQUhEO0FBRDZCLENBQTNCLENBQWI7O0FBUUEsSUFBSUMsUUFBUSxHQUFHbEMsTUFBZjtBQUNBekQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCeUYsUUFBbEI7QUFDQUMsTUFBTSxDQUFDNUYsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZUVsZW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jcmVhdGVFbGVtZW50XCIpKTtcblxudmFyIF91c2VNZXJnZVJlZnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL3VzZU1lcmdlUmVmc1wiKSk7XG5cbnZhciBfdXNlUGxhdGZvcm1NZXRob2RzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy91c2VQbGF0Zm9ybU1ldGhvZHNcIikpO1xuXG52YXIgX1BpY2tlckl0ZW0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BpY2tlckl0ZW1cIikpO1xuXG52YXIgX1N0eWxlU2hlZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9TdHlsZVNoZWV0XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBQaWNrZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGVuYWJsZWQgPSBwcm9wcy5lbmFibGVkLFxuICAgICAgb25WYWx1ZUNoYW5nZSA9IHByb3BzLm9uVmFsdWVDaGFuZ2UsXG4gICAgICBzZWxlY3RlZFZhbHVlID0gcHJvcHMuc2VsZWN0ZWRWYWx1ZSxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB0ZXN0SUQgPSBwcm9wcy50ZXN0SUQsXG4gICAgICBpdGVtU3R5bGUgPSBwcm9wcy5pdGVtU3R5bGUsXG4gICAgICBtb2RlID0gcHJvcHMubW9kZSxcbiAgICAgIHByb21wdCA9IHByb3BzLnByb21wdCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiZW5hYmxlZFwiLCBcIm9uVmFsdWVDaGFuZ2VcIiwgXCJzZWxlY3RlZFZhbHVlXCIsIFwic3R5bGVcIiwgXCJ0ZXN0SURcIiwgXCJpdGVtU3R5bGVcIiwgXCJtb2RlXCIsIFwicHJvbXB0XCJdKTtcblxuICB2YXIgaG9zdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSkge1xuICAgIHZhciBfZSR0YXJnZXQgPSBlLnRhcmdldCxcbiAgICAgICAgc2VsZWN0ZWRJbmRleCA9IF9lJHRhcmdldC5zZWxlY3RlZEluZGV4LFxuICAgICAgICB2YWx1ZSA9IF9lJHRhcmdldC52YWx1ZTtcblxuICAgIGlmIChvblZhbHVlQ2hhbmdlKSB7XG4gICAgICBvblZhbHVlQ2hhbmdlKHZhbHVlLCBzZWxlY3RlZEluZGV4KTtcbiAgICB9XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgdmFyIHN1cHBvcnRlZFByb3BzID0gX29iamVjdFNwcmVhZCh7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGRpc2FibGVkOiBlbmFibGVkID09PSBmYWxzZSA/IHRydWUgOiB1bmRlZmluZWQsXG4gICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICBzdHlsZTogW3N0eWxlcy5pbml0aWFsLCBzdHlsZV0sXG4gICAgdGVzdElEOiB0ZXN0SUQsXG4gICAgdmFsdWU6IHNlbGVjdGVkVmFsdWVcbiAgfSwgb3RoZXIpO1xuXG4gIHZhciBwbGF0Zm9ybU1ldGhvZHNSZWYgPSAoMCwgX3VzZVBsYXRmb3JtTWV0aG9kcy5kZWZhdWx0KShzdXBwb3J0ZWRQcm9wcyk7XG4gIHZhciBzZXRSZWYgPSAoMCwgX3VzZU1lcmdlUmVmcy5kZWZhdWx0KShob3N0UmVmLCBwbGF0Zm9ybU1ldGhvZHNSZWYsIGZvcndhcmRlZFJlZik7XG4gIHN1cHBvcnRlZFByb3BzLnJlZiA9IHNldFJlZjtcbiAgcmV0dXJuICgwLCBfY3JlYXRlRWxlbWVudC5kZWZhdWx0KSgnc2VsZWN0Jywgc3VwcG9ydGVkUHJvcHMpO1xufSk7IC8vICRGbG93Rml4TWVcblxuUGlja2VyLkl0ZW0gPSBfUGlja2VySXRlbS5kZWZhdWx0O1xuXG52YXIgc3R5bGVzID0gX1N0eWxlU2hlZXQuZGVmYXVsdC5jcmVhdGUoe1xuICBpbml0aWFsOiB7XG4gICAgZm9udEZhbWlseTogJ1N5c3RlbScsXG4gICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICBtYXJnaW46IDBcbiAgfVxufSk7XG5cbnZhciBfZGVmYXVsdCA9IFBpY2tlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19