6019204390c82e189854ff559f6304eb
"use strict";

exports.__esModule = true;
exports.default = void 0;
var unitlessNumbers = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexOrder: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  fontWeight: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowGap: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnGap: true,
  gridColumnStart: true,
  lineClamp: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  scaleZ: true,
  shadowOpacity: true
};
var prefixes = ['ms', 'Moz', 'O', 'Webkit'];

var prefixKey = function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
};

Object.keys(unitlessNumbers).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    unitlessNumbers[prefixKey(prefix, prop)] = unitlessNumbers[prop];
  });
});
var _default = unitlessNumbers;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInVuaXRsZXNzTnVtYmVycyIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiZmxleCIsImZsZXhHcm93IiwiZmxleE9yZGVyIiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZvbnRXZWlnaHQiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dHYXAiLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5HYXAiLCJncmlkQ29sdW1uU3RhcnQiLCJsaW5lQ2xhbXAiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInNjYWxlWiIsInNoYWRvd09wYWNpdHkiLCJwcmVmaXhlcyIsInByZWZpeEtleSIsInByZWZpeCIsImtleSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic3Vic3RyaW5nIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJwcm9wIiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFD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U1EsSUFBVCxDQUFWLENBQWYsR0FBMkN4RCxlQUFlLENBQUN3RCxJQUFELENBQTFEO0FBQ0QsR0FGRDtBQUdELENBSkQ7QUFLQSxJQUFJQyxRQUFRLEdBQUd6RCxlQUFmO0FBQ0FILE9BQU8sQ0FBQ0UsT0FBUixHQUFrQjBELFFBQWxCO0FBQ0FDLE1BQU0sQ0FBQzdELE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE5pY29sYXMgR2FsbGFnaGVyLlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cbnZhciB1bml0bGVzc051bWJlcnMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuICBhc3BlY3RSYXRpbzogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IHRydWUsXG4gIGJvcmRlckltYWdlU2xpY2U6IHRydWUsXG4gIGJvcmRlckltYWdlV2lkdGg6IHRydWUsXG4gIGJveEZsZXg6IHRydWUsXG4gIGJveEZsZXhHcm91cDogdHJ1ZSxcbiAgYm94T3JkaW5hbEdyb3VwOiB0cnVlLFxuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhPcmRlcjogdHJ1ZSxcbiAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICBmbGV4U2hyaW5rOiB0cnVlLFxuICBmbGV4TmVnYXRpdmU6IHRydWUsXG4gIGZvbnRXZWlnaHQ6IHRydWUsXG4gIGdyaWRSb3c6IHRydWUsXG4gIGdyaWRSb3dFbmQ6IHRydWUsXG4gIGdyaWRSb3dHYXA6IHRydWUsXG4gIGdyaWRSb3dTdGFydDogdHJ1ZSxcbiAgZ3JpZENvbHVtbjogdHJ1ZSxcbiAgZ3JpZENvbHVtbkVuZDogdHJ1ZSxcbiAgZ3JpZENvbHVtbkdhcDogdHJ1ZSxcbiAgZ3JpZENvbHVtblN0YXJ0OiB0cnVlLFxuICBsaW5lQ2xhbXA6IHRydWUsXG4gIG9wYWNpdHk6IHRydWUsXG4gIG9yZGVyOiB0cnVlLFxuICBvcnBoYW5zOiB0cnVlLFxuICB0YWJTaXplOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIHpJbmRleDogdHJ1ZSxcbiAgem9vbTogdHJ1ZSxcbiAgLy8gU1ZHLXJlbGF0ZWRcbiAgZmlsbE9wYWNpdHk6IHRydWUsXG4gIGZsb29kT3BhY2l0eTogdHJ1ZSxcbiAgc3RvcE9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZURhc2hhcnJheTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogdHJ1ZSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogdHJ1ZSxcbiAgc3Ryb2tlT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlV2lkdGg6IHRydWUsXG4gIC8vIHRyYW5zZm9ybSB0eXBlc1xuICBzY2FsZTogdHJ1ZSxcbiAgc2NhbGVYOiB0cnVlLFxuICBzY2FsZVk6IHRydWUsXG4gIHNjYWxlWjogdHJ1ZSxcbiAgLy8gUk4gcHJvcGVydGllc1xuICBzaGFkb3dPcGFjaXR5OiB0cnVlXG59O1xuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xuXG52YXIgcHJlZml4ZXMgPSBbJ21zJywgJ01veicsICdPJywgJ1dlYmtpdCddO1xuXG52YXIgcHJlZml4S2V5ID0gZnVuY3Rpb24gcHJlZml4S2V5KHByZWZpeCwga2V5KSB7XG4gIHJldHVybiBwcmVmaXggKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpO1xufTtcblxuT2JqZWN0LmtleXModW5pdGxlc3NOdW1iZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHByZWZpeGVzLmZvckVhY2goZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIHVuaXRsZXNzTnVtYmVyc1twcmVmaXhLZXkocHJlZml4LCBwcm9wKV0gPSB1bml0bGVzc051bWJlcnNbcHJvcF07XG4gIH0pO1xufSk7XG52YXIgX2RlZmF1bHQgPSB1bml0bGVzc051bWJlcnM7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==