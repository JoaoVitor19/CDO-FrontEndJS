a039eaf9122c18c176fb1bef1fc1a4e8
"use strict";

exports.__esModule = true;
exports.default = usePlatformMethods;

var _UIManager = _interopRequireDefault(require("../../exports/UIManager"));

var _createDOMProps = _interopRequireDefault(require("../createDOMProps"));

var _useStable = _interopRequireDefault(require("../useStable"));

var _react = require("react");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var emptyObject = {};

function setNativeProps(node, nativeProps, classList, pointerEvents, style, previousStyleRef) {
  if (node != null && nativeProps) {
    var domProps = (0, _createDOMProps.default)(null, _objectSpread(_objectSpread({
      pointerEvents: pointerEvents
    }, nativeProps), {}, {
      classList: [classList, nativeProps.className],
      style: [style, nativeProps.style]
    }));
    var nextDomStyle = domProps.style;

    if (previousStyleRef.current != null) {
      if (domProps.style == null) {
        domProps.style = {};
      }

      for (var styleName in previousStyleRef.current) {
        if (domProps.style[styleName] == null) {
          domProps.style[styleName] = '';
        }
      }
    }

    previousStyleRef.current = nextDomStyle;

    _UIManager.default.updateView(node, domProps);
  }
}

function usePlatformMethods(_ref) {
  var classList = _ref.classList,
      pointerEvents = _ref.pointerEvents,
      style = _ref.style;
  var previousStyleRef = (0, _react.useRef)(null);
  var setNativePropsArgsRef = (0, _react.useRef)(null);
  setNativePropsArgsRef.current = {
    classList: classList,
    pointerEvents: pointerEvents,
    style: style
  };
  var ref = (0, _useStable.default)(function () {
    return function (hostNode) {
      if (hostNode != null) {
        hostNode.measure = function (callback) {
          return _UIManager.default.measure(hostNode, callback);
        };

        hostNode.measureLayout = function (relativeToNode, success, failure) {
          return _UIManager.default.measureLayout(hostNode, relativeToNode, failure, success);
        };

        hostNode.measureInWindow = function (callback) {
          return _UIManager.default.measureInWindow(hostNode, callback);
        };

        hostNode.setNativeProps = function (nativeProps) {
          var _ref2 = setNativePropsArgsRef.current || emptyObject,
              classList = _ref2.classList,
              style = _ref2.style,
              pointerEvents = _ref2.pointerEvents;

          setNativeProps(hostNode, nativeProps, classList, pointerEvents, style, previousStyleRef);
        };
      }
    };
  });
  return ref;
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInVzZVBsYXRmb3JtTWV0aG9kcyIsIl9VSU1hbmFnZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jcmVhdGVET01Qcm9wcyIsIl91c2VTdGFibGUiLCJfcmVhY3QiLCJvYmoiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVtcHR5T2JqZWN0Iiwic2V0TmF0aXZlUHJvcHMiLCJub2RlIiwibmF0aXZlUHJvcHMiLCJjbGFzc0xpc3QiLCJwb2ludGVyRXZlbnRzIiwic3R5bGUiLCJwcmV2aW91c1N0eWxlUmVmIiwiZG9tUHJvcHMiLCJjbGFzc05hbWUiLCJuZXh0RG9tU3R5bGUiLCJjdXJyZW50Iiwic3R5bGVOYW1lIiwidXBkYXRlVmlldyIsIl9yZWYiLCJ1c2VSZWYiLCJzZXROYXRpdmVQcm9wc0FyZ3NSZWYiLCJyZWYiLCJob3N0Tm9kZSIsIm1lYXN1cmUiLCJjYWxsYmFjayIsIm1lYXN1cmVMYXlvdXQiLCJyZWxhdGl2ZVRvTm9kZSIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwibWVhc3VyZUluV2luZG93IiwiX3JlZjIiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJB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b3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVzZVBsYXRmb3JtTWV0aG9kcztcblxudmFyIF9VSU1hbmFnZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9leHBvcnRzL1VJTWFuYWdlclwiKSk7XG5cbnZhciBfY3JlYXRlRE9NUHJvcHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jcmVhdGVET01Qcm9wc1wiKSk7XG5cbnZhciBfdXNlU3RhYmxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXNlU3RhYmxlXCIpKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5mdW5jdGlvbiBzZXROYXRpdmVQcm9wcyhub2RlLCBuYXRpdmVQcm9wcywgY2xhc3NMaXN0LCBwb2ludGVyRXZlbnRzLCBzdHlsZSwgcHJldmlvdXNTdHlsZVJlZikge1xuICBpZiAobm9kZSAhPSBudWxsICYmIG5hdGl2ZVByb3BzKSB7XG4gICAgdmFyIGRvbVByb3BzID0gKDAsIF9jcmVhdGVET01Qcm9wcy5kZWZhdWx0KShudWxsLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe1xuICAgICAgcG9pbnRlckV2ZW50czogcG9pbnRlckV2ZW50c1xuICAgIH0sIG5hdGl2ZVByb3BzKSwge30sIHtcbiAgICAgIGNsYXNzTGlzdDogW2NsYXNzTGlzdCwgbmF0aXZlUHJvcHMuY2xhc3NOYW1lXSxcbiAgICAgIHN0eWxlOiBbc3R5bGUsIG5hdGl2ZVByb3BzLnN0eWxlXVxuICAgIH0pKTtcbiAgICB2YXIgbmV4dERvbVN0eWxlID0gZG9tUHJvcHMuc3R5bGU7XG5cbiAgICBpZiAocHJldmlvdXNTdHlsZVJlZi5jdXJyZW50ICE9IG51bGwpIHtcbiAgICAgIGlmIChkb21Qcm9wcy5zdHlsZSA9PSBudWxsKSB7XG4gICAgICAgIGRvbVByb3BzLnN0eWxlID0ge307XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBwcmV2aW91c1N0eWxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGRvbVByb3BzLnN0eWxlW3N0eWxlTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgIGRvbVByb3BzLnN0eWxlW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHByZXZpb3VzU3R5bGVSZWYuY3VycmVudCA9IG5leHREb21TdHlsZTtcblxuICAgIF9VSU1hbmFnZXIuZGVmYXVsdC51cGRhdGVWaWV3KG5vZGUsIGRvbVByb3BzKTtcbiAgfVxufVxuLyoqXG4gKiBBZGRzIG5vbi1zdGFuZGFyZCBtZXRob2RzIHRvIHRoZSBob2RlIGVsZW1lbnQuIFRoaXMgaXMgdGVtcG9yYXJpbHkgdW50aWwgYW5cbiAqIEFQSSBsaWtlIGBSZWFjdE5hdGl2ZS5tZWFzdXJlKGhvc3RSZWYsIGNhbGxiYWNrKWAgaXMgYWRkZWQgdG8gUmVhY3QgTmF0aXZlLlxuICovXG5cblxuZnVuY3Rpb24gdXNlUGxhdGZvcm1NZXRob2RzKF9yZWYpIHtcbiAgdmFyIGNsYXNzTGlzdCA9IF9yZWYuY2xhc3NMaXN0LFxuICAgICAgcG9pbnRlckV2ZW50cyA9IF9yZWYucG9pbnRlckV2ZW50cyxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZTtcbiAgdmFyIHByZXZpb3VzU3R5bGVSZWYgPSAoMCwgX3JlYWN0LnVzZVJlZikobnVsbCk7XG4gIHZhciBzZXROYXRpdmVQcm9wc0FyZ3NSZWYgPSAoMCwgX3JlYWN0LnVzZVJlZikobnVsbCk7XG4gIHNldE5hdGl2ZVByb3BzQXJnc1JlZi5jdXJyZW50ID0ge1xuICAgIGNsYXNzTGlzdDogY2xhc3NMaXN0LFxuICAgIHBvaW50ZXJFdmVudHM6IHBvaW50ZXJFdmVudHMsXG4gICAgc3R5bGU6IHN0eWxlXG4gIH07IC8vIEF2b2lkIGNyZWF0aW5nIGEgbmV3IHJlZiBvbiBldmVyeSByZW5kZXIuIFRoZSBwcm9wcyBvbmx5IG5lZWQgdG8gYmVcbiAgLy8gYXZhaWxhYmxlIHRvICdzZXROYXRpdmVQcm9wcycgd2hlbiBpdCBpcyBjYWxsZWQuXG5cbiAgdmFyIHJlZiA9ICgwLCBfdXNlU3RhYmxlLmRlZmF1bHQpKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGhvc3ROb2RlKSB7XG4gICAgICBpZiAoaG9zdE5vZGUgIT0gbnVsbCkge1xuICAgICAgICBob3N0Tm9kZS5tZWFzdXJlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIF9VSU1hbmFnZXIuZGVmYXVsdC5tZWFzdXJlKGhvc3ROb2RlLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaG9zdE5vZGUubWVhc3VyZUxheW91dCA9IGZ1bmN0aW9uIChyZWxhdGl2ZVRvTm9kZSwgc3VjY2VzcywgZmFpbHVyZSkge1xuICAgICAgICAgIHJldHVybiBfVUlNYW5hZ2VyLmRlZmF1bHQubWVhc3VyZUxheW91dChob3N0Tm9kZSwgcmVsYXRpdmVUb05vZGUsIGZhaWx1cmUsIHN1Y2Nlc3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGhvc3ROb2RlLm1lYXN1cmVJbldpbmRvdyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybiBfVUlNYW5hZ2VyLmRlZmF1bHQubWVhc3VyZUluV2luZG93KGhvc3ROb2RlLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaG9zdE5vZGUuc2V0TmF0aXZlUHJvcHMgPSBmdW5jdGlvbiAobmF0aXZlUHJvcHMpIHtcbiAgICAgICAgICB2YXIgX3JlZjIgPSBzZXROYXRpdmVQcm9wc0FyZ3NSZWYuY3VycmVudCB8fCBlbXB0eU9iamVjdCxcbiAgICAgICAgICAgICAgY2xhc3NMaXN0ID0gX3JlZjIuY2xhc3NMaXN0LFxuICAgICAgICAgICAgICBzdHlsZSA9IF9yZWYyLnN0eWxlLFxuICAgICAgICAgICAgICBwb2ludGVyRXZlbnRzID0gX3JlZjIucG9pbnRlckV2ZW50cztcblxuICAgICAgICAgIHNldE5hdGl2ZVByb3BzKGhvc3ROb2RlLCBuYXRpdmVQcm9wcywgY2xhc3NMaXN0LCBwb2ludGVyRXZlbnRzLCBzdHlsZSwgcHJldmlvdXNTdHlsZVJlZik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZWY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==