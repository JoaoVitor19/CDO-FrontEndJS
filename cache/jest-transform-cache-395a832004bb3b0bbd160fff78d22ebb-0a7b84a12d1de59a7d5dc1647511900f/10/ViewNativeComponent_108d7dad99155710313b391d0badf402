9e8915c745dc467e13d045565271d7e8
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;

var React = _interopRequireWildcard(require("react"));

var _codegenNativeCommands = _interopRequireDefault(require("../../Utilities/codegenNativeCommands"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Platform = require("../../Utilities/Platform");

var ReactNativeViewViewConfigAndroid = require("./ReactNativeViewViewConfigAndroid");

var registerGeneratedViewConfig = require("../../Utilities/registerGeneratedViewConfig");

var requireNativeComponent = require("../../ReactNative/requireNativeComponent");

var NativeViewComponent;
var viewConfig;

if (__DEV__ || global.RN$Bridgeless) {
  if (Platform.OS === 'android') {
    viewConfig = ReactNativeViewViewConfigAndroid;
    registerGeneratedViewConfig('RCTView', ReactNativeViewViewConfigAndroid);
  } else {
    viewConfig = {};
    registerGeneratedViewConfig('RCTView', {
      uiViewClassName: 'RCTView'
    });
  }

  NativeViewComponent = 'RCTView';
} else {
  NativeViewComponent = requireNativeComponent('RCTView');
}

var __INTERNAL_VIEW_CONFIG = viewConfig;
exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
var Commands = (0, _codegenNativeCommands.default)({
  supportedCommands: ['hotspotUpdate', 'setPressed']
});
exports.Commands = Commands;
var _default = NativeViewComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZpZXdOYXRpdmVDb21wb25lbnQuanMiXSwibmFtZXMiOlsiUGxhdGZvcm0iLCJyZXF1aXJlIiwiUmVhY3ROYXRpdmVWaWV3Vmlld0NvbmZpZ0FuZHJvaWQiLCJyZWdpc3RlckdlbmVyYXRlZFZpZXdDb25maWciLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50IiwiTmF0aXZlVmlld0NvbXBvbmVudCIsInZpZXdDb25maWciLCJfX0RFVl9fIiwiZ2xvYmFsIiwiUk4kQnJpZGdlbGVzcyIsIk9TIiwidWlWaWV3Q2xhc3NOYW1lIiwiX19JTlRFUk5BTF9WSUVXX0NPTkZJRyIsIkNvbW1hbmRzIiwic3VwcG9ydGVkQ29tbWFuZHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7Ozs7QUFRQTs7QUFFQTs7Ozs7O0FBUkEsSUFBTUEsUUFBUSxHQUFHQyxPQUFPLDRCQUF4Qjs7QUFDQSxJQUFNQyxnQ0FBZ0MsR0FBR0QsT0FBTyxzQ0FBaEQ7O0FBRUEsSUFBTUUsMkJBQTJCLEdBQUdGLE9BQU8sK0NBQTNDOztBQUNBLElBQU1HLHNCQUFzQixHQUFHSCxPQUFPLDRDQUF0Qzs7QUFVQSxJQUFJSSxtQkFBSjtBQUNBLElBQUlDLFVBQUo7O0FBNEJBLElBQUlDLE9BQU8sSUFBSUMsTUFBTSxDQUFDQyxhQUF0QixFQUFxQztBQUduQyxNQUFJVCxRQUFRLENBQUNVLEVBQVQsS0FBZ0IsU0FBcEIsRUFBK0I7QUFDN0JKLElBQUFBLFVBQVUsR0FBR0osZ0NBQWI7QUFDQUMsSUFBQUEsMkJBQTJCLENBQUMsU0FBRCxFQUFZRCxnQ0FBWixDQUEzQjtBQUNELEdBSEQsTUFHTztBQUNMSSxJQUFBQSxVQUFVLEdBQUcsRUFBYjtBQUNBSCxJQUFBQSwyQkFBMkIsQ0FBQyxTQUFELEVBQVk7QUFBQ1EsTUFBQUEsZUFBZSxFQUFFO0FBQWxCLEtBQVosQ0FBM0I7QUFDRDs7QUFFRE4sRUFBQUEsbUJBQW1CLEdBQUcsU0FBdEI7QUFDRCxDQVpELE1BWU87QUFDTEEsRUFBQUEsbUJBQW1CLEdBQUdELHNCQUFzQixDQUFDLFNBQUQsQ0FBNUM7QUFDRDs7QUFFTSxJQUFNUSxzQkFBc0IsR0FBR04sVUFBL0I7O0FBY0EsSUFBTU8sUUFBd0IsR0FBRyxvQ0FBc0M7QUFDNUVDLEVBQUFBLGlCQUFpQixFQUFFLENBQUMsZUFBRCxFQUFrQixZQUFsQjtBQUR5RCxDQUF0QyxDQUFqQzs7ZUFJVVQsbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9QbGF0Zm9ybScpO1xuY29uc3QgUmVhY3ROYXRpdmVWaWV3Vmlld0NvbmZpZ0FuZHJvaWQgPSByZXF1aXJlKCcuL1JlYWN0TmF0aXZlVmlld1ZpZXdDb25maWdBbmRyb2lkJyk7XG5cbmNvbnN0IHJlZ2lzdGVyR2VuZXJhdGVkVmlld0NvbmZpZyA9IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9yZWdpc3RlckdlbmVyYXRlZFZpZXdDb25maWcnKTtcbmNvbnN0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9SZWFjdE5hdGl2ZS9yZXF1aXJlTmF0aXZlQ29tcG9uZW50Jyk7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNvZGVnZW5OYXRpdmVDb21tYW5kcyBmcm9tICcuLi8uLi9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbW1hbmRzJztcbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4vVmlld1Byb3BUeXBlcyc7XG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudH0gZnJvbSAnLi4vLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5cbmV4cG9ydCB0eXBlIFZpZXdOYXRpdmVDb21wb25lbnRUeXBlID0gSG9zdENvbXBvbmVudDxWaWV3UHJvcHM+O1xuXG5sZXQgTmF0aXZlVmlld0NvbXBvbmVudDtcbmxldCB2aWV3Q29uZmlnOlxuICB8IHsuLi59XG4gIHwge3xcbiAgICAgIGJ1YmJsaW5nRXZlbnRUeXBlcz86ICRSZWFkT25seTx7XG4gICAgICAgIFtldmVudE5hbWU6IHN0cmluZ106ICRSZWFkT25seTx7fFxuICAgICAgICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiAkUmVhZE9ubHk8e3xcbiAgICAgICAgICAgIGJ1YmJsZWQ6IHN0cmluZyxcbiAgICAgICAgICAgIGNhcHR1cmVkOiBzdHJpbmcsXG4gICAgICAgICAgfH0+LFxuICAgICAgICB8fT4sXG4gICAgICAgIC4uLixcbiAgICAgIH0+LFxuICAgICAgZGlyZWN0RXZlbnRUeXBlcz86ICRSZWFkT25seTx7XG4gICAgICAgIFtldmVudE5hbWU6IHN0cmluZ106ICRSZWFkT25seTx7fHJlZ2lzdHJhdGlvbk5hbWU6IHN0cmluZ3x9PixcbiAgICAgICAgLi4uLFxuICAgICAgfT4sXG4gICAgICB1aVZpZXdDbGFzc05hbWU6IHN0cmluZyxcbiAgICAgIHZhbGlkQXR0cmlidXRlcz86IHtcbiAgICAgICAgW3Byb3BOYW1lOiBzdHJpbmddOlxuICAgICAgICAgIHwgdHJ1ZVxuICAgICAgICAgIHwgJFJlYWRPbmx5PHt8XG4gICAgICAgICAgICAgIGRpZmY/OiA8VD4oYXJnMTogYW55LCBhcmcyOiBhbnkpID0+IGJvb2xlYW4sXG4gICAgICAgICAgICAgIHByb2Nlc3M/OiAoYXJnMTogYW55KSA9PiBhbnksXG4gICAgICAgICAgICB8fT4sXG4gICAgICAgIC4uLixcbiAgICAgIH0sXG4gICAgfH07XG5cbmlmIChfX0RFVl9fIHx8IGdsb2JhbC5STiRCcmlkZ2VsZXNzKSB7XG4gIC8vIE9uIEFuZHJvaWQsIFZpZXcgZXh0ZW5kcyB0aGUgYmFzZSBjb21wb25lbnQgd2l0aCBhZGRpdGlvbmFsIHZpZXctb25seSBwcm9wc1xuICAvLyBPbiBpT1MsIHRoZSBiYXNlIGNvbXBvbmVudCBpcyBWaWV3XG4gIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgdmlld0NvbmZpZyA9IFJlYWN0TmF0aXZlVmlld1ZpZXdDb25maWdBbmRyb2lkO1xuICAgIHJlZ2lzdGVyR2VuZXJhdGVkVmlld0NvbmZpZygnUkNUVmlldycsIFJlYWN0TmF0aXZlVmlld1ZpZXdDb25maWdBbmRyb2lkKTtcbiAgfSBlbHNlIHtcbiAgICB2aWV3Q29uZmlnID0ge307XG4gICAgcmVnaXN0ZXJHZW5lcmF0ZWRWaWV3Q29uZmlnKCdSQ1RWaWV3Jywge3VpVmlld0NsYXNzTmFtZTogJ1JDVFZpZXcnfSk7XG4gIH1cblxuICBOYXRpdmVWaWV3Q29tcG9uZW50ID0gJ1JDVFZpZXcnO1xufSBlbHNlIHtcbiAgTmF0aXZlVmlld0NvbXBvbmVudCA9IHJlcXVpcmVOYXRpdmVDb21wb25lbnQoJ1JDVFZpZXcnKTtcbn1cblxuZXhwb3J0IGNvbnN0IF9fSU5URVJOQUxfVklFV19DT05GSUcgPSB2aWV3Q29uZmlnO1xuXG5pbnRlcmZhY2UgTmF0aXZlQ29tbWFuZHMge1xuICAraG90c3BvdFVwZGF0ZTogKFxuICAgIHZpZXdSZWY6IFJlYWN0LkVsZW1lbnRSZWY8SG9zdENvbXBvbmVudDxtaXhlZD4+LFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICkgPT4gdm9pZDtcbiAgK3NldFByZXNzZWQ6IChcbiAgICB2aWV3UmVmOiBSZWFjdC5FbGVtZW50UmVmPEhvc3RDb21wb25lbnQ8bWl4ZWQ+PixcbiAgICBwcmVzc2VkOiBib29sZWFuLFxuICApID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBDb21tYW5kczogTmF0aXZlQ29tbWFuZHMgPSBjb2RlZ2VuTmF0aXZlQ29tbWFuZHM8TmF0aXZlQ29tbWFuZHM+KHtcbiAgc3VwcG9ydGVkQ29tbWFuZHM6IFsnaG90c3BvdFVwZGF0ZScsICdzZXRQcmVzc2VkJ10sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgKChOYXRpdmVWaWV3Q29tcG9uZW50OiBhbnkpOiBWaWV3TmF0aXZlQ29tcG9uZW50VHlwZSk7XG4iXX0=